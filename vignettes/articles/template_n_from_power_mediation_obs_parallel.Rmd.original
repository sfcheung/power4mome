---
title: "Quick Template: Parallel Mediation with Observed Variables"
date: "`r Sys.Date()`"
output:
  html_document:
    fig.align: "center"
    toc: true
    toc_depth: 2
    number_sections: false
bibliography: references.bib
csl: apa.csl
---

```{r knitr_setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "",
  fig.align = "center"
)
```

```{r load_pre, child=c("template_n_preamble.txt")}
```

```{r load_flow, echo=FALSE, results="asis"}
# Adapted from this answer
cat(readLines("template_n_flowchart.txt"),
    sep = "\n")
```

# Scope

This file is for parallel mediation models.

# Try One N

Estimate the power for a sample size.

A parallel mediation model has several
parallel paths (three in the following
example). The test function
`test_k_indirect_effects()` can be used
to estimate the power for having indirect
paths significant if `omnibus` is set to
`"all_sig"`.

The code:

```{r med, eval=TRUE, results="hide", message=FALSE}
library(power4mome)
#
# ====== Model: Form ======
# Omit any paths hypothesized to be zero
model <-
"
m1 ~ x
m2 ~ x
m3 ~ x
y ~ m1 + m2 + m3 + x
"
#
# ====== Model: Population Values ======
# l: large (.50 by default)
# m: medium (.30 by default)
# s: small (.10 by default)
# -l, -m, and -s denote negative values
# Can also set to a number directly
# Set each path to the hypothesized magnitude
model_es <-
"
m1 ~ x: m
m2 ~ x: m
m3 ~ x: m
y ~ m1: s
y ~ m2: m
y ~ m3: l
y ~ x: s
"
#
# ====== Test the Model Specification ======
out <- power4test(nrep = 2,
                  model = model,
                  pop_es = model_es,
                  n = 50000,
                  iseed = 1234)
#
# ====== Check the Data Generated ======
print(out,
      data_long = TRUE)
#
# ====== Estimate the Power ======
# For n = 100,
# when testing all indirect effects by
# Monte Carlo confidence intervals
out <- power4test(nrep = 400,
                  model = model,
                  pop_es = model_es,
                  n = 100,
                  R = 1000,
                  ci_type = "mc",
                  test_fun = test_k_indirect_effects,
                  test_args = list(x = "x",
                                   y = "y",
                                   mc_ci = TRUE,
                                   omnibus = "all_sig"),
                  iseed = 1234,
                  parallel = TRUE)
#
# ====== Compute the Rejection Rate ======
rejection_rates(out)
```

The results:

```{r med_out}
print(out,
      data_long = TRUE)
rejection_rates(out)
```

(`est` is `NaN` because the test is for
all three paths and so there is no single
point estimate for the test.)

```{r load_pre, child=c("template_n_find_regions.txt")}
```

The results:

```{r template_n_from_power_mediation_obs_parallel_plot1, fig.cap = "Power Curve"}
#
# ===== Basic Results =====
n_power_region
#
# ===== Plot the (Crude) Power Curve and the Regions =====
plot(n_power_region)
```

```{r load_pre, child=c("template_n_find_regions_results.txt")}
```


# Code Template {#code_template}

This is the code used above:

```{r code_example, eval = FALSE}
library(power4mome)

# ====== Model and Effect Size (Population Values) ======

model <-
"
m1 ~ x
m2 ~ x
m3 ~ x
y ~ m1 + m2 + m3 + x
"

model_es <-
"
m1 ~ x: m
m2 ~ x: m
m3 ~ x: m
y ~ m1: s
y ~ m2: m
y ~ m3: l
y ~ x: s
"

# Test the Model Specification

out <- power4test(nrep = 2,
                  model = model,
                  pop_es = model_es,
                  n = 50000,
                  iseed = 1234)

# Check the Data Generated

print(out,
      data_long = TRUE)

# ====== Try One N and Estimate the Power ======

# For n = 100,
# when testing all indirect effects by
# Monte Carlo confidence intervals

out <- power4test(nrep = 400,
                  model = model,
                  pop_es = model_es,
                  n = 100,
                  R = 1000,
                  ci_type = "mc",
                  test_fun = test_k_indirect_effects,
                  test_args = list(x = "x",
                                   y = "y",
                                   mc_ci = TRUE,
                                   omnibus = "all_sig"),
                  iseed = 1234,
                  parallel = TRUE)
rejection_rates(out)

# ====== Case 1: Regions of Ns Significantly Lower Than the Target ======

# Call n_from_power()
# - Set target power: target_power = .80 (Default, can be omitted)
# - Set the seed for the simulation: Integer. Should always be set.
# To set desired precision:
# - Set final number of R: final_R = 1000 (Default, can be omitted)
# - Set final number of replications: final_nrep = 400 (Default, can be omitted)

n_power_ub <- n_from_power(out,
                           what = "ub",
                           seed = 1357)
summary(n_power_ub)
plot(n_power_ub)

# ====== Case 2: Regions of Ns Significantly Higher Than the Target ======

n_power_lb <- n_from_power(out,
                           what = "lb",
                           seed = 1357)
summary(n_power_lb)
plot(n_power_lb)
```

```{r load_final, child=c("template_n_final_remarks.txt")}
```

