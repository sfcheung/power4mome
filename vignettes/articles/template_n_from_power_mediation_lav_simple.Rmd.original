---
title: "Quick Template: Simple Mediation with Latent Variables"
date: "`r Sys.Date()`"
output:
  html_document:
    fig.align: "center"
    toc: true
    toc_depth: 2
    number_sections: false
bibliography: references.bib
csl: apa.csl
---

```{r knitr_setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "",
  fig.align = "center"
)
```

```{r load_pre, child=c("template_n_ins_preamble.txt")}
```

# Scope

This file is for simple mediation models
with latent variables.


```{r load_pre, child=c("template_n_ins_functions_used.txt")}
```

- `test_indirect_effect()`

    - Test the indirect effect using
      Monte Carlo or bootstrap confidence
      intervals. Used by `power4test()`.

```{r load_flow, echo=FALSE, results="asis"}
# Adapted from this answer
cat(readLines("template_n_ins_flowchart.txt"),
    sep = "\n")
```

# Set Up The Model and Test

Load the package first:

```{r load_pkg}
library(power4mome)
```

Estimate the power for a sample size.

The code for the model:

```{r model, eval=TRUE, results="hide", message=FALSE}
# ====== Model: Form ======

model <-
"
m ~ x
y ~ m + x
"

# ====== Model: Population Values ======
# l: large (.50 by default)
# m: medium (.30 by default)
# s: small (.10 by default)
# n: nil (.00 by default)
# -l, -m, and -s denote negative values
# Omitted paths are zero by default
# Can also set to a number directly
# Set each path to the hypothesized magnitude

model_es <-
"
m ~ x: m
y ~ m: l
y ~ x: s
"
```

```{r template_n_from_power_mediation_lav_simple_model, echo = FALSE, fig.cap = "The Model", fig.width = 7, fig.height = 5}
# knitr::opts_chunk$set(dpi = 300, dev.args = list(png = list(type = "cairo")))
library(semPlot)
library(semptools)
suppressMessages(library(lavaan))
mod <-
"
m ~ m*x
y ~ l*m + s*x
x =~ x1 + x2 + x3 + x4
m =~ m1 + m2 + m3
y =~ y1 + y2 + y3
"
fit0 <- sem(mod, do.fit = FALSE, fixed.x = FALSE)
set.seed(1234)
onames <- lavNames(fit0)
p <- length(onames)
dat <- data.frame(MASS::mvrnorm(100, rep(0, p), diag(p)))
colnames(dat) <- onames
fit0 <- sem(mod, dat, do.fit = FALSE)
layout_m <- matrix(c(NA, "m", NA,
                     "x", NA, "y"), 2, 3, byrow = TRUE)
p <- semPaths(fit0,
              whatLabels = "label",
              nCharNodes = 0,
              exoCov = FALSE,
              edge.label.cex = 1.25,
              label.cex = 1.8,
              residuals = FALSE,
              sizeMan = 6,
              sizeMan2 = 4,
              sizeLat = 8,
              sizeLat2 = 7,
              asize = 5,
              DoNotPlot = TRUE)
p2 <- set_sem_layout(
          p,
          factor_layout = layout_m,
          factor_point_to = c(x = "left",
                              m = "up",
                              y = "right"),
          indicator_spread = c(m = 1.2)
        )
p2$graphAttributes$Edges$labels[1:3] <-
  c("m\n(medium: .30)",
    "l\n(large: .50)",
    "s\n(small: .10)")
plot(p2)
text(label = "Simple Mediation Model",
     x = 0, y = -1,
     cex = 1.25)
```

Refer to this [article](https://sfcheung.github.io/power4mome/articles/power4test_latent_mediation.html)
on how to set `number_of_indicators` and
`reliability` when calling `power4test()`.

```{r check_model, eval=TRUE, results="hide", message=FALSE}

# ====== Test the Model Specification ======

out <- power4test(nrep = 2,
                  model = model,
                  pop_es = model_es,
                  n = 50000,
                  number_of_indicators = c(x = 4,
                                           m = 3,
                                           y = 3),
                  reliability = c(x = .80,
                                  m = .70,
                                  y = .80),
                  iseed = 1234)

# ====== Check the Data Generated ======

print(out,
      data_long = TRUE)

# ====== Estimate the Power ======

# For n = 100,
# when testing the indirect effect by
# Monte Carlo confidence interval

out <- power4test(nrep = 400,
                  model = model,
                  pop_es = model_es,
                  n = 100,
                  number_of_indicators = c(x = 4,
                                           m = 3,
                                           y = 3),
                  reliability = c(x = .80,
                                  m = .70,
                                  y = .80),
                  R = 1000,
                  ci_type = "mc",
                  test_fun = test_indirect_effect,
                  test_args = list(x = "x",
                                   m = "m",
                                   y = "y",
                                   mc_ci = TRUE),
                  iseed = 1234,
                  parallel = TRUE)

# ====== Compute the Rejection Rate ======

rejection_rates(out)
```

The results:

```{r model_out}
print(out,
      data_long = TRUE)
rejection_rates(out)
```

```{r load_find, child=c("template_n_ins_find_regions.txt")}
```

The results:

```{r template_n_from_power_mediation_lav_simple_plot, fig.cap = "Power Curve"}
# ===== Basic Results =====

n_power_region

# ===== Plot the (Crude) Power Curve and the Regions =====

plot(n_power_region)
```

```{r load_res, child=c("template_n_ins_find_regions_results.txt")}
```

# Code Template {#code_template}

This is the code used above:

```{r code_example, eval = FALSE}
library(power4mome)

# ====== Model and Effect Size (Population Values) ======

model <-
"
m ~ x
y ~ m + x
"
model_es <-
"
m ~ x: m
y ~ m: l
y ~ x: s
"

# Test the Model Specification

out <- power4test(nrep = 2,
                  model = model,
                  pop_es = model_es,
                  n = 50000,
                  number_of_indicators = c(x = 4,
                                           m = 3,
                                           y = 3),
                  reliability = c(x = .80,
                                  m = .70,
                                  y = .80),
                  iseed = 1234)

# Check the Data Generated

print(out,
      data_long = TRUE)

# ====== Try One N and Estimate the Power ======

# For n = 100,
# when testing the indirect effect by
# Monte Carlo confidence interval

out <- power4test(nrep = 400,
                  model = model,
                  pop_es = model_es,
                  n = 100,
                  number_of_indicators = c(x = 4,
                                           m = 3,
                                           y = 3),
                  reliability = c(x = .80,
                                  m = .70,
                                  y = .80),
                  R = 1000,
                  ci_type = "mc",
                  test_fun = test_indirect_effect,
                  test_args = list(x = "x",
                                   m = "m",
                                   y = "y",
                                   mc_ci = TRUE),
                  iseed = 1234,
                  parallel = TRUE)

rejection_rates(out)

# ====== Regions of Ns ======

# Call n_region_from_power()
# - Set target power: target_power = .80 (Default, can be omitted)
# - Set the seed for the simulation: Integer. Should always be set.
# To set desired precision:
# - Set final number of R: final_R = 1000 (Default, can be omitted)
# - Set final number of replications: final_nrep = 400 (Default, can be omitted)

n_power_region <- n_region_from_power(out,
                                      seed = 1357)
n_power_region
plot(n_power_region)
summary(n_power_region)
```

```{r load_final, child=c("template_n_ins_final_remarks.txt")}
```

