---
title: "Quick Template: Simple Moderated Mediation with Observed Variables: b-Path Moderated"
date: "`r Sys.Date()`"
output:
  html_document:
    fig.align: "center"
    toc: true
    toc_depth: 2
    number_sections: false
bibliography: references.bib
csl: apa.csl
---

```{r knitr_setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "",
  fig.align = "center"
)
```

```{r load_pre, child=c("template_n_ins_preamble.txt")}
```

# Scope

This file is for moderated mediation
models with only one mediator, and the
*b* path moderated.


```{r load_pre, child=c("template_n_ins_functions_used.txt")}
```

- `test_index_of_mome()`

    - Test the moderated mediation by
      the index of moderated mediation. Used by
    `power4test()`.

```{r load_flow, echo=FALSE, results="asis"}
# Adapted from this answer
cat(readLines("template_n_ins_flowchart.txt"),
    sep = "\n")
```

# Set Up The Model and Test

Load the package first:

```{r load_pkg}
library(power4mome)
```

Estimate the power for a sample size.

The code for the model:

```{r model, eval=TRUE, results="hide", message=FALSE}
# ====== Model: Form ======

model <-
"
m ~ x
y ~ m + x + w + m:w
"

# ====== Model: Population Values ======

# For a regression coefficient
# l: large (.50 by default)
# m: medium (.30 by default)
# s: small (.10 by default)
# n: nil (.00 by default)
# For the product term:
# l: large (.15 by default)
# m: medium (.10 by default)
# s: small (.05 by default)
# -l, -m, and -s denote negative values
# Omitted paths are zero by default
# Can also set to a number directly
# Set each path to the hypothesized magnitude

# For a path moderated, the coefficient
# of a predictor is its standardized
# effect when the moderator equal to
# its mean.

model_es <-
"
m ~ x: m
y ~ w: s
y ~ m:w: l
y ~ m: m
y ~ x: s
"
```

```{r template_n_from_power_mome_obs_b_model, echo = FALSE, fig.cap = "The Model", fig.width = 6, fig.height = 4}
library(semPlot)
library(semptools)
suppressMessages(library(lavaan))
out <- power4test(nrep = 2,
                  model = model,
                  pop_es = model_es,
                  n = 100,
                  iseed = 1234,
                  parallel = FALSE,
                  progress = FALSE)
dat <- out$sim_all[[1]]$mm_lm_dat_out
mod <-
"
m ~ m*x
mw ~ m*m + l*w
y ~ mw + s*x + s*w
"
dat$mw <- dat$m * dat$w
fit0 <- sem(mod, dat, do.fit = FALSE, fixed.x = FALSE)
layout_m <- matrix(c(NA, NA, "m",  NA, "w",
                     NA, NA, NA, "mw", NA,
                     "x", NA, NA, NA, "y"), 3, 5, byrow = TRUE)
p <- semPaths(fit0,
              whatLabels = "label",
              layout = layout_m,
              nCharNodes = 0,
              exoCov = FALSE,
              edge.label.cex = 1.5,
              label.cex = 1.8,
              residuals = FALSE,
              sizeMan = 10,
              asize = 5,
              DoNotPlot = TRUE)
# plot(p)
str_s <- "s\n(small:\n.10)"
str_m <- "m\n(medium:\n.30)"
str_l <- "l\n(large:\n.50)"
str_2s <- "s\n(small:\n.05)"
str_2m <- "m\n(medium:\n.10)"
str_2l <- "l\n(large:\n.15)"
p2 <- p |>
      set_node_attribute(
        c(mw = .01),
        attribute_name = "width") |>
      set_node_attribute(
        c(mw = .01),
        attribute_name = "height") |>
      set_edge_attribute(
        c("mw ~ m" = 0),
        attribute_name = "asize") |>
      set_edge_attribute(
        c("mw ~ m" = str_m,
          "mw ~ w" = str_2l,
          "m ~ x" = str_m,
          "y ~ w" = str_s,
          "y ~ x" = str_s),
        attribute_name = "labels")
plot(p2)
```


```{r model_check, eval=TRUE, results="hide", message=FALSE}

# ====== Test the Model Specification ======

out <- power4test(nrep = 2,
                  model = model,
                  pop_es = model_es,
                  n = 50000,
                  iseed = 1234)

# ====== Check the Data Generated ======

print(out,
      data_long = TRUE)

# ====== Estimate the Power ======

# For n = 100,
# when testing the index of moderated mediation by
# Monte Carlo confidence interval.

out <- power4test(nrep = 400,
                  model = model,
                  pop_es = model_es,
                  n = 100,
                  R = 1000,
                  ci_type = "mc",
                  test_fun = test_index_of_mome,
                  test_args = list(x = "x",
                                   m = "m",
                                   y = "y",
                                   w = "w",
                                   mc_ci = TRUE),
                  iseed = 1234,
                  parallel = TRUE)

# ====== Compute the Rejection Rate ======

rejection_rates(out)
```

The results:

```{r model_out}
print(out,
      data_long = TRUE)
rejection_rates(out)
```

```{r load_find, child=c("template_n_ins_find_regions.txt")}
```

The results:

```{r template_n_from_power_mome_obs_b_plot, fig.cap = "Power Curve"}
# ===== Basic Results =====

n_power_region

# ===== Plot the (Crude) Power Curve and the Regions =====

plot(n_power_region)
```

```{r load_res, child=c("template_n_ins_find_regions_results.txt")}
```

# Code Template {#code_template}

This is the code used above:

```{r code_example, eval = FALSE}
library(power4mome)

# ====== Model and Effect Size (Population Values) ======

model <-
"
m ~ x
y ~ m + x + w + m:w
"
model_es <-
"
m ~ x: m
y ~ w: s
y ~ m:w: l
y ~ m: m
y ~ x: s
"

# Test the Model Specification

out <- power4test(nrep = 2,
                  model = model,
                  pop_es = model_es,
                  n = 50000,
                  fit_model_args = list(fit_function = "lm"),
                  iseed = 1234)

# Check the Data Generated

print(out,
      data_long = TRUE)

# ====== Try One N and Estimate the Power ======

# For n = 100,
# when testing the index of moderated mediation by
# Monte Carlo confidence interval.

out <- power4test(nrep = 400,
                  model = model,
                  pop_es = model_es,
                  n = 100,
                  R = 1000,
                  ci_type = "mc",
                  test_fun = test_index_of_mome,
                  test_args = list(x = "x",
                                   m = "m",
                                   y = "y",
                                   w = "w",
                                   mc_ci = TRUE),
                  iseed = 1234,
                  parallel = TRUE)

rejection_rates(out)

# ====== Regions of Ns ======

# Call n_region_from_power()
# - Set target power: target_power = .80 (Default, can be omitted)
# - Set the seed for the simulation: Integer. Should always be set.
# To set desired precision:
# - Set final number of R: final_R = 1000 (Default, can be omitted)
# - Set final number of replications: final_nrep = 400 (Default, can be omitted)

n_power_region <- n_region_from_power(out,
                                      seed = 1357)
n_power_region
plot(n_power_region)
summary(n_power_region)
```

```{r load_final, child=c("template_n_ins_final_remarks.txt")}
```

