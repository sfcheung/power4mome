---
title: "Quick Template: Mediation with Observed Variables"
date: "`r Sys.Date()`"
output:
  html_document:
    fig.align: "center"
    toc: true
    toc_depth: 2
    number_sections: false
bibliography: references.bib
csl: apa.csl
---

```{r knitr_setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "",
  fig.align = "center"
)
```

```{r load_pre, child=c("template_x_preamble.txt")}
```

```{r load_flow, echo=FALSE, results="asis"}
# Adapted from this answer
cat(readLines("template_x_flowchart.txt"),
    sep = "\n")
```

# Scope

This file is for simple mediation models.

# Try One N

Estimate the power for a sample size.

The code:

```{r med_simple, eval=TRUE, results="hide", message=FALSE}
library(power4mome)
#
# ====== Model: Form ======
model <-
"
m ~ x
y ~ m + x
"
#
# ====== Model: Population Values ======
# l: large (.50 by default)
# m: medium (.30 by default)
# s: small (.10 by default)
model_es <-
"
m ~ x: s
y ~ m: l
y ~ x: m
"
#
# ====== Test the Model Specification ======
out <- power4test(nrep = 2,
                  model = model,
                  pop_es = model_es,
                  n = 50000,
                  iseed = 1234)
#
# ====== Check the Data Generated ======
print(out,
      data_long = TRUE)
#
# ====== Estimate the Power ======
# For n = 100,
# when testing the indirect effect by
# Monte Carlo confidence interval
out <- power4test(nrep = 400,
                  model = model,
                  pop_es = model_es,
                  n = 100,
                  R = 1000,
                  ci_type = "mc",
                  test_fun = test_indirect_effect,
                  test_args = list(x = "x",
                                   m = "m",
                                   y = "y",
                                   mc_ci = TRUE),
                  iseed = 1234,
                  parallel = TRUE)
#
# ====== Compute the Rejection Rate ======
rejection_rates(out)
```

The results:

```{r med_simple_out}
print(out,
      data_long = TRUE)
rejection_rates(out)
```

# Try Another N

To rerun the simulation to estimate
power for another sample size.

The code:

```{r med_simple_new_n, eval=TRUE, results="hide", message=FALSE}
#
# ===== Reuse the output of power4test() =====
# Estimate power for n = 150
# Set n to 150
out_new_n <- power4test(out,
                        n = 150)
#
# ===== Compute Rejection Rate (Power) =====
rejection_rates(out_new_n)
```

The results:

```{r med_simple_new_n_out}
rejection_rates(out_new_n)
```

# Try Several N's

Rerun the simulation to estimate the
power for with several sample sizes.

The code:

```{r med_simple_ns, eval=TRUE, results="hide", message=FALSE}
#
# ===== Reuse the output of power4test() =====
# Estimate power for n = 200, 250, 300
# Use power4test_by_n()
out_ns <- power4test_by_n(out,
                          n = c(200, 250, 300),
                          by_seed = 5789)
#
# ===== Compute Rejection Rate (Power) =====
rejection_rates(out_ns)
```

The results:

```{r med_simple_ns_out}
rejection_rates(out_ns)
```

# Search N With Target Power

Search, by simulation, the sample size
with estimated either:

- Case 1: Sample size with the 95%
  confidence interval of its estimated
  power just below the target
  level (e.g., .80). That is,
  its upper bound (`ub`) close to the
  target level. Sample sizes lower
  than this sample size has their power
  levels significantly lower than the
  target level.

- Case 2: Sample size with the 95%
  confidence interval of its estimated
  power just above the target
  level (e.g., .80).  That is,
  its lower bound (`lb`) close to the
  target level. Sample sizes higher
  than this sample size has their power
  levels significantly higher than the
  target level.

## Use the Output of `power4test()`

Do this step after calling `power4test()`
on a sample size.

It can take some time to run if the estimated power
of the sample size is too different from
the target power.

We consider Case 1 first: Sample sizes with power significantly
lower than the target level.

The code:

```{r med_simple_n_from, eval=TRUE, results="hide", message=FALSE, fig.keep="none"}
#
# ===== Reuse the output of power4test() =====
# Call n_from_power()
# - Set target power: target_power = .80 (Default, can be omitted)
# To set desired precision:
# - Set final number of R: final_R = 1000 (Default, can be omitted)
# - Set final number of replications: final_nrep = 400 (Default, can be omitted)
n_power_80_ub <- n_from_power(out,
                              what = "ub",
                              seed = 1357)
#
# ===== Print the Summary =====
summary(n_power_80_ub)
#
# ===== Plot the (Crude) Power Curve =====
plot(n_power_80_ub)
```

The results:

```{r temp_med_obs_med_simple_n_from_out, fig.cap = "Power Curve"}
#
# ===== Print the Summary =====
summary(n_power_80_ub)
#
# ===== Plot the (Crude) Power Curve =====
plot(n_power_80_ub)
```

Case 2: Sample sizes with power significantly
higher than the target level.

The code:

```{r med_simple_n_from_lb, eval=TRUE, results="hide", message=FALSE, fig.keep="none"}
#
# ===== Reuse the output of power4test() =====
# Call n_from_power()
# - Set target power: target_power = .80 (Default, can be omitted)
# To set desired precision:
# - Set final number of R: final_R = 1000 (Default, can be omitted)
# - Set final number of replications: final_nrep = 400 (Default, can be omitted)
n_power_80_lb <- n_from_power(out,
                              what = "lb",
                              seed = 1357)
#
# ===== Print the Summary =====
summary(n_power_80_lb)
#
# ===== Plot the (Crude) Power Curve =====
plot(n_power_80_lb)
```

The results:

```{r temp_med_obs_med_simple_n_from_out_lb, fig.cap = "Power Curve"}
#
# ===== Print the Summary =====
summary(n_power_80_lb)
#
# ===== Plot the (Crude) Power Curve =====
plot(n_power_80_lb)
```


## Use the Output of `power4test_by_n()`

Do this step after calling `power4test_by_n()`
on a sample size.

Continue the search using the output
on several sample sizes
by calling `n_from_power()` on the
output of `power4test_by_n()`.

It can take some time to run if estimated levels
of power
of the sample sizes are too different from
the target power.

The code for Case 1: Sample sizes with power significantly
lower than the target level.

```{r med_simple_n_from_by, eval=TRUE, results="hide", message=FALSE, fig.keep="none"}
#
# ===== Reuse the output of power4test_by_n() =====
# Call n_from_power()
# - Set target power: target_power = .80 (Default, can be omitted)
# To set desired precision:
# - Set final number of R: final_R = 1000 (Default, can be omitted)
# - Set final number of replications: final_nrep = 400 (Default, can be omitted)
n_power_80_ns_ub <- n_from_power(out_ns,
                                 what = "ub",
                                 seed = 1357)
#
# ===== Print the Summary =====
summary(n_power_80_ns_ub)
#
# ===== Plot the (Crude) Power Curve =====
plot(n_power_80_ns_ub)
```

The results:

```{r temp_med_obs_med_simple_n_from_by_out, fig.cap = "Power Curve"}
#
# ===== Print the Summary =====
summary(n_power_80_ns_ub)
#
# ===== Plot the (Crude) Power Curve =====
plot(n_power_80_ns_ub)
```
The code for Case 2: Sample sizes with power significantly
higher than the target level.

```{r med_simple_n_from_by_lb, eval=TRUE, results="hide", message=FALSE, fig.keep="none"}
#
# ===== Reuse the output of power4test_by_n() =====
# Call n_from_power()
# - Set target power: target_power = .80 (Default, can be omitted)
# To set desired precision:
# - Set final number of R: final_R = 1000 (Default, can be omitted)
# - Set final number of replications: final_nrep = 400 (Default, can be omitted)
n_power_80_ns_lb <- n_from_power(out_ns,
                                 what = "lb",
                                 seed = 1357)
#
# ===== Print the Summary =====
summary(n_power_80_ns_lb)
#
# ===== Plot the (Crude) Power Curve =====
plot(n_power_80_ns_lb)
```

The results:

```{r temp_med_obs_med_simple_n_from_by_out_lb, fig.cap = "Power Curve"}
#
# ===== Print the Summary =====
summary(n_power_80_ns_lb)
#
# ===== Plot the (Crude) Power Curve =====
plot(n_power_80_ns_lb)
```

# Change Population Values and Repeat

If necessary, change the population value(s)
and repeat the steps.

For example, set both the `m ~ x` path
and `y ~ m` path to medium (.30)
(population indirect effect .09).

The code:

```{r med_simple2, eval=TRUE, results="hide", message=FALSE}
model_es2 <-
"
m ~ x: m
y ~ m: m
y ~ x: m
"
#
# ====== Estimate the Power ======
out2 <- power4test(nrep = 400,
                   model = model,
                   pop_es = model_es2,
                   n = 100,
                   R = 1000,
                   ci_type = "mc",
                   test_fun = test_indirect_effect,
                   test_args = list(x = "x",
                                    m = "m",
                                    y = "y",
                                    mc_ci = TRUE),
                   iseed = 1234,
                   parallel = TRUE)
#
# ====== Compute the Rejection Rate ======
rejection_rates(out2)
```

The results:

```{r med_simple2_out}
print(out2,
      data_long = TRUE)
rejection_rates(out2)
```

For illustration, go directly to
searching by `n_from_power()`:

The code for Case 1: Sample sizes with power significantly
lower than the target level.

```{r med_simple2_n_from, eval=TRUE, results="hide", message=FALSE, fig.keep="none"}
#
# ===== Reuse the output of power4test() =====
n2_power_80_ub <- n_from_power(out2,
                            what = "ub",
                            seed = 1357)
#
# ===== Print the Summary =====
summary(n2_power_80_ub)
#
# ===== Plot the (Crude) Power Curve =====
plot(n2_power_80_ub)
```

The results:

```{r temp_med_obs_med_simple2_n_from_out, fig.cap = "Power Curve"}
#
# ===== Print the Summary =====
summary(n2_power_80_ub)
#
# ===== Plot the (Crude) Power Curve =====
plot(n2_power_80_ub)
```

The code for Case 2: Sample sizes with power significantly
higher than the target level.

```{r med_simple2_n_from_lb, eval=TRUE, results="hide", message=FALSE, fig.keep="none"}
#
# ===== Reuse the output of power4test() =====
n2_power_80_lb <- n_from_power(out2,
                            what = "lb",
                            seed = 1357)
#
# ===== Print the Summary =====
summary(n2_power_80_lb)
#
# ===== Plot the (Crude) Power Curve =====
plot(n2_power_80_lb)
```

The results:

```{r temp_med_obs_med_simple2_n_from_out_lb, fig.cap = "Power Curve"}
#
# ===== Print the Summary =====
summary(n2_power_80_lb)
#
# ===== Plot the (Crude) Power Curve =====
plot(n2_power_80_lb)
```
