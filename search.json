[{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sfcheung.github.io/power4mome/articles/main_workflow.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Main Workflows","text":"technical appendix describes workflows major functions power4mome.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/main_workflow.html","id":"from-population-to-power","dir":"Articles","previous_headings":"","what":"From Population to Power","title":"Main Workflows","text":"workflow power4test(). Population Power","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/main_workflow.html","id":"generate-simulated-data-sim_data","dir":"Articles","previous_headings":"","what":"Generate Simulated Data (sim_data())","title":"Main Workflows","text":"internal function sim_data_i() called m times sim_data() generate m datasets. Workflow sim_data_i()","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"article brief illustration use power4test() package power4mome power analysis Mediation, moderation, moderated-mediation model fitted structural equation model modeling using lavaan.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"prerequisite","dir":"Articles","previous_headings":"","what":"Prerequisite","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Basic knowledge fitting models lavaan required. Readers also expected basic knowledge mediation, moderation, /moderated mediation.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"brief illustration. complicated scenarios features power4mome described vignettes.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"package","dir":"Articles","previous_headings":"","what":"Package","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"introduction needs following package(s):","code":"library(power4mome)"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Two functions sufficient estimating power give particular model, population values, sample size, test used. basic workflow: Specify model syntax population model, lavaan style, set population values model parameters. Call power4test() examine setup datasets generated. Repeat previous steps model specified correctly. Call power4test() , test specified. Call get_rejection_rates() compute power.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"package power4mome needed vignette.","code":"library(power4mome)"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"mediation","dir":"Articles","previous_headings":"","what":"Mediation","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Let’s consider simple mediation model. like estimate power testing mediation effect Monte Carlo confidence interval.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"specify-the-population-model","dir":"Articles","previous_headings":"Mediation","what":"Specify the Population Model","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"model syntax Note , even going test mediation, moderation, moderated-mediation effects, need add labels model. taken care test functions, use package manymome (Cheung & Cheung, 2024).","code":"mod <- \" m ~ x y ~ m + x \""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"es_convention","dir":"Articles","previous_headings":"Mediation","what":"Specify The Population Values","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"two approaches : using named vectors lists, using long string similar lavaan model syntax. second approach demonstrated . Suppose want estimate power : path x m “large” strength. path m y “medium” strength. path x m “small” strength. default, power4mome use convention regression path correlation:1 Small: .10 (-.10) Medium: .30 (-.30) Large: .50 (-.50) product term, convention: Small: .05 (-.05) Medium: .10 (-.10) Large: .15 (-.15) values standardized solution (-called “betas”). following string denote desired values: line starts tag, parameter presented lavaan syntax. tag ends colon, :. colon population value, can : word denoting value. default: s: Small. (-s small negative.) m: Medium. (-m medium negative.) l: Large. (-l large negative.) nil: Zero. regression coefficients covariances, specified, set zero.","code":"mod_es <- \" m ~ x: l y ~ m: m y ~ x: s \""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-check-the-model","dir":"Articles","previous_headings":"Mediation","what":"Call power4test() to Check the Model","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"arguments used: nrep: number replications. stage, small number can used. important large sample size. model: model syntax. pop_es: string setting population values. n: sample size replications. stage, just checking model data generation, number can set large one unless model slow fit sample size large. iseed: supplied, used set seed random number generator. advised always set arbitrary integer, make results reproducible.2 population values can shown print object: default, population model fitted dataset, hence section <fit>. population values regression paths specified. necessary, can check data generation adding data_long = TRUE printing output: section Descriptive Statistics, generated psych::describe(), shows basic descriptive statistics observed variables. expected, means close zero standard deviations close one, datasets generated using standardized model. section Parameter Estimates Based shows parameter estimates population model fitted datasets combined. total sample size large, estimates close population values. results show population model desired one.","code":"out <- power4test(nrep = 2,                   model = mod,                   pop_es = mod_es,                   n = 50000,                   iseed = 1234) out #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x #> y ~ m + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x #> y ~ m + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.500   #>   y ~                         #>     m                 0.300   #>     x                 0.100   #>  #> Variances: #>                    Population #>    .m                 0.750   #>    .y                 0.870   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  50000  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                         50000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 print(out,       data_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x #> y ~ m + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x #> y ~ m + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.500   #>   y ~                         #>     m                 0.300   #>     x                 0.100   #>  #> Variances: #>                    Population #>    .m                 0.750   #>    .y                 0.870   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  50000  #>  #> ==== Descriptive Statistics ==== #>  #>   vars     n mean sd skew kurtosis se #> m    1 1e+05 0.00  1 0.01     0.03  0 #> y    2 1e+05 0.01  1 0.01     0.00  0 #> x    3 1e+05 0.00  1 0.01     0.01  0 #>  #> ===== Parameter Estimates Based on All 2 Samples Combined ===== #>  #> Total Sample Size: 100000  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   m ~                       #>     x                 0.500 #>   y ~                       #>     m                 0.295 #>     x                 0.102 #>  #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                         50000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"med_power","dir":"Articles","previous_headings":"Mediation","what":"Call power4test() to Do the Target Test","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"can now simulation estimate power. large number datasets (e.g., 500) target sample size generated, target test conducted datasets. Suppose like estimate power using Monte Carlo confidence interval test indirect effect x y m, sample size 50. call: new arguments used: R: number replications used generate Monte Carlo simulated estimates, 2000 example. ci_type: method used generate estimates. Support Monte Carlo (\"mc\") nonparametric bootstrapping (\"boot\").3 Although bootstrapping usually used test indirect effect, slow R bootstrapping nrep datasets (model fitted R*nrep times). Therefore, preferable use Monte Carlo initial estimation. test_fun: function used test replication. function following specific requirement can used, power4mome comes several built-function tests. function test_indirect_effect() used test indirect effect model. test_args: named list arguments supplied test_fun. test_indirect_effect(), named list specifying predictor (x), mediator(s) (m), outcome (y). path number mediators can supported. Please refer help page test_indirect_effect().4 parallel: test conducted slow, case test done Monte Carlo nonparametric bootstrapping confidence interval, advised enable parallel processing setting parallel TRUE.5 default printout:","code":"out <- power4test(nrep = 100,                   model = mod,                   pop_es = mod_es,                   n = 50,                   R = 2000,                   ci_type = \"mc\",                   test_fun = test_indirect_effect,                   test_args = list(x = \"x\",                                    m = \"m\",                                    y = \"y\",                                    mc_ci = TRUE),                   iseed = 1234,                   parallel = TRUE) out #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x #> y ~ m + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x #> y ~ m + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.500   #>   y ~                         #>     m                 0.300   #>     x                 0.100   #>  #> Variances: #>                    Population #>    .m                 0.750   #>    .y                 0.870   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  100  #> Sample Sizes:  50  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #> - mc_out #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> =========== <mc_out> =========== #>  #>  #> == A 'mc_out' class object == #>  #> Number of Monte Carlo replications: 2000  #>  #>  #> ====================== Test(s) Conducted ====================== #>  #> - test_indirect: x->m->y #>  #> Call print() and set 'test_long = TRUE' for a detailed report."},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"compute-the-power","dir":"Articles","previous_headings":"Mediation","what":"Compute the Power","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"power estimate simply proportion significant results, rejection rate, null hypothesis false. rejection rate can retrieved get_rejection_rates(). output simply data frame: example , estimated power test indirect effect, conducted Monte Carlo confidence interval, 0.480.6","code":"out_power <- get_rejection_rates(out) out_power #>                     test label pvalid reject #> 1 test_indirect: x->m->y  Test      1   0.48"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"moderation","dir":"Articles","previous_headings":"","what":"Moderation","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Let’s consider moderation model, control variables.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"pop_es_xw","dir":"Articles","previous_headings":"Moderation","what":"Specify the Population Model and Values","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"model moderation, predictor x moderator w. product term included lavaan style, x:w. unrealistic specific population values control variables. Therefore, can just add proxy, control represent set control variables may included. syntax population values: example introduce one useful tag, .beta. model many paths, inconvenient specify manually. tag .beta specify default value regression path, small (.10) example. path explicitly included (y ~ control y ~ x:w), values override .beta.. example also illustrates can set population values correlation (covariance standardized solution). Control variables included usually may correlate predictors. Therefore, example, hypothesized small correlation x control variable (x ~~ control: s). Last, recall section convention product term values different: s denotes .05 product terms.","code":"mod <- \" y ~ x + w + x:w + control \" mod_es <- \" .beta.: s x ~~ control: s y ~ control: m y ~ x:w: m \""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-check-the-model-1","dir":"Articles","previous_headings":"Moderation","what":"Call power4test() to Check the Model","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"check model first: population values regression paths specified, estimates based 5 × 104 2 100000 support dataset generated correctly.","code":"out <- power4test(nrep = 2,                   model = mod,                   pop_es = mod_es,                   n = 50000,                   iseed = 1234) print(out,       data_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> y ~ x + w + x:w + control #>  #> == Model on Variables/Indicators == #>  #> y ~ x + w + x:w + control #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   y ~                         #>     x                 0.100   #>     w                 0.100   #>     x:w               0.100   #>     control           0.300   #>  #> Covariances: #>                    Population #>   x ~~                        #>     w                 0.000   #>     x:w               0.000   #>     control           0.100   #>   w ~~                        #>     x:w               0.000   #>     control           0.000   #>   x:w ~~                      #>     control           0.000   #>  #> Variances: #>                    Population #>    .y                 0.874   #>     x                 1.000   #>     w                 1.000   #>     x:w               1.000   #>     control           1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  50000  #>  #> ==== Descriptive Statistics ==== #>  #>         vars     n mean sd  skew kurtosis se #> y          1 1e+05 0.00  1  0.02     0.00  0 #> x          2 1e+05 0.00  1  0.01     0.01  0 #> w          3 1e+05 0.00  1  0.00    -0.02  0 #> x:w        4 1e+05 0.00  1 -0.03     6.01  0 #> control    5 1e+05 0.01  1  0.00     0.00  0 #>  #> ===== Parameter Estimates Based on All 2 Samples Combined ===== #>  #> Total Sample Size: 100000  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   y ~                       #>     x                 0.098 #>     w                 0.104 #>     x:w               0.102 #>     control           0.299 #>  #> Covariances: #>                     est.std #>   x ~~                      #>     w                -0.003 #>     x:w               0.002 #>     control           0.101 #>   w ~~                      #>     x:w              -0.004 #>     control           0.001 #>   x:w ~~                    #>     control           0.004 #>  #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                         50000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-test-the-moderation-effect","dir":"Articles","previous_headings":"Moderation","what":"Call power4test() to Test The Moderation Effect","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"can now simulation estimate power. simple model, test just test product term, x:w. model can fitted linear regression using lm(). Let’s estimate power sample size 50 model fitted lm(): new arguments used: fit_model_args: named list arguments fit_model(). default, lavaan::sem() used. fit model linear regression using lm(), add fit_function = \"lm\" list.7 test_fun: set test_moderation example. function automatically identify product terms model test . test used depends method used fit model. lm() used, usual t test used.8","code":"out <- power4test(nrep = 500,                   model = mod,                   pop_es = mod_es,                   n = 50,                   fit_model_args = list(fit_function = \"lm\"),                   test_fun = test_moderation,                   iseed = 1234,                   parallel = TRUE)"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"compute-the-power-1","dir":"Articles","previous_headings":"Moderation","what":"Compute the Power","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"can ues get_rejection_rates() estimate power: estimated power test product term, x:w, 0.110. function power4test() also supports redoing analysis using new value sample size. Simply set output power4test first argument, set new value n: estimated power sample size 200. estimated power 0.294 sample size 200. process can repeated find required sample size target power. (function power4test_by_n() can used estimate power sequence sample sizes.)","code":"out_power <- get_rejection_rates(out) out_power #>                    test label pvalid reject #> 1 test_moderation: CIs  y~x:w      1   0.11 out_new_n <- power4test(out,                         n = 200) out_new_n out_new_n_reject <- get_rejection_rates(out_new_n) out_new_n_reject #>                    test label pvalid reject #> 1 test_moderation: CIs  y~x:w      1  0.294"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"moderated-mediation","dir":"Articles","previous_headings":"","what":"Moderated-Mediation","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Let’s consider moderated mediation model.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"specify-the-population-model-and-values","dir":"Articles","previous_headings":"Moderated-Mediation","what":"Specify the Population Model and Values","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"model mediation model -path, m ~ x, moderated w. explained , need use label define parameters. handled test function used. syntax population values: Please refer previous section setting syntax.","code":"mod <- \" m ~ x + w + x:w y ~ m + x \" mod_es <- \" .beta.: s m ~ x: m y ~ m: m m ~ x:w: s \""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-check-the-model-2","dir":"Articles","previous_headings":"Moderated-Mediation","what":"Call power4test() to Check the Model","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"check model first: population values estimates based 5 × 104 2 100000 expect.","code":"out <- power4test(nrep = 2,                   model = mod,                   pop_es = mod_es,                   n = 50000,                   iseed = 1234) print(out,       data_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x + w + x:w #> y ~ m + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x + w + x:w #> y ~ m + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.300   #>     w                 0.100   #>     x:w               0.050   #>   y ~                         #>     m                 0.300   #>     x                 0.100   #>  #> Covariances: #>                    Population #>   x ~~                        #>     w                 0.000   #>     x:w               0.000   #>   w ~~                        #>     x:w               0.000   #>  #> Variances: #>                    Population #>    .m                 0.898   #>    .y                 0.882   #>     x                 1.000   #>     w                 1.000   #>     x:w               1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  50000  #>  #> ==== Descriptive Statistics ==== #>  #>     vars     n mean sd skew kurtosis se #> m      1 1e+05    0  1 0.03     0.03  0 #> y      2 1e+05    0  1 0.01    -0.01  0 #> x      3 1e+05    0  1 0.00    -0.02  0 #> w      4 1e+05    0  1 0.00     0.01  0 #> x:w    5 1e+05    0  1 0.04     5.92  0 #>  #> ===== Parameter Estimates Based on All 2 Samples Combined ===== #>  #> Total Sample Size: 100000  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   m ~                       #>     x                 0.303 #>     w                 0.099 #>     x:w               0.052 #>   y ~                       #>     m                 0.299 #>     x                 0.098 #>  #> Covariances: #>                     est.std #>   x ~~                      #>     w                 0.003 #>     x:w              -0.001 #>   w ~~                      #>     x:w               0.008 #>  #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 2 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         7 #>  #>   Number of observations                         50000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.007 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.997"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-test-the-moderated-mediation-effect","dir":"Articles","previous_headings":"Moderated-Mediation","what":"Call power4test() to Test The Moderated-Mediation Effect","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"estimate power moderated-mediation effect, can test index moderated-mediation [hayes_index_2015]. example, product coefficient m ~ x:w coefficient y ~ m. can done test function test_index_of_mome(). , Monte Carlo confidence interval used. Let’s estimate power sample size 100. call similar one used testing mediation. new arguments used: test_fun: set test_index_of_mome() example. function similar test_indirect_effect(), one argument, w, moderator. Although example one mediator, support number mediators along path.9","code":"out <- power4test(nrep = 500,                   model = mod,                   pop_es = mod_es,                   n = 100,                   R = 2000,                   ci_type = \"mc\",                   test_fun = test_index_of_mome,                   test_args = list(x = \"x\",                                    m = \"m\",                                    y = \"y\",                                    w = \"w\",                                    mc_ci = TRUE),                   iseed = 1234,                   parallel = TRUE)"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"compute-the-power-2","dir":"Articles","previous_headings":"Moderated-Mediation","what":"Compute the Power","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"can ues get_rejection_rates() estimate power: estimated power test moderated mediation effect, conducted test index moderated mediation, 0.068. shown , can rerun analysis using larger sample size: estimated power sample size 500. estimated power 0.224 sample size 500. process can repeated find required sample size target power. Unlike previous example moderation tested regression, estimating power Monte Carlo confidence intervals substantially slower. However, believe necessary Monte Carlo nonparametric bootstrapping confidence interval test usually used moderated-mediation (mediation).","code":"out_power <- get_rejection_rates(out) out_power #>                                          test label pvalid reject #> 1 test_index_of_mome: x->m->y, moderated by w  Test      1  0.068 out_new_n <- power4test(out,                         n = 500) out_new_n_reject <- get_rejection_rates(out_new_n) out_new_n_reject #>                                          test label pvalid reject #> 1 test_index_of_mome: x->m->y, moderated by w  Test      1  0.224"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"advanced-features","dir":"Articles","previous_headings":"","what":"Advanced Features","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"brief illustration cover basic features power4mome. advanced features covered articles: inherent restriction form model. Typical models can specified lavaan model syntax can population model, although may special models power4test support. population model can model latent factors indicators. Nevertheless, users can specify relation among factors. need include indicators model syntax, also need manually specify factor loadings. number indicators factor factor loadings set argument number_of_indicators reliability (see help page sim_data() set ). model syntax used fit data automatically include indicators. Though illustrated , estimating power tests conducted nonparametric bootstrapping supported, although take time run. Although package focuses moderation, mediation, moderated-mediation, principle, power test can estimated, long test function test_fun available. functions provided power4mome (e.g., test_parameters() testing free model parameters). See help page do_test() write function test available power4mome. estimating power, usually population model fitted data. However, possible fit model generated data. can done using argument fit_model_args set argument model fit_model(). Preliminary support multigroup model available. See help pages ptable_pop() pop_es_yaml() specify population value syntax. Functions added tests relevant multigroup models (e.g., testing -group difference indirect effect). Although illustrated rerunning analysis new sample size (n), also possible rerun analysis using new population value parameter. can done using previous output power4test() first argument, setting pop_es named vector: Instead manually rerunning analyais, possible rerun analysis sequence sample sizes population values. See help pages power4test_by_n() power4test_by_pop_es() details. Basic support generating nonnormal variables, including dichotomous variables. See argument x_fun power4test() details.","code":"out_new_xw <- power4test(out,                          pop_es = c(\"m ~ x:w\" = \".30\"))"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Monte Carlo confidence interval supported models fitted lm() (regression). estimate power testing mediation moderated-mediation effects, ci_type = \"boot\" needed.","code":""},{"path":[]},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer. Sing-Hang Cheung. Author.","code":""},{"path":"https://sfcheung.github.io/power4mome/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung S, Cheung S (2025). power4mome: Power Analysis Moderation Mediation. R package version 0.0.1, https://sfcheung.github.io/power4mome/.","code":"@Manual{,   title = {power4mome: Power Analysis for Moderation and Mediation},   author = {Shu Fai Cheung and Sing-Hang Cheung},   year = {2025},   note = {R package version 0.0.1},   url = {https://sfcheung.github.io/power4mome/}, }"},{"path":"https://sfcheung.github.io/power4mome/index.html","id":"power4mome","dir":"","previous_headings":"","what":"Power Analysis for Moderation and Mediation","title":"Power Analysis for Moderation and Mediation","text":"Power analysis sample size determination moderation, mediation, moderated mediation package includes functions power analysis sample size determination moderation, mediation, moderated mediation models fitted structural equation modeling. information package, please visit GitHub page: https://sfcheung.github.io/power4mome/","code":""},{"path":"https://sfcheung.github.io/power4mome/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power Analysis for Moderation and Mediation","text":"Stable release versions package can downloaded : https://github.com/sfcheung/power4mome/releases latest developmental version package can installed remotes::install_github:","code":"remotes::install_github(\"sfcheung/power4mome\")"},{"path":"https://sfcheung.github.io/power4mome/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Power Analysis for Moderation and Mediation","text":"suggestions found bugs, please feel feel open GitHub issue. Thanks.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Do a Test on Each Replication — do_test","title":"Do a Test on Each Replication — do_test","text":"test replication output sim_out().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do a Test on Each Replication — do_test","text":"","code":"do_test(   sim_all,   test_fun,   test_args = list(),   map_names = c(fit = \"fit\"),   results_fun = NULL,   results_args = list(),   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1) )"},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do a Test on Each Replication — do_test","text":"sim_all output sim_out(). test_fun function test. See 'Details' requirement function. test_args list arguments passed test_fun function. Default list(). map_names named character vector specifying content element extra replication sim_all map argument test_fun. Default c(fit = \"fit\"), indicating element fit element extra set argument fit test_fun. , first replication, fit = sim_out[[1]]$extra$fit calling test_fun. results_fun function used extract test results. See Details requirements function. Default NULL, assuming output test_fun can used directly. results_args list arguments passed results_fun function. Default list(). parallel TRUE, parallel processing used tests. Default FALSE. progress TRUE, progress tests displayed. Default `FALSE. ncores number CPU cores use parallel processing used.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do a Test on Each Replication — do_test","text":"object class test_out, list length equal sim_out. element list two elements: test: output test_fun. test_results: output results_fun.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Do a Test on Each Replication — do_test","text":"arbitrary test replication using function set test_fun. function work output lavaan::sem(). test results extracted output test_fun function set results_fun. test_fun already returns output expected format (see ), set results_fun NULL, default. output test_fun used estimating power. function set results_fun must accept output test_fun, first argument, return named list (can data frame) named vector following elements: est: Optional. estimate parameter. se: Optional. standard error estimate. cilo: Optional. lower limit confidence interval. cihi: Optional. upper limit confidence interval. sig: Required. 1, test significant. 0, test significant. test done reason, NA. results can used estimate power test. package came ready--use test functions examples: test_indirect_effect() test_moderation() test_index_of_mome() test_parameters() function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do a Test on Each Replication — do_test","text":"","code":"mod <- \" m ~ x y ~ m + x \" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 5,                      model = mod,                      pop_es = es,                      n = 100,                      iseed = 1234) fit_all <- fit_model(data_all) mc_all <- gen_mc(fit_all,                  R = 50,                  iseed = 4567) sim_all <- sim_out(data_all = data_all,                    fit = fit_all,                    mc_out = mc_all)  test_all <- do_test(sim_all,                     test_fun = test_indirect_effect,                     test_args = list(x = \"x\",                                      m = \"m\",                                      y = \"y\",                                      mc_ci = TRUE),                     parallel = FALSE,                     progress = FALSE)  lapply(test_all, function(x) x$test_results) #> [[1]] #>        est       cilo       cihi        sig  #> 0.10147276 0.01628514 0.21954359 1.00000000  #>  #> [[2]] #>         est        cilo        cihi         sig  #> 0.079776696 0.008957211 0.197845443 1.000000000  #>  #> [[3]] #>          est         cilo         cihi          sig  #>  0.052746533 -0.001863895  0.125492170  0.000000000  #>  #> [[4]] #>         est        cilo        cihi         sig  #> 0.104610420 0.009422887 0.216072727 1.000000000  #>  #> [[5]] #>        est       cilo       cihi        sig  #> 0.11690231 0.01800638 0.22706881 1.00000000  #>"},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Model to a List of Datasets — fit_model","title":"Fit a Model to a List of Datasets — fit_model","text":"Get output sim_data() fit model stored datasets.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Model to a List of Datasets — fit_model","text":"","code":"fit_model(   data_all = NULL,   model = NULL,   fit_function = \"lavaan\",   arg_data_name = \"data\",   arg_model_name = \"model\",   arg_group_name = \"group\",   ...,   fit_out = NULL,   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1) )"},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Model to a List of Datasets — fit_model","text":"data_all output sim_data(), sim_data class object. model model fitted. NULL, default, model stored data_all, data generation model, used. fit_function function used fit model. Can also string: \"lavaan\" (default) lavaan::sem(), \"lm\" many_lm lmhelprs::many_lm(). functions can also used necessary. arg_data_name name argument fit_function expecting dataset. Default \"data\". arg_model_name name argument fit_function expecting model definition. Default \"model\". arg_group_name name argument fit_function expecting name group variable. Used multigroup models. Default \"group\". ... Optional arguments passed fit_function fitting model. fit_out set fit_out object (output fit_model()), missing arguments retrieved fit_out. , users can use fit_model(data_all = new_data, fit_out = old_out) re-fit model originally fitted old_out new list dataset (new_data). need include arguments. parallel TRUE, parallel processing used fit models. Default FALSE. progress TRUE, progress model fitting displayed. Default `FALSE. ncores number CPU cores use parallel processing used.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Model to a List of Datasets — fit_model","text":"object class fit_out, list output fit_function (lavaan::sem() default). error occurred fitting model dataset, element error message fit function.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a Model to a List of Datasets — fit_model","text":"default, extracts model stored output sim_data(), fits model dataset simulated using fit_function, default \"lavaan\" lavaan::sem() called, returns results. datasets generated multigroup model calling sim_data(), multigroup model fitted. function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Model to a List of Datasets — fit_model","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 5,                  model = mod,                  pop_es = es,                  n = 100,                  iseed = 1234)  fit_all <- fit_model(data_all) fit_all[[1]] #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0"},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bootstrap Estimates — gen_boot","title":"Generate Bootstrap Estimates — gen_boot","text":"Get list output lavaan::sem() lmhelprs::many_lm() generate bootstrap estimates model parameters.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bootstrap Estimates — gen_boot","text":"","code":"gen_boot(   fit_all,   R = 100,   ...,   iseed = NULL,   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1),   compute_implied_stats = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bootstrap Estimates — gen_boot","text":"fit_all output fit_model() object class fit_out. R number replications generate bootstrap estimates fit output. ... Optional arguments passed manymome::do_boot() generating bootstrap estimates. iseed seed random number generator. Default NULL seed changed. parallel TRUE, parallel processing used generate bootstrap estimates fit outputs. Default FALSE. progress TRUE, progress displayed. Default `FALSE. ncores number CPU cores use parallel processing used. compute_implied_stats Whether implied statistics computed bootstrap samples. Usually needed default FALSE Required manymome 0.2.7.1 .","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bootstrap Estimates — gen_boot","text":"boot_list object, list output manymome::do_boot().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Bootstrap Estimates — gen_boot","text":"simply calls manymome::do_boot() output lavaan::sem() lmhelprs::many_lm() fit_all. simulated estimates can used test effects indirect effects, usually functions manymome package, manymome::indirect_effect(). function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Bootstrap Estimates — gen_boot","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 2,                      model = mod,                      pop_es = es,                      n = 50,                      iseed = 1234)  fit_all <- fit_model(data_all) boot_all <- gen_boot(fit_all,                      R = 10,                      iseed = 4567) boot_all #> [[1]] #> <simpleError in manymome::do_boot(fit = fit_i, R = R, ..., compute_implied_stats = compute_implied_stats,     parallel = FALSE, progress = FALSE): unused argument (compute_implied_stats = compute_implied_stats)> #>  #> [[2]] #> <simpleError in manymome::do_boot(fit = fit_i, R = R, ..., compute_implied_stats = compute_implied_stats,     parallel = FALSE, progress = FALSE): unused argument (compute_implied_stats = compute_implied_stats)> #>  #> attr(,\"class\") #> [1] \"boot_list\" \"list\""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Monte Carlo Estimates — gen_mc","title":"Generate Monte Carlo Estimates — gen_mc","text":"Get list output lavaan::sem() generate Monte Carlo estimates model parameters.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Monte Carlo Estimates — gen_mc","text":"","code":"gen_mc(   fit_all,   R = 100,   ...,   iseed = NULL,   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1),   compute_implied_stats = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Monte Carlo Estimates — gen_mc","text":"fit_all output fit_model() object class fit_out. R number replications generate Monte Carlo estimates fit output. ... Optional arguments passed manymome::do_mc() generating Monte Carlo estimates. iseed seed random number generator. Default NULL seed changed. parallel TRUE, parallel processing used generate Monte Carlo estimates fit outputs. Default FALSE. progress TRUE, progress displayed. Default `FALSE. ncores number CPU cores use parallel processing used. compute_implied_stats Whether implied statistics computed Monte Carlo replication. Usually needed default FALSE Required manymome 0.2.7.1 .","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Monte Carlo Estimates — gen_mc","text":"mc_list object, list output manymome::do_mc().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Monte Carlo Estimates — gen_mc","text":"simply calls manymome::do_mc() output lavaan::sem() fit_all. simulated estimates can used test effects indirect effects, usually functions manymome package, manymome::indirect_effect(). function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Monte Carlo Estimates — gen_mc","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 5,                      model = mod,                      pop_es = es,                      n = 100,                      iseed = 1234)  fit_all <- fit_model(data_all) mc_all <- gen_mc(fit_all,                  R = 100,                  iseed = 4567)"},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejection Rates of All Tests — get_rejection_rates","title":"Rejection Rates of All Tests — get_rejection_rates","text":"Get rejection rates tests stored power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejection Rates of All Tests — get_rejection_rates","text":"","code":"get_rejection_rates(object)"},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejection Rates of All Tests — get_rejection_rates","text":"object power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejection Rates of All Tests — get_rejection_rates","text":"data frame number rows equal number tests. Note tests, test test_parameters(), conduct one test parameters. test counted one test. data frame columns: test: name test. label: label test, \"Test\" test test (e.g., test_indirect_effect()). pvalid: proportion valid tests across replications. reject: rejection rate test. null hypothesis false, power.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rejection Rates of All Tests — get_rejection_rates","text":"loops tests stored power4test object retrieve rejection rate test.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rejection Rates of All Tests — get_rejection_rates","text":"","code":"model_simple_med <- \" m ~ x y ~ m + x \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 4,                        model = model_simple_med,                        pop_es = model_simple_med_es,                        n = 100,                        R = 50,                        ci_type = \"boot\",                        fit_model_args = list(fit_function = \"lm\"),                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate bootstrap estimates:  test_out <- power4test(object = sim_only,                        test_fun = test_indirect_effect,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         boot_ci = TRUE,                                         mc_ci = FALSE)) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_indirect: x->m->y  #> Error in cond_indirect(x = x, y = y, m = m, fit = fit, est = est, implied_stats = implied_stats,     standardized_x = standardized_x, standardized_y = standardized_y,     boot_ci = boot_ci, level = level, boot_out = boot_out, R = R,     seed = seed, parallel = parallel, ncores = ncores, make_cluster_args = make_cluster_args,     progress = progress, save_boot_full = save_boot_full, save_boot_out = save_boot_out,     mc_ci = mc_ci, mc_out = mc_out, save_mc_full = save_mc_full,     save_mc_out = save_mc_out, ci_out = ci_out, save_ci_full = save_ci_full,     save_ci_out = save_ci_out, ci_type = ci_type, boot_type = boot_type,     group = group): The object at 'boot_out' must be of the class 'boot_out'. test_out <- power4test(object = test_out,                        test_fun = test_parameters) #> Error: object 'test_out' not found get_rejection_rates(test_out) #> Error: object 'test_out' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse YAML-Stye 'pop_es' — pop_es_yaml","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"Convert YAML string vector list pop_es specification.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"","code":"pop_es_yaml(text)"},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"text string parsed specification population values.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"Either named vector (single-group model) list named vector (multigroup model).","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"allows users specify population values model using one single string, 'lavaan' model syntax.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"single-group-model","dir":"Reference","previous_headings":"","what":"Single-Group Model","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"example string single-group model: string must follow format: line start tag:. tag can name parameter, lavaan model syntax format. example, m ~ x denotes path x m. tag lavaan model syntax can specify one parameter using +. example, y ~ m + x denotes two paths m x y. Alternatively, tag can either .beta. .cov.. Use .beta. set default values regression coefficients. Use .cov. set default values correlations exogenous variables (e.g., predictors). tag value population value: nil nil (zero), s small, m medium, l large. (Note: n used mode.) value label determined es1 es2 described ptable_pop(). value can also set numeric value, .30 -.30. another example: example, regression coefficients small, path m y large.","code":"y ~ m: l m ~ x: m y ~ x: nil .beta: s y ~ m: l"},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"multigroup-model","dir":"Reference","previous_headings":"","what":"Multigroup Model","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"example string multigroup model: format similar single-group model. parameter value groups, line can specified case single-group model: tag: value. parameter different values across groups, must format: line starts tag, followed two lines. line starts hyphen - adn value group. example: denotes model two group. values path x m 0 (nil) small (s), respectively. Another equivalent way specify values using [], line tag. example: number groups inferred number values parameter. Therefore, tag one value, tag must number value, one value. tag .beta. .cov. can also used multigroup models.","code":"y ~ m: l m ~ x:   - nil   - s y ~ x: nil m ~ x:   - nil   - s m ~ x: [nil, s]"},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"which-approach-to-use","dir":"Reference","previous_headings":"","what":"Which Approach To Use","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"Note using named vectors named lists reliable. However, using one single string user-friendly. method failed, please ues named vectors named list instead.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical Details","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"string parsed yaml::read_yaml(). Therefore, format requirement actually YAML. Users knowledgeable YAML can use equivalent way specify string.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"","code":"mod_es <- c(\"y ~ m\" = \"l\",             \"m ~ x\" = \"m\",             \"y ~ x\" = \"nil\")  mod_es_yaml <- \" y ~ m: l m ~ x: m y ~ x: nil \"  pop_es_yaml(mod_es_yaml) #> y ~ m m ~ x y ~ x  #>   \"l\"   \"m\" \"nil\""},{"path":"https://sfcheung.github.io/power4mome/reference/power4mome-package.html","id":null,"dir":"Reference","previous_headings":"","what":"power4mome: Power Analysis for Moderation and Mediation — power4mome-package","title":"power4mome: Power Analysis for Moderation and Mediation — power4mome-package","text":"Power analysis sample size determination moderation, mediation, moderated mediation models fitted structural equation modeling.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/power4mome-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"power4mome: Power Analysis for Moderation and Mediation — power4mome-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) Authors: Sing-Hang Cheung (ORCID)","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Power of a Test — power4test","title":"Estimate the Power of a Test — power4test","text":"--one function receives model specification, generates datasets, fits model, target test, returns test results.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Power of a Test — power4test","text":"","code":"power4test(   object = NULL,   nrep = NULL,   ptable = NULL,   model = NULL,   pop_es = NULL,   n = NULL,   number_of_indicators = NULL,   reliability = NULL,   x_fun = list(),   fit_model_args = list(),   R = NULL,   ci_type = \"mc\",   gen_mc_args = list(),   gen_boot_args = list(),   test_fun = NULL,   test_args = list(),   map_names = c(fit = \"fit\"),   results_fun = NULL,   results_args = list(),   test_name = NULL,   test_note = NULL,   do_the_test = TRUE,   sim_all = NULL,   iseed = NULL,   parallel = FALSE,   progress = TRUE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1) )  # S3 method for class 'power4test' print(   x,   what = c(\"data\", \"test\"),   digits = 3,   digits_descriptive = 2,   data_long = FALSE,   test_long = FALSE,   fit_to_all_args = list(),   ... )"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Power of a Test — power4test","text":"object Optional. set power4test object, updated using value(s) n, pop_es, /nrep. Default NULL. nrep number replications generate simulated datasets. Default NULL. Must set called create power4test object. ptable output ptable_pop(), ptable_pop object, representing population model. NULL, default, ptable_pop() called generate ptable_pop object using model pop_es. model lavaan model syntax population model. Required. Ignored ptable specified. See 'Details' ptable_pop() use models latent factors indicators. Ignored ptable specified. pop_es character vector specify population effect sizes. See 'Details' ptable_pop() set effect sizes argument. Ignored ptable specified. n sample size dataset. Default 100. number_of_indicators named vector specify number indicators factors. See 'Details' ptable_pop() set argument. Default NULL variables model syntax observed variables. reliability named vector set reliability coefficient set indicators. Default NULL. See 'Details' ptable_pop() set argument. x_fun function(s) used generate exogenous variables. supplied, set list(), default, variables generated multivariate normal distribution. See 'Details' sim_data() use argument. fit_model_args list arguments passed fit_model() fitting model. named argument names names arguments. R number replications generate Monte Carlo bootstrapping estimates fit output. Monte Carlo bootstrapping estimates generated R set NULL. ci_type type simulation-based confidence intervals use. Can either \"mc\" Monte Carlo method (default) \"boot\" nonparametric bootstrapping method. See sim_data() details. gen_mc_args list arguments passed manymome::do_mc() generating Monte Carlo estimates. named argument names names arguments. Used ci_type \"mc\". gen_boot_args list arguments passed manymome::do_boot() generating bootstrap estimates. named argument names names arguments. Used ci_type `\"boot\". test_fun function test. See help page do_test() requirements function. test_args list arguments passed test_fun function. Default list(). map_names named character vector specifying content element extra replication sim_all map argument test_fun. Default c(fit = \"fit\"), indicating element fit element extra set argument fit test_fun. , first replication, fit = sim_out[[1]]$extra$fit calling test_fun. results_fun function used extract test results. See Details do_test() requirements function. Default NULL, assuming output test_fun can used directly. results_args list arguments passed results_fun function. Default list(). test_name String. name test. Default NULL, name created test_fun. Note sim_out power4test object already test name stored, replaced new results. test_note String. optional note test, stored attribute test_note output do_test(). Default NULL. do_the_test TRUE, do_test() called specified test fit output dataset. sim_all set either sim_out object (output sim_out() power4test object (output power4test()), stored datasets fit outputs used test. iseed seed random number generator. Default NULL seed changed. seed set , calling sim_data(). parallel TRUE, parallel processing used calling functions, appropriate. Default FALSE. progress TRUE, progress step displayed. Default `FALSE. ncores number CPU cores use parallel processing used. x object printed. string vector print, \"data\" simulated data \"test\" stored test(s). Default c(\"data\", \"test\"). digits numbers digits displayed decimal. digits_descriptive number digits displayed decimal descriptive statistics table. data_long TRUE, detailed results printed printing simulated data. test_long TRUE, detailed results printed printing test(s). fit_to_all_args named list arguments passed lavaan::sem() model fitted sample combined ... Optional arguments passed print methods.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Power of a Test — power4test","text":"object class power4test, list two elements: sim_all: output sim_out(). test_all: named list output do_test(). names values test_name. list can one test call power4test() can add new tests power4test object. print method power4test returns x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the Power of a Test — power4test","text":"--one function estimating power test model, given sample size effect sizes. workflow: object model data already generated supplied sim_all, output sim_out() power4test() do_the_test set FALSE, following steps skipped go directly test. Call sim_data() determine population model generate datasets. Call fit_model() fit model datasets. R NULL ci_type = \"mc\", call gen_mc() generate Monte Carlo estimates using manymome::do_mc(). R NULL ci_type = \"boot\", call gen_boot() generate bootstrap estimates using manymome::do_boot(). Merge results sim_out object calling sim_out(). do_the_test FALSE, skip remaining steps return power4test object, contains data generated optionally Monte Carlo bootstrap estimates. do_the_test TRUE, test. do_test() called test fit output datasets. Return power4test object include output sim_out , do_the_test TRUE, output do_test(). function used users interested power one several tests particular aspect model, parameter, given specific effect sizes sample sizes.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"updating-a-condition","dir":"Reference","previous_headings":"","what":"Updating a Condition","title":"Estimate the Power of a Test — power4test","text":"function can also used update condition selected aspects changed. example, without calling function arguments set just change sample size, can called supplying existing power4test object set n new sample size. data tests updated automatically.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"multiple-models","dir":"Reference","previous_headings":"","what":"Multiple Models","title":"Estimate the Power of a Test — power4test","text":"one model can fitted replication. done setting fit_model_args named list. names names used identify models, element list named list arguments model. example: Three models fitted. first model model ued generate data, named \"fit\". second first models named \"fit2\" \"fit3\", respectively, \"fit2\" fitted model = mod2 \"fit3\" fitted model = mod3. Monte Carlos bootstrap estimates generated, generated model, using values arguments.","code":"fit_model_args = list(fit = list(),                       fit2 = list(model = mod2),                       fit3 = list(model = mod3))"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Power of a Test — power4test","text":"","code":"model_simple_med <- \" m ~ a * x y ~ b * m + x ab := a * b \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  out <- power4test(nrep = 50,                   model = model_simple_med,                   pop_es = model_simple_med_es,                   n = 100,                   test_fun = test_parameters,                   test_args = list(pars = \"a\"),                   iseed = 1234,                   parallel = FALSE,                   progress = TRUE) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Do the test: test_parameters: CIs (pars: a)   print(out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a * x #> y ~ b * m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a * x #> y ~ b * m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  50  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> =========== <test_parameters: CIs (pars: a)> =========== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label   est    se     z pvalue  cilo  cihi   sig #> 1          a   m  ~   x     a 0.307 0.095 3.247  0.040 0.121 0.494 0.860 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 50  #> - Proportion of valid replications for rejection rate(s): 1.000   # Add one more test  out <- power4test(out,                   test_fun = test_parameters,                   test_args = list(op = \":=\")) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs (op: :=)  print(out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a * x #> y ~ b * m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a * x #> y ~ b * m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  50  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> =========== <test_parameters: CIs (pars: a)> =========== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label   est    se     z pvalue  cilo  cihi   sig #> 1          a   m  ~   x     a 0.307 0.095 3.247  0.040 0.121 0.494 0.860 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 50  #> - Proportion of valid replications for rejection rate(s): 1.000  #>  #> =========== <test_parameters: CIs (op: :=)> =========== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label   est    se     z pvalue  cilo  cihi   sig #> 1         ab  ab := a*b    ab 0.147 0.054 2.635  0.046 0.040 0.254 0.820 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 50  #> - Proportion of valid replications for rejection rate(s): 1.000"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Power By Sample Sizes — power4test_by_n","title":"Power By Sample Sizes — power4test_by_n","text":"Estimate power range sample sizes. function get_rejection_rates_by_n() used extract rejection rates form get_rejection_rates_by_n object, sample sizes added output.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power By Sample Sizes — power4test_by_n","text":"","code":"power4test_by_n(object, n = NULL, progress = TRUE, ...)  get_rejection_rates_by_n(object_by_n)"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power By Sample Sizes — power4test_by_n","text":"object power4test object. n numeric vector sample sizes simulation conducted. progress Logical. Whether progress simulation displayed. ... Arguments passed power4test(). object_by_n power4test_by_n object, output power4test_by_n().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power By Sample Sizes — power4test_by_n","text":"function power4test_by_n() returns power4test_by_n object, list power4test objects, one sample size. function get_rejection_rates_by_n() returns data frame similar output get_rejection_rates(), column n added sample size test.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power By Sample Sizes — power4test_by_n","text":"function regenerates datasets set sample sizes stored tests . Optionally, can also run object stored tests. case, additional arguments must set instruct power4test() tests conducted. usually used examine power range sample sizes.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power By Sample Sizes — power4test_by_n","text":"","code":"model_simple_med <- \" m ~ x y ~ m + x \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 2,                        model = model_simple_med,                        pop_es = model_simple_med_es,                        n = 100,                        R = 40,                        ci_type = \"boot\",                        fit_model_args = list(fit_function = \"lm\"),                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate bootstrap estimates:  test_out <- power4test(object = sim_only,                        test_fun = test_indirect_effect,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         boot_ci = TRUE,                                         mc_ci = FALSE)) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_indirect: x->m->y  #> Error in cond_indirect(x = x, y = y, m = m, fit = fit, est = est, implied_stats = implied_stats,     standardized_x = standardized_x, standardized_y = standardized_y,     boot_ci = boot_ci, level = level, boot_out = boot_out, R = R,     seed = seed, parallel = parallel, ncores = ncores, make_cluster_args = make_cluster_args,     progress = progress, save_boot_full = save_boot_full, save_boot_out = save_boot_out,     mc_ci = mc_ci, mc_out = mc_out, save_mc_full = save_mc_full,     save_mc_out = save_mc_out, ci_out = ci_out, save_ci_full = save_ci_full,     save_ci_out = save_ci_out, ci_type = ci_type, boot_type = boot_type,     group = group): The object at 'boot_out' must be of the class 'boot_out'.  out <- power4test_by_n(test_out,                        n = c(100, 110, 120)) #> Error: object 'test_out' not found out_reject <- get_rejection_rates_by_n(out) #> Error: object 'out' not found out_reject #> Error: object 'out_reject' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":null,"dir":"Reference","previous_headings":"","what":"Power By Effect Sizes — power4test_by_pop_es","title":"Power By Effect Sizes — power4test_by_pop_es","text":"Estimate power range effect sizes. function get_rejection_rates_by_pop_es() used extract rejection rates form get_rejection_rates_by_pop_es object, effect sizes added output.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power By Effect Sizes — power4test_by_pop_es","text":"","code":"power4test_by_pop_es(   object,   pop_es_name = NULL,   pop_es_values = NULL,   progress = TRUE,   ... )  get_rejection_rates_by_pop_es(object_by_es)"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power By Effect Sizes — power4test_by_pop_es","text":"object power4test object. pop_es_name name parameter. See help page ptable_pop() names argument pop_es. pop_es_values numeric vector population values parameter specified pop_es_names. progress Logical. Whether progress simulation displayed. ... Arguments passed power4test(). object_by_es power4test_by_pop_es object, output power4test_by_pop_es().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power By Effect Sizes — power4test_by_pop_es","text":"function power4test_by_pop_es() returns power4test_by_pop_es object, list power4test objects, one effect size. function get_rejection_rates_by_pop_es() returns data frame similar output get_rejection_rates(), column added effect size (pop_es_name pop_es_values) test.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power By Effect Sizes — power4test_by_pop_es","text":"function regenerates datasets set effect sizes stored tests . Optionally, can also run object stored tests. case, additional arguments must set instruct power4test() tests conducted. usually used examine power range effect sizes.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power By Effect Sizes — power4test_by_pop_es","text":"","code":"model_simple_med <- \" m ~ x y ~ m + x \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 2,                        model = model_simple_med,                        pop_es = model_simple_med_es,                        n = 100,                        R = 40,                        ci_type = \"boot\",                        fit_model_args = list(fit_function = \"lm\"),                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate bootstrap estimates:  test_out <- power4test(object = sim_only,                        test_fun = test_indirect_effect,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         boot_ci = TRUE,                                         mc_ci = FALSE)) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_indirect: x->m->y  #> Error in cond_indirect(x = x, y = y, m = m, fit = fit, est = est, implied_stats = implied_stats,     standardized_x = standardized_x, standardized_y = standardized_y,     boot_ci = boot_ci, level = level, boot_out = boot_out, R = R,     seed = seed, parallel = parallel, ncores = ncores, make_cluster_args = make_cluster_args,     progress = progress, save_boot_full = save_boot_full, save_boot_out = save_boot_out,     mc_ci = mc_ci, mc_out = mc_out, save_mc_full = save_mc_full,     save_mc_out = save_mc_out, ci_out = ci_out, save_ci_full = save_ci_full,     save_ci_out = save_ci_out, ci_type = ci_type, boot_type = boot_type,     group = group): The object at 'boot_out' must be of the class 'boot_out'.  power_all_test_only_new_es <- power4test(object = test_out,                                          pop_es = c(\"y ~ m\" = \".10\")) #> Error: object 'test_out' not found  out <- power4test_by_pop_es(test_out,                             pop_es_name = \"y ~ m\",                             pop_es_values = c(.10, .20)) #> Error: object 'test_out' not found out_reject <- get_rejection_rates_by_pop_es(out) #> Error: object 'out' not found out_reject #> Error: object 'out_reject' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the Population Model — ptable_pop","title":"Generate the Population Model — ptable_pop","text":"Generate complete population model using model syntax user-specified effect sizes.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the Population Model — ptable_pop","text":"","code":"ptable_pop(   model = NULL,   pop_es = NULL,   es1 = c(n = 0, nil = 0, s = 0.1, m = 0.3, l = 0.5),   es2 = c(n = 0, nil = 0, s = 0.05, m = 0.1, l = 0.15),   standardized = TRUE,   n_std = 1e+05,   std_force_monte_carlo = FALSE )  model_matrices_pop(x, ..., drop_list_single_group = TRUE)"},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the Population Model — ptable_pop","text":"model String. model defined lavaan model syntax. pop_es can data frame columns: lhs, op, rhs, pop. first three columns correspond lavaan parameter table. column pop stores population values. column es stores original labels, reference. can also named character vector. See 'Details' specify vector. es1 named vector set values label effect size correlations regression paths. Default c(\"n\" = .00, \"nil\" = .00, \"s\" = .10, \"m\" = .30, \"l\" = .50). Used pop_es named vector. es2 named vector set values label effect size product term. Default c(\"n\" = .00, \"nil\" = .00, \"s\" = .05, \"m\" = .10, \"l\" = .15). Used pop_es named vector. standardized Logical. TRUE, default, variances error variances scaled ensure population variances endogenous variables close one, hence effect sizes standardized effect sizes variances continuos exogenous variables also equal one. n_std sample size used determine error variances simulation std_force_monte_carlo TRUE. Default 100000. std_force_monte_carlo Logical. FALSE, default, standardization done analytically model product terms, simulation model product terms. TRUE, simulation used whether model product terms . Always fall back standardization analytical standardization failed. x can 'lavaan' model syntax, passed ptable_pop(), parameter table column start set population values, output ptable_pop(). ... x model syntax, arguments passed ptable_pop(). drop_list_single_group TRUE number groups equal one, output list matrices one group . Default TRUE.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the Population Model — ptable_pop","text":"function ptable_pop() returns lavaan parameter table model, column start set population values. function model_matrices_pop() returns lavaan LISREL-style model matrices (like output lavaan::lavInspect() set \"free\"), matrix elements set population values. x model syntax, stored attributes model. model multigroup model k groups (k greater 1), returns list k lists lavaan LISREL-style model matrices unless drop_list_single_group TRUE.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate the Population Model — ptable_pop","text":"function ptable_pop() generates lavaan parameter table can used generate data based population values model parameters. function used --one function power4test(). Users usually call function directly. function model_matrices_pop() generates models matrices population values. advanced users.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"setting-pop-es-to-a-named-vector","dir":"Reference","previous_headings":"","what":"Setting pop_es to a named vector","title":"Generate the Population Model — ptable_pop","text":"pop_es specified named vector, must follow convention . names vectors lavaan names selected parameters. example, m ~ x denotes path x m. Alternatively, names can either \".beta.\" \".cov.\". Use \".beta.\" set default values regression coefficients. Use \".cov.\" set default values correlations exogenous variables (e.g., predictors). using lavaan names, can specify one parameter using +. example, y ~ m + x denotes two paths m x y. value element can label effect size: n nil, s small, m medium, l large. value label determined es1 es2. value pop_es can also set value, must quoted string, \"y ~ x\" = \".31\". vector es1 correlations regression coefficients, vector es2 standardized moderation effect, coefficients product term. example: example, regression coefficients set small (s) default, unless specified otherwise. path x m1 set medium negative (-m). path m1 m2 set large (l). coefficient product term x:w predicting y set small (s).","code":"c(\".beta.\" = \"s\",   \"m1 ~ x\" = \"-m\",   \"m2 ~ m1\" = \"l\",   \"y ~ x:w\" = \"s\")"},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"using-one-single-string-to-set-pop-es","dir":"Reference","previous_headings":"","what":"Using One Single String To Set pop_es","title":"Generate the Population Model — ptable_pop","text":"alternative way set pop_es using one single string, like lavaan model syntax. example, equivalent example : See help page pop_es_yaml() use approach.","code":"\" .beta.: s m1 ~ x: -m m2 ~ m1: l y ~ x:w: s \""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"multigroup-models","dir":"Reference","previous_headings":"","what":"Multigroup Models","title":"Generate the Population Model — ptable_pop","text":"function also supports multigroup models. model population model, equality constraints irrelevant model syntax specifies form model. Therefore, model specified case single group models. pop_es, instead using named vectors, use named list. names parameters, keywords .beta. .cov., like specifying population values single group model. elements character vectors. one element (e.g., single string), population value groups. one element (e.g., vector three strings), population values groups. model k groups, vector must either k elements one element. example: model, population value path m ~ x medium groups, population values path y ~ m small, medium, large, respectively.","code":"list(\"m ~ x\" = \"m\",      \"y ~ m\" = c(\"s\", \"m\", \"l\"))"},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"using-one-single-string-to-set-pop-es-1","dir":"Reference","previous_headings":"","what":"Using One Single String To Set pop_es","title":"Generate the Population Model — ptable_pop","text":"population values multigroup model can also set using one single string. example, equivalent example : another equivalent form: See help page pop_es_yaml() use approach.","code":"\" m ~ x: m y ~ m: [s, m, l] \" \" m ~ x: m y ~ m:  - s  - m  - l \""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate the Population Model — ptable_pop","text":"model_matrices_pop():","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the Population Model — ptable_pop","text":"","code":"model1 <- \" m1 ~ x + c1 m2 ~ m1 + x2 + c1 y ~  m2 + m1 + x + w + x:w + c1 \"  model1_es <- c(\"m1 ~ x\" = \"-m\",                \"m2 ~ m1\" = \"s\",                \"y ~ m2\" = \"l\",                \"y ~ x\" = \"m\",                \"y ~ w\" = \"s\",                \"y ~ x:w\" = \"s\",                \"x ~~ w\" = \"s\")  ptable_final1 <- ptable_pop(model1,                             pop_es = model1_es) ptable_final1 #>    id lhs op rhs group user block free ustart exo label plabel      start est #> 1   1  m1  ~   x     1    1     1    1     NA   0         .p1. -0.3000000   0 #> 2   2  m1  ~  c1     1    1     1    2     NA   0         .p2.  0.0000000   0 #> 3   3  m2  ~  m1     1    1     1    3     NA   0         .p3.  0.1000000   0 #> 4   4  m2  ~  x2     1    1     1    4     NA   0         .p4.  0.0000000   0 #> 5   5  m2  ~  c1     1    1     1    5     NA   0         .p5.  0.0000000   0 #> 6   6   y  ~  m2     1    1     1    6     NA   0         .p6.  0.5000000   0 #> 7   7   y  ~  m1     1    1     1    7     NA   0         .p7.  0.0000000   0 #> 8   8   y  ~   x     1    1     1    8     NA   0         .p8.  0.3000000   0 #> 9   9   y  ~   w     1    1     1    9     NA   0         .p9.  0.1000000   0 #> 10 10   y  ~ x:w     1    1     1   10     NA   0        .p10.  0.0500000   0 #> 11 11   y  ~  c1     1    1     1   11     NA   0        .p11.  0.0000000   0 #> 12 12  m1 ~~  m1     1    0     1   12     NA   0        .p12.  0.9095136   1 #> 13 13  m2 ~~  m2     1    0     1   13     NA   0        .p13.  0.9899914   1 #> 14 14   y ~~   y     1    0     1   14     NA   0        .p14.  0.6497233   1 #> 15 15   x ~~   x     1    0     1   15     NA   0        .p15.  1.0000000   1 #> 16 16   x ~~  c1     1    0     1   16     NA   0        .p16.  0.0000000   0 #> 17 17   x ~~  x2     1    0     1   17     NA   0        .p17.  0.0000000   0 #> 18 18   x ~~   w     1    0     1   18     NA   0        .p18.  0.1000000   0 #> 19 19   x ~~ x:w     1    0     1   19     NA   0        .p19.  0.0000000   0 #> 20 20  c1 ~~  c1     1    0     1   20     NA   0        .p20.  1.0000000   1 #> 21 21  c1 ~~  x2     1    0     1   21     NA   0        .p21.  0.0000000   0 #> 22 22  c1 ~~   w     1    0     1   22     NA   0        .p22.  0.0000000   0 #> 23 23  c1 ~~ x:w     1    0     1   23     NA   0        .p23.  0.0000000   0 #> 24 24  x2 ~~  x2     1    0     1   24     NA   0        .p24.  1.0000000   1 #> 25 25  x2 ~~   w     1    0     1   25     NA   0        .p25.  0.0000000   0 #> 26 26  x2 ~~ x:w     1    0     1   26     NA   0        .p26.  0.0000000   0 #> 27 27   w ~~   w     1    0     1   27     NA   0        .p27.  1.0000000   1 #> 28 28   w ~~ x:w     1    0     1   28     NA   0        .p28.  0.0000000   0 #> 29 29 x:w ~~ x:w     1    0     1   29     NA   0        .p29.  1.0000000   1   model_matrices_pop(ptable_final1) #> $lambda #>     m1 m2 y x c1 x2 w x:w #> m1   0  0 0 0  0  0 0   0 #> m2   0  0 0 0  0  0 0   0 #> y    0  0 0 0  0  0 0   0 #> x    0  0 0 0  0  0 0   0 #> c1   0  0 0 0  0  0 0   0 #> x2   0  0 0 0  0  0 0   0 #> w    0  0 0 0  0  0 0   0 #> x:w  0  0 0 0  0  0 0   0 #>  #> $theta #>     m1 m2 y x c1 x2 w x:w #> m1   0                    #> m2   0  0                 #> y    0  0 0               #> x    0  0 0 0             #> c1   0  0 0 0  0          #> x2   0  0 0 0  0  0       #> w    0  0 0 0  0  0 0     #> x:w  0  0 0 0  0  0 0   0 #>  #> $psi #>       m1   m2    y    x   c1   x2    w  x:w #> m1  0.91                                    #> m2  0.00 0.99                               #> y   0.00 0.00 0.65                          #> x   0.00 0.00 0.00 1.00                     #> c1  0.00 0.00 0.00 0.00 1.00                #> x2  0.00 0.00 0.00 0.00 0.00 1.00           #> w   0.00 0.00 0.00 0.10 0.00 0.00 1.00      #> x:w 0.00 0.00 0.00 0.00 0.00 0.00 0.00 1.00 #>  #> $beta #>      m1  m2 y    x c1 x2   w  x:w #> m1  0.0 0.0 0 -0.3  0  0 0.0 0.00 #> m2  0.1 0.0 0  0.0  0  0 0.0 0.00 #> y   0.0 0.5 0  0.3  0  0 0.1 0.05 #> x   0.0 0.0 0  0.0  0  0 0.0 0.00 #> c1  0.0 0.0 0  0.0  0  0 0.0 0.00 #> x2  0.0 0.0 0  0.0  0  0 0.0 0.00 #> w   0.0 0.0 0  0.0  0  0 0.0 0.00 #> x:w 0.0 0.0 0  0.0  0  0 0.0 0.00 #>  #> attr(,\"model\") #> [1] \"\\nm1 ~ x + c1\\nm2 ~ m1 + x2 + c1\\ny ~  m2 + m1 + x + w + x:w + c1\\n\"  model_matrices_pop(model1,                    pop_es = model1_es) #> $lambda #>     m1 m2 y x c1 x2 w x:w #> m1   0  0 0 0  0  0 0   0 #> m2   0  0 0 0  0  0 0   0 #> y    0  0 0 0  0  0 0   0 #> x    0  0 0 0  0  0 0   0 #> c1   0  0 0 0  0  0 0   0 #> x2   0  0 0 0  0  0 0   0 #> w    0  0 0 0  0  0 0   0 #> x:w  0  0 0 0  0  0 0   0 #>  #> $theta #>     m1 m2 y x c1 x2 w x:w #> m1   0                    #> m2   0  0                 #> y    0  0 0               #> x    0  0 0 0             #> c1   0  0 0 0  0          #> x2   0  0 0 0  0  0       #> w    0  0 0 0  0  0 0     #> x:w  0  0 0 0  0  0 0   0 #>  #> $psi #>        m1    m2     y     x    c1    x2     w   x:w #> m1  0.910                                           #> m2  0.000 0.990                                     #> y   0.000 0.000 0.652                               #> x   0.000 0.000 0.000 1.000                         #> c1  0.000 0.000 0.000 0.000 1.000                   #> x2  0.000 0.000 0.000 0.000 0.000 1.000             #> w   0.000 0.000 0.000 0.100 0.000 0.000 1.000       #> x:w 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000 #>  #> $beta #>      m1  m2 y    x c1 x2   w  x:w #> m1  0.0 0.0 0 -0.3  0  0 0.0 0.00 #> m2  0.1 0.0 0  0.0  0  0 0.0 0.00 #> y   0.0 0.5 0  0.3  0  0 0.1 0.05 #> x   0.0 0.0 0  0.0  0  0 0.0 0.00 #> c1  0.0 0.0 0  0.0  0  0 0.0 0.00 #> x2  0.0 0.0 0  0.0  0  0 0.0 0.00 #> w   0.0 0.0 0  0.0  0  0 0.0 0.00 #> x:w 0.0 0.0 0  0.0  0  0 0.0 0.00 #>  #> attr(,\"model\") #> [1] \"\\nm1 ~ x + c1\\nm2 ~ m1 + x2 + c1\\ny ~  m2 + m1 + x + w + x:w + c1\\n\""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Beta Variable — rbeta_rs","title":"Random Beta Variable — rbeta_rs","text":"Generate random numbers beta distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Beta Variable — rbeta_rs","text":"","code":"rbeta_rs(n = 10, shape1 = 0.5, shape2 = 0.5, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Beta Variable — rbeta_rs","text":"n number random numbers generate. Default 10. shape1 shape1 stats::rbeta(). shape2 shape2 stats::rbeta(). pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Beta Variable — rbeta_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Beta Variable — rbeta_rs","text":"First, specify two parameters, shape1 shape2, desired population mean standard deviation. random numbers, drawn beta distribution stats::rbeta() rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Beta Variable — rbeta_rs","text":"","code":"set.seed(90870962) x <- rbeta_rs(n = 5000,               shape1 = .5,               shape2 = .5,               pmean = 3,               psd = 1) mean(x) #> [1] 3.003229 sd(x) #> [1] 0.9983932 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Beta Variable (User Range) — rbeta_rs2","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"Generate random numbers beta distribution, rescaled user-specified population mean standard deviation, within specific range.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"","code":"rbeta_rs2(n = 10, bmean, bsd, blow = 0, bhigh = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"n number random numbers generate. Default 10. bmean population mean. bsd population standard deviation. bsd zero negative, random numbers equal bmean. blow lower bound target range. bhigh upper bound target range.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"First, specify two parameters, shape1 shape2, desired population mean standard deviation. random numbers, drawn beta distribution stats::rbeta() rescaled desired range.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"","code":"set.seed(90870962) x <- rbeta_rs2(n = 5000,                bmean = .80,                bsd = .10,                blow = .00,                bhigh = .95) mean(x) #> [1] 0.7991104 sd(x) #> [1] 0.1005175 hist(x)  y <- rbeta_rs2(n = 5000,                bmean = 4,                bsd = 3,                blow = -10,                bhigh = 10) mean(y) #> [1] 4.003419 sd(y) #> [1] 3.045306 hist(y)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Binary Variable — rbinary_rs","title":"Random Binary Variable — rbinary_rs","text":"Generate random numbers distribution 0 1, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Binary Variable — rbinary_rs","text":"","code":"rbinary_rs(n = 10, p1 = 0.5, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Binary Variable — rbinary_rs","text":"n number random numbers generate. Default 10. p1 probability 1, rescaling. pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Binary Variable — rbinary_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Binary Variable — rbinary_rs","text":"First, specify probability 1 (p1), desired population mean standard deviation. random numbers, drawn distribution 0 (1 - p1 probability) 1 (p1 probability), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Binary Variable — rbinary_rs","text":"","code":"set.seed(90870962) x <- rbinary_rs(n = 5000,                 p1 = .5,                 pmean = 3,                 psd = 1) mean(x) #> [1] 3.0244 sd(x) #> [1] 0.9998023 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Exponential Variable — rexp_rs","title":"Random Exponential Variable — rexp_rs","text":"Generate random numbers exponential distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Exponential Variable — rexp_rs","text":"","code":"rexp_rs(n = 10, rate = 1, pmean = 0, psd = 1, rev = FALSE)"},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Exponential Variable — rexp_rs","text":"n number random numbers generate. Default 10. rate rate stats::rexp(). pmean Population mean. psd Population standard deviation. rev TRUE, distribution revered generate negatively skewed distribution. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Exponential Variable — rexp_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Exponential Variable — rexp_rs","text":"First, specify parameter, rate, desired population mean standard deviation. random numbers, drawn exponential distribution stats::rexp(), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Exponential Variable — rexp_rs","text":"","code":"set.seed(90870962) x <- rexp_rs(n = 5000,              rate = 4,              pmean = 3,              psd = 1) mean(x) #> [1] 2.999214 sd(x) #> [1] 1.008795 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Lognormal Variable — rlnorm_rs","title":"Random Lognormal Variable — rlnorm_rs","text":"Generate random numbers lognormal distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Lognormal Variable — rlnorm_rs","text":"","code":"rlnorm_rs(n = 10, mui = 0, sigma = 1, rev = FALSE, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Lognormal Variable — rlnorm_rs","text":"n number random numbers generate. Default 10. mui parameter mui used stats::rlnorm(). sigma parameter sigma used stats::rlnorm(). rev TRUE, distribution revered generate negatively skewed distribution. Default FALSE. pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Lognormal Variable — rlnorm_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Lognormal Variable — rlnorm_rs","text":"First, specify parameter, mui sigma, desired population mean standard deviation. random numbers, drawn lognormal distribution stats::rlnorm(), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Lognormal Variable — rlnorm_rs","text":"","code":"set.seed(90870962) x <- rlnorm_rs(n = 5000, mui = 0, sigma = 1, pmean = 0, psd = 1) mean(x) #> [1] -0.005312214 sd(x) #> [1] 0.9400859 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Generalized Normal Variable — rpgnorm_rs","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"Generate random numbers generalized normal distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"","code":"rpgnorm_rs(n = 10, p = 2, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"n number random numbers generate. Default 10. p parameter distribution. Must positive non-zero number. Default 2, resulting normal distribution. Higher 2 results negative excess kurtosis. Lower 2 results positive excess kurtosis. pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"First, specify parameter p desired population mean standard deviation. random numbers, drawn generalized normal distribution pgnorm::rpgnorm(), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"","code":"set.seed(90870962) x <- rpgnorm_rs(n = 5000,                 p = 2,                 pmean = 0, psd = 1) mean(x) #> [1] -0.01118704 sd(x) #> [1] 1.010004 hist(x)  x_kurt <- function(p) {gamma(5/p)*gamma(1/p)/(gamma(3/p)^2) - 3} p <- 6 x <- rpgnorm_rs(n = 50000, p = p, pmean = 0, psd = 1) mean(x) #> [1] 0.002266498 sd(x) #> [1] 1.001834 x_kurt(p) #> [1] -1 qqnorm(x); qqline(x)  p <- 1 x <- rpgnorm_rs(n = 50000, p = p, pmean = 0, psd = 1) mean(x) #> [1] 0.007350372 sd(x) #> [1] 0.9993787 x_kurt(p) #> [1] 3 qqnorm(x); qqline(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random t Distribution Variable — rt_rs","title":"Random t Distribution Variable — rt_rs","text":"Generate random numbers t distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random t Distribution Variable — rt_rs","text":"","code":"rt_rs(n = 10, df = 5, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random t Distribution Variable — rt_rs","text":"n number random numbers generate. Default 10. df df stats::rt(). pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random t Distribution Variable — rt_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random t Distribution Variable — rt_rs","text":"First, specify parameter df desired population mean standard deviation. random numbers, drawn generalized normal distribution stats::rt(), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random t Distribution Variable — rt_rs","text":"","code":"set.seed(90870962) x <- rt_rs(n = 5000,            df = 5,            pmean = 3,            psd = 1) mean(x) #> [1] 3.004783 sd(x) #> [1] 0.9926204 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"Generate random numbers uniform distribution, user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"","code":"runif_rs(n = 10, min = 0, max = 1, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"n number random numbers generate. Default 10. min min runif. max max runif. pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"First, user specifies parameters, min max, desired population mean standard deviation. random numbers generated rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"","code":"set.seed(90870962) x <- runif_rs(n = 5000, min = 2, max = 4, pmean = 3, psd = 1) mean(x) #> [1] 2.987606 sd(x) #> [1] 0.9978981 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Datasets Based on a Model — sim_data","title":"Simulate Datasets Based on a Model — sim_data","text":"Get model matrix effect size specification simulate number datasets, along information.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Datasets Based on a Model — sim_data","text":"","code":"sim_data(   nrep = 10,   ptable = NULL,   model = NULL,   pop_es = NULL,   ...,   n = 100,   iseed = NULL,   number_of_indicators = NULL,   reliability = NULL,   x_fun = list(),   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1) )  # S3 method for class 'sim_data' print(   x,   digits = 3,   digits_descriptive = 2,   data_long = TRUE,   fit_to_all_args = list(),   ... )"},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Datasets Based on a Model — sim_data","text":"nrep number replications generate simulated datasets. Default 10. ptable output ptable_pop(), ptable_pop object, representing population model. NULL, default, ptable_pop() called generate ptable_pop object. model lavaan model syntax population model. Required. Ignored ptable specified. pop_es character specify population effect sizes. See 'Details' ptable_pop() set effect sizes argument. Ignored ptable specified. ... sim_data, parameters passed ptable_pop. print.sim_data(), arguments ignored. n sample size dataset. Default 100. iseed seed random number generator. Default NULL seed changed. number_of_indicators named vector specify number indicators factors. See 'Details' set argument. Default NULL variables model syntax observed variables. reliability named vector set reliability coefficient set indicators. Default NULL. x_fun function(s) used generate exogenous variables. supplied, set list(), default, variables generated multivariate normal distribution. See 'Details' use argument. parallel TRUE, parallel processing used simulate datasets. Default FALSE. progress TRUE, progress data simulation displayed. Default `FALSE. ncores number CPU cores use parallel processing used. x sim_data object printed. digits numbers digits displayed decimal. digits_descriptive number digits displayed decimal descriptive statistics table. data_long TRUE, detailed information printed. fit_to_all_args named list arguments passed lavaan::sem() model fitted sample combined ","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Datasets Based on a Model — sim_data","text":"function sim_out() returns list class sim_data, length nrep. element sim_data_i object, following major elements: ptable: lavaan parameter table model, population values set column start. (output function ptable_pop().) mm_out: population model represented model matrices lavaan. (output function model_matrices_pop().) mm_lm_out: list regression model formula, one endogenous variable. (output internal function mm_lm().) mm_lm_dat_out: simulated dataset generated population model. (output internal function mm_lm_data()). model_original: original model syntax (.e., argument model). model_final: modified model syntax model latent variable model. Indicators added syntax. fit0: output lavaan::sem() ptable model .fit set FALSE. Use easy retrieval information model. print method sim_data returns x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Datasets Based on a Model — sim_data","text":"two tasks: Determine actual population model population values based : model syntax observed variables (path model) latent factors (latent variable model). textual specification effect sizes parameters. number indicators latent factor model latent variable model. reliability latent factor measured indicators model latent factor model. Generate m simulated datasets population model. simulated datasets can used fit model, test parameters, estimate power. output usually used fit_model() fit target model, default population model, dataset.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"setting-model-and-pop-es","dir":"Reference","previous_headings":"","what":"Setting model and pop_es","title":"Simulate Datasets Based on a Model — sim_data","text":"Please refer help page ptable_pop() specify model pop_es.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"setting-number-of-indicators-and-reliability","dir":"Reference","previous_headings":"","what":"Setting number_of_indicators and reliability","title":"Simulate Datasets Based on a Model — sim_data","text":"variable model replaced indicators, set number_of_indicators named numeric vector. names variables variables indicators, appeared model syntax. value name number indicators. argument reliability set named numeric vector (list, see section multigroup models) specify population reliability coefficients (\"omega\") set indicators. population factor loadings computed ensure population reliability coefficient target value. examples single group model: number indicator = c(m = 3, x = 4, y = 5) numbers indicators m, x, y 3, 4, 5, respectively. reliability = c(m = .90, x = .80, y = .70) population reliability coefficients m, x, y .90, .80, .70, respectively.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"multigroup-models","dir":"Reference","previous_headings":"","what":"Multigroup Models","title":"Simulate Datasets Based on a Model — sim_data","text":"Multigroup models supported. number groups inferred pop_es (see help page ptable_pop()). multigroup model, number indicators variable must across groups. However, population reliability coefficients can different across groups. multigroup model k groups, one population reliability coefficients differ across groups, argument reliability set named list. names variables population reliability coefficients set. element name either single value common reliability coefficient, numeric vector reliability coefficient group. example reliability model 2 groups: reliability = list(x = .80, m = c(.70, .80)) reliability coefficients x .80 groups, reliability coefficients m .70 one group .80 another.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"equal-numbers-of-indicators-and-or-reliability-coefficients","dir":"Reference","previous_headings":"","what":"Equal Numbers of Indicators and/or Reliability Coefficients","title":"Simulate Datasets Based on a Model — sim_data","text":"variables model number indicators, number_of_indicators can set one single value. Similarly, sets indicators population reliability groups, reliability can also set one single value.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"specify-the-distributions-of-exogenous-variables","dir":"Reference","previous_headings":"","what":"Specify The Distributions of Exogenous Variables","title":"Simulate Datasets Based on a Model — sim_data","text":"default, variables generated multivariate normal distribution. desired, users can supply function used generate exogenous variables setting x_fun named list. names list variables user function used generate data. element list must also list. first element list, can unnamed, function used. arguments need supplied, included named elements list. example: variables x w generated user-supplied functions. x, function power4mome::rexp_rs. additional argument calling function. w, function power4mome::rbinary_rx. argument p1 = .70 pasded function generating values w. requirements user-functions: must return numeric vector. mush argument n number values. population mean standard deviation generated values must 0 1, respectively. package power4mom helper functions generating values common nonnormal distributions scaled population mean standard deviation equal 0 1, respectively: rbinary_rs(). rexp_rs(). rbeta_rs(). rlnorm_rs(). rpgnorm_rs(). use x_fun, variables must zero covariances variables population. possible generate nonnormal multivariate data believe rarely needed estimating power data. function used --one function power4test(). Users usually call function directly.","code":"x_fun = list(x = list(power4mome::rexp_rs),              w = list(power4mome::rbinary_rs,                       p1 = .70)))"},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Datasets Based on a Model — sim_data","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 5,                      model = mod,                      pop_es = es,                      n = 100,                      iseed = 1234)  data_all #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #> m ~ x #>  y ~ m + x #> == Model on Variables/Indicators == #> m ~ x #>  y ~ m + x #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.300   #>   y ~                         #>     m                 0.300   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.910   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  5  #> Sample Sizes:  100  #>  #> ==== Descriptive Statistics ==== #>  #>   vars   n  mean   sd  skew kurtosis   se #> m    1 500 -0.03 1.00 -0.09    -0.03 0.04 #> y    2 500 -0.01 0.98  0.03     0.41 0.04 #> x    3 500  0.01 0.94 -0.21     0.17 0.04 #>  #> ===== Parameter Estimates Based on All 5 Samples Combined ===== #>  #> Total Sample Size: 500  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   m ~                       #>     x                 0.323 #>   y ~                       #>     m                 0.277 #>     x                -0.098 #>"},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'sim_out' Object — sim_out","title":"Create a 'sim_out' Object — sim_out","text":"Combine outputs sim_data(), fit_model(), optionally gen_mc() /gen_boot() one single object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'sim_out' Object — sim_out","text":"","code":"sim_out(data_all, ...)  # S3 method for class 'sim_out' print(x, digits = 3, digits_descriptive = 2, fit_to_all_args = list(), ...)"},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'sim_out' Object — sim_out","text":"data_all output sim_data(). ... Named arguments objects added replication element extra. example, set fit = fit_all, fit_all output fit_model(), data_all[[1]]$extra$fit set first output fit_all. x sim_out object printed. digits numbers digits displayed decimal. digits_descriptive number digits displayed decimal descriptive statistics table. fit_to_all_args named list arguments passed lavaan::sem() model fitted sample combined ","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'sim_out' Object — sim_out","text":"function sim_out() returns sim_out object, list length equal length data_all. element list sim_data object element extra added . named elements added name. example. output fit_model() replication can added fit, extra. See description argument ... details. print method sim_out return x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a 'sim_out' Object — sim_out","text":"merges one object output sim_data(), list M simulated datasets, fit_model(), list lavaan::sem() output M datasets, optionally output gen_mc() gen_boot(), list M sets Monte Carlo bootstrap estimates based results fit_model(). list M elements, data, model fit results, optionally Monte Carlo estimates matched. object can used testing effects interests, processed estimate power test. function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'sim_out' Object — sim_out","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") dats <- sim_data(nrep = 5,                  model = mod,                  pop_es = es,                  n = 100,                  iseed = 1234)  fits <- fit_model(dats) sim_out_all <- sim_out(data_all = dats,                        fit = fits) sim_out_all #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #> m ~ x #>  y ~ m + x #> == Model on Variables/Indicators == #> m ~ x #>  y ~ m + x #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.300   #>   y ~                         #>     m                 0.300   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.910   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  5  #> Sample Sizes:  100  #>  #> ==== Descriptive Statistics ==== #>  #>   vars   n  mean   sd  skew kurtosis   se #> m    1 500 -0.03 1.00 -0.09    -0.03 0.04 #> y    2 500 -0.01 0.98  0.03     0.41 0.04 #> x    3 500  0.01 0.94 -0.21     0.17 0.04 #>  #> ===== Parameter Estimates Based on All 5 Samples Combined ===== #>  #> Total Sample Size: 500  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   m ~                       #>     x                 0.323 #>   y ~                       #>     m                 0.277 #>     x                -0.098 #>"},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Test Results — summarize_tests","title":"Summarize Test Results — summarize_tests","text":"Extract summarize test results.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Test Results — summarize_tests","text":"","code":"summarize_tests(object)  # S3 method for class 'test_summary_list' print(x, digits = 3, ...)  # S3 method for class 'test_summary' print(x, digits = 2, ...)  # S3 method for class 'test_out_list' print(x, digits = 3, test_long = FALSE, ...)"},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Test Results — summarize_tests","text":"object power4test object element test_all power4test object. x object printed. digits numbers digits decimal print numeric results. ... Optional arguments. used. test_long TRUE, detailed report printed.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Test Results — summarize_tests","text":"function summarize_tests() returns list class test_summary_list. element contains summary test stored. elements class test_summary, elments: test_attributes: stored information test, printing. nrep: number datasets (replications). mean: means numeric information. significance tests, rejection rates. nvalid: number non-NA replications used compute mean. print methods return x invisibly. called side effects.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Test Results — summarize_tests","text":"function used extract information test stored power4test object. method print.test_out_list() used print contest list test stored power4test object, option print just names tests.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Test Results — summarize_tests","text":"","code":"mod <- \" m ~ a*x y ~ b*m + x ab := a * b \"  mod_es <- c(\"y ~ m\" = \"l\",             \"m ~ x\" = \"m\",             \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 2,                        model = mod,                        pop_es = mod_es,                        n = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s):  test_out <- power4test(object = sim_only,                        test_fun = test_parameters) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs    test_out #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> ====================== Test(s) Conducted ====================== #>  #> - test_parameters: CIs  #>  #> Call print() and set 'test_long = TRUE' for a detailed report."},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":null,"dir":"Reference","previous_headings":"","what":"Test a Moderated Mediation Effect — test_index_of_mome","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"Test moderated mediation effect power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"","code":"test_index_of_mome(   fit = fit,   x = NULL,   m = NULL,   y = NULL,   w = NULL,   mc_ci = TRUE,   mc_out = NULL,   boot_ci = FALSE,   boot_out = NULL,   ...,   fit_name = \"fit\",   get_map_names = FALSE,   get_test_name = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"fit fit object, passed manymome::index_of_mome(). x name x-variable, predictor. m character vector name(s) mediator(s). path moves first mediator vector last mediator vector. Can NULL path direct path without mediator. y name y-variable, outcome variable. w name moderator. mc_ci Logical. TRUE, default, Monte Carlo confidence intervals formed. argument boot_ci TRUE. mc_out pre-generated Monte Carlo estimates generated manymome::do_mc, stored power4test object. Users set argument let power4test() set automatically. boot_ci Logical. TRUE, default, nonparametric bootstrap confidence intervals formed. argument mc_ci TRUE. boot_out pre-generated bootstrap estimates generated manymome::do_boot, stored power4test object. Users set argument let power4test() set automatically. ... Additional arguments passed manymome::index_of_mome(). fit_name name model fit object extracted. Default \"fit\". Used one model fitted replication. name model test conducted. get_map_names Logical. Used power4test() determine extract stored information assign function. Users use argument. get_test_name Logical. Used power4test() get default name test. Users use argument.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"normal usage, returns named numeric vector following elements: est: mean estimated indirect effect across datasets. cilo cihi: means lower upper limits confidence interval (95% default), respectively. sig: Whether test confidence interval significant (1) significant (0).","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"function used power4test() testing moderated mediation effect, setting test_fun argument. uses manymome::index_of_mome() test. can used models fitted lavaan::sem() fitted sequence calls stats::lm(), although nonparametric bootstrap confidence interval supported models fitted regression using stats::lm().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"","code":"mod <- \" m ~ x + w + x:w y ~ m \"  mod_es <- c(\"m ~ x\" = \"n\",             \"y ~ x\" = \"m\",             \"m ~ w\" = \"n\",             \"m ~ x:w\" = \"l\")  sim_only <- power4test(nrep = 2,                        model = mod,                        pop_es = mod_es,                        n = 100,                        R = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate Monte Carlo estimates:  test_out <- power4test(object = sim_only,                        test_fun = test_index_of_mome,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         w = \"w\",                                         mc_ci = TRUE)) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_index_of_mome: x->m->y, moderated by w  #> Error in cond_indirect_effects(wlevels = mm_w, x = x, y = y, m = m, fit = fit,     level = level, boot_ci = boot_ci, R = R, seed = seed, progress = progress,     boot_out = boot_out, mc_ci = mc_ci, mc_out = mc_out, ci_type = ci_type,     ci_out = ci_out, boot_type = boot_type, ...): The object at 'mc_out' must be of the class 'mc_out'.  print(test_out,       test_long = TRUE) #> Error: object 'test_out' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Test an Indirect Effect — test_indirect_effect","title":"Test an Indirect Effect — test_indirect_effect","text":"Test indirect effect power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test an Indirect Effect — test_indirect_effect","text":"","code":"test_indirect_effect(   fit = fit,   x = NULL,   m = NULL,   y = NULL,   mc_ci = TRUE,   mc_out = NULL,   boot_ci = FALSE,   boot_out = NULL,   ...,   fit_name = \"fit\",   get_map_names = FALSE,   get_test_name = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test an Indirect Effect — test_indirect_effect","text":"fit fit object, passed manymome::indirect_effect(). x name x-variable, predictor. m character vector name(s) mediator(s). path moves first mediator vector last mediator vector. Can NULL path direct path without mediator. y name y-variable, outcome variable. mc_ci Logical. TRUE, default, Monte Carlo confidence intervals formed. argument boot_ci TRUE. mc_out pre-generated Monte Carlo estimates generated manymome::do_mc, stored power4test object. Users set argument let power4test() set automatically. boot_ci Logical. TRUE, default, nonparametric bootstrap confidence intervals formed. argument mc_ci TRUE. boot_out pre-generated bootstrap estimates generated manymome::do_boot, stored power4test object. Users set argument let power4test() set automatically. ... Additional arguments passed manymome::indirect_effect(). fit_name name model fit object extracted. Default \"fit\". Used one model fitted replication. name model test conducted. get_map_names Logical. Used power4test() determine extract stored information assign function. Users use argument. get_test_name Logical. Used power4test() get default name test. Users use argument.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test an Indirect Effect — test_indirect_effect","text":"normal usage, returns named numeric vector following elements: est: mean estimated indirect effect across datasets. cilo cihi: means lower upper limits confidence interval (95% default), respectively. sig: Whether test confidence interval significant (1) significant (0).","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test an Indirect Effect — test_indirect_effect","text":"function used power4test() testing indirect effect, setting test_fun argument. uses manymome::indirect_effect() test. can used models fitted lavaan::sem() fitted sequence calls stats::lm(), although nonparametric bootstrap confidence interval supported models fitted regression using stats::lm().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test an Indirect Effect — test_indirect_effect","text":"","code":"model_simple_med <- \" m ~ x y ~ m + x \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 5,                        model = model_simple_med,                        pop_es = model_simple_med_es,                        n = 100,                        R = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate Monte Carlo estimates:  test_ind <- power4test(object = sim_only,                        test_fun = test_indirect_effect,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         mc_ci = TRUE)) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_indirect: x->m->y  #> Error in cond_indirect(x = x, y = y, m = m, fit = fit, est = est, implied_stats = implied_stats,     standardized_x = standardized_x, standardized_y = standardized_y,     boot_ci = boot_ci, level = level, boot_out = boot_out, R = R,     seed = seed, parallel = parallel, ncores = ncores, make_cluster_args = make_cluster_args,     progress = progress, save_boot_full = save_boot_full, save_boot_out = save_boot_out,     mc_ci = mc_ci, mc_out = mc_out, save_mc_full = save_mc_full,     save_mc_out = save_mc_out, ci_out = ci_out, save_ci_full = save_ci_full,     save_ci_out = save_ci_out, ci_type = ci_type, boot_type = boot_type,     group = group): The object at 'mc_out' must be of the class 'mc_out'. print(test_ind,       test_long = TRUE) #> Error: object 'test_ind' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":null,"dir":"Reference","previous_headings":"","what":"Test All Moderation Effects — test_moderation","title":"Test All Moderation Effects — test_moderation","text":"Test moderation effects testing product terms power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test All Moderation Effects — test_moderation","text":"","code":"test_moderation(   fit = fit,   standardized = FALSE,   ...,   fit_name = \"fit\",   get_map_names = FALSE,   get_test_name = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test All Moderation Effects — test_moderation","text":"fit fit object, passed lavaan::parameterEstimates(), lavaan::standardizedSolution(), lmhelprs::lm_list_to_partable(). standardized Logical. TRUE, lavaan::standardizedSolution() used. Can used models fitted lavaan. ... Additional arguments passed lavaan::parameterEstimates(), lavaan::standardizedSolution(), lmhelprs::lm_list_to_partable(). fit_name name model fit object extracted. Default \"fit\". Used one model fitted replication. name model test conducted. get_map_names Logical. Used power4test() determine extract stored information assign function. Users use argument. get_test_name Logical. Used power4test() get default name test. Users use argument.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test All Moderation Effects — test_moderation","text":"normal usage, returns output returned lavaan::parameterEstimates() lmhelprs::lm_list_to_partable(), following modifications: est: parameter estimates, even standardized estimates requested (est.std). cilo cihi: lower upper limits confidence interval (95% default), respectively (ci.lower ci.upper). sig: Whether test confidence interval significant (1) significant (0). test_label: column labels generated lavaan::lav_partable_labels(), usually labels used coef() label parameters.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test All Moderation Effects — test_moderation","text":"function used power4test() testing product terms, setting test_fun argument. just wrapper test_parameters(). first identifies product terms (terms : names), call test_parameters(), pars set select regression coefficients terms.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test All Moderation Effects — test_moderation","text":"","code":"mod <- \" m ~ x + w1 + x:w1 y ~ m + w2 + m:w2 + x \"  mod_es <- c(\"m ~ x\" = \"n\",             \"y ~ x\" = \"m\",             \"m ~ w1\" = \"n\",             \"m ~ x:w1\" = \"l\",             \"y ~ m:w2\" = \"-s\")  sim_only <- power4test(nrep = 5,                        model = mod,                        pop_es = mod_es,                        n = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s):  test_out <- power4test(object = sim_only,                        test_fun = test_moderation) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_moderation: CIs    print(test_out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x + w1 + x:w1 #> y ~ m + w2 + m:w2 + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x + w1 + x:w1 #> y ~ m + w2 + m:w2 + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.000   #>     w1                0.000   #>     x:w1              0.150   #>   y ~                         #>     m                 0.000   #>     w2                0.000   #>     m:w2             -0.050   #>     x                 0.300   #>  #> Covariances: #>                    Population #>   x ~~                        #>     w1                0.000   #>     x:w1              0.000   #>     w2                0.000   #>   w1 ~~                       #>     x:w1              0.000   #>     w2                0.000   #>   x:w1 ~~                     #>     w2                0.000   #>  #> Variances: #>                    Population #>    .m                 0.977   #>    .y                 0.907   #>     m:w2              1.000   #>     x                 1.000   #>     w1                1.000   #>     x:w1              1.000   #>     w2                1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  5  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 9 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        10 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                12.032 #>   Degrees of freedom                                 8 #>   P-value (Chi-square)                           0.150 #>  #> =============== <test_moderation: CIs > =============== #>  #> Mean(s) across replication: #>   test_label lhs op  rhs    est    se      z pvalue   cilo  cihi   sig #> 1     m~x:w1   m  ~ x:w1  0.178 0.106  1.624  0.204 -0.031 0.386 0.600 #> 2     y~m:w2   y  ~ m:w2 -0.123 0.099 -1.247  0.374 -0.318 0.071 0.200 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 5  #> - Proportion of valid replications for rejection rate(s): 1.000"},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Test All Free Parameters — test_parameters","title":"Test All Free Parameters — test_parameters","text":"Test free parameters, including user-defined parameters, power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test All Free Parameters — test_parameters","text":"","code":"test_parameters(   fit = fit,   standardized = FALSE,   pars = NULL,   op = NULL,   remove.nonfree = TRUE,   ...,   fit_name = \"fit\",   get_map_names = FALSE,   get_test_name = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test All Free Parameters — test_parameters","text":"fit fit object, passed lavaan::parameterEstimates(), lavaan::standardizedSolution(), lmhelprs::lm_list_to_partable(). standardized Logical. TRUE, lavaan::standardizedSolution() used. Can used models fitted lavaan. pars Optional. set character vector, parameters test_label equal values pars returned. op Optional. set character vector, parameters operators (e.g., \"~\", \"=~\") returned. pars op specified, parameters meeting requirements returned. remove.nonfree Logical. TRUE, default, free parameters returned. Ignored standardized TRUE model fitted lavaan. ... Additional arguments passed lavaan::parameterEstimates(), lavaan::standardizedSolution(), lmhelprs::lm_list_to_partable(). fit_name name model fit object extracted. Default \"fit\". Used one model fitted replication. name model test conducted. get_map_names Logical. Used power4test() determine extract stored information assign function. Users use argument. get_test_name Logical. Used power4test() get default name test. Users use argument.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test All Free Parameters — test_parameters","text":"normal usage, returns output returned lavaan::parameterEstimates() lmhelprs::lm_list_to_partable(), following modifications: est: parameter estimates, even standardized estimates requested (est.std). cilo cihi: lower upper limits confidence interval (95% default), respectively (ci.lower ci.upper). sig: Whether test confidence interval significant (1) significant (0). test_label: column labels generated lavaan::lav_partable_labels(), usually labels used coef() label parameters.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test All Free Parameters — test_parameters","text":"function used power4test() testing free user-defined model parameters, setting test_fun argument. models fitted lavaan, uses lavaan::parameterEstimates() test. bootstrapping requested (setting se = \"boot\"), supports bootstrap confidence intervals returned lavaan::parameterEstimates(). preliminary, though limited, supported models fitted stats::lm() (lmhelprs::many_lm()). Tests conducted ordinary least squares confidence intervals based t statistic, reported stats::confint() applied output stats::lm().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test All Free Parameters — test_parameters","text":"","code":"mod <- \" m ~ a*x y ~ b*m + x ab := a * b \"  mod_es <- c(\"y ~ m\" = \"l\",             \"m ~ x\" = \"m\",             \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 2,                        model = mod,                        pop_es = mod_es,                        n = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s):  test_out <- power4test(object = sim_only,                        test_fun = test_parameters) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs    print(test_out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> =============== <test_parameters: CIs > =============== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label    est    se      z pvalue   cilo  cihi   sig #> 1          a   m  ~   x     a  0.382 0.103  3.698  0.000  0.179 0.585 1.000 #> 2          b   y  ~   m     b  0.443 0.094  4.715  0.000  0.259 0.627 1.000 #> 3        y~x   y  ~   x       -0.029 0.104 -0.226  0.236 -0.232 0.174 0.000 #> 4       m~~m   m ~~   m        0.945 0.134  7.071  0.000  0.683 1.207 1.000 #> 5       y~~y   y ~~   y        0.836 0.118  7.071  0.000  0.604 1.068 1.000 #> 6         ab  ab := a*b    ab  0.169 0.058  2.909  0.004  0.055 0.283 1.000 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 2  #> - Proportion of valid replications for rejection rate(s): 1.000   test_out <- power4test(object = sim_only,                        test_fun = test_parameters,                        test_args = list(standardized = TRUE)) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs (standardized)    print(test_out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> ======== <test_parameters: CIs (standardized) > ======== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label    est    se      z pvalue   cilo  cihi   sig #> 1          a   m  ~   x     a  0.347 0.085  4.069  0.000  0.180 0.514 1.000 #> 2          b   y  ~   m     b  0.446 0.086  5.190  0.000  0.277 0.615 1.000 #> 3        y~x   y  ~   x       -0.024 0.094 -0.233  0.232 -0.209 0.160 0.000 #> 4       m~~m   m ~~   m        0.880 0.059 14.888  0.000  0.764 0.995 1.000 #> 5       y~~y   y ~~   y        0.791 0.071 11.181  0.000  0.652 0.931 1.000 #> 6       x~~x   x ~~   x        1.000 0.000    NaN    NaN  1.000 1.000 1.000 #> 7         ab  ab := a*b    ab  0.155 0.050  3.102  0.002  0.057 0.253 1.000 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 2  #> - Proportion of valid replications for rejection rate(s): 1.000   test_out <- power4test(object = sim_only,                        test_fun = test_parameters,                        test_args = list(op = \"~\")) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs (op: ~)   print(test_out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> ============ <test_parameters: CIs (op: ~)> ============ #>  #> Mean(s) across replication: #>   test_label lhs op rhs label    est    se      z pvalue   cilo  cihi   sig #> 1          a   m  ~   x     a  0.382 0.103  3.698  0.000  0.179 0.585 1.000 #> 2          b   y  ~   m     b  0.443 0.094  4.715  0.000  0.259 0.627 1.000 #> 3        y~x   y  ~   x       -0.029 0.104 -0.226  0.236 -0.232 0.174 0.000 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 2  #> - Proportion of valid replications for rejection rate(s): 1.000"},{"path":"https://sfcheung.github.io/power4mome/news/index.html","id":"power4mome-001","dir":"Changelog","previous_headings":"","what":"power4mome 0.0.1","title":"power4mome 0.0.1","text":"Initialized package. (0.0.0.9000) Major functions drafted main workflows finalized. Ready documenting changes. (0.0.0.9001) Documented set pop_es. (0.0.0.9002) Added preliminary support covariance-models (regression path) confirmatory factor analytic models (CFA). (0.0.0.9003) Added support multigroup models. (0.0.0.9004) sim_data(), number_of_indicators reliability can set one single values. (0.0.0.9005) Added check negative variances variances greater one model. (0.0.0.9006) warning raised ptable_pop() pop_es one variables model. (0.0.0.9007) Added error warning checking code fit_model(). (0.0.0.9008) Added error checking code gen_mc(). (0.0.0.9009) Added tests sim_out() do_test(). (0.0.0.9010) Updated help do_test() requirement results test functions. (0.0.0.9011) Updated fit_model() support user-supplied models. (0.0.0.9012) Updated do_test() sim_out() arbitrary number models arbitrary elements used test_fun(). (0.0.0.9013) Updated do_test() sim_out() support tests compare two models. (0.0.0.9014) Added tests power4test(). (0.0.0.9015) Removed redundant arguments tests power4test(). (0.0.0.9016) Updated power4test() store one test. (0.0.0.9017) Updated fit_model() support fitting model another function (0.0.0.9018) Added argument x_fun() sim_data() generating nonnormal exogenous variables. (0.0.0.9019) Updated power4test() related functions support updating power4test object different population effect sizes sample size(s). (0.0.0.9020) Added option generate nonparametric bootstrap estimates. Slow lavaan can used models fitted lm(). (0.0.0.9021) Added test_indirect_effect() testing indirect effect calling power4test(). (0.0.0.9022) Added test_index_mome() testing moderated mediation effect (testing index moderated mediation) calling power4test(). (0.0.0.9023) Added test_parameters() testing free parameters calling power4test(). (0.0.0.9024) Added test_moderation() testing product terms calling power4test(). (0.0.0.9024) test functions can support models fitted lmhelprs::many_lm(). (0.0.0.9024) Simplified argument fit_function fit_model(). can now strings, lavaan lm. (0.0.0.9025) Added summarize_tests(), along print method, summarize te test results power4test object. (0.0.0.9026) Added print method power4test objects. (0.0.0.9027) sim_out can now used update sim_out object adding elements extra. (0.0.0.9028) power4test() can updata power4test object using new nrep. (0.0.0.9029) Added get_rejection_rates() extract rejection rates stored tests. (0.0.0.9030) Added power4test_by_n() power4test_by_pop_es() finding power range sample sizes effect sizes. (0.0.0.9031) Update help pages examples. (0.0.0.9032) Minor fixes boot_ci mc_ci arguments test_indirect_effect() test_index_of_mome(). (0.0.0.9033) Revised fit_model() can used refit model new set data. (0.0.0.9034) Revised power4test() support fitting one model datasets. test_ functions also updated allow users specifying model uesd tests. (0.0.0.9035) Drafted pkgdown site. (0.0.0.9036) Added pop_es_yaml() revised ptable_pop() support method specify population values. (0.0.0.9037) Added option disable computation implied statistics. Default FALSE becasue required testing unstandardized effects. Require manymome 0.2.7.1 . (0.0.0.9038) Finalize internal testing. (0.0.1)","code":""}]
