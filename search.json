[{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sfcheung.github.io/power4mome/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sfcheung.github.io/power4mome/articles/main_workflow.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Main Workflows","text":"technical appendix describes workflows major functions power4mome.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/main_workflow.html","id":"from-population-to-power","dir":"Articles","previous_headings":"","what":"From Population to Power","title":"Main Workflows","text":"workflow power4test(). Population Power","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/main_workflow.html","id":"generate-simulated-data-sim_data","dir":"Articles","previous_headings":"","what":"Generate Simulated Data (sim_data())","title":"Main Workflows","text":"internal function sim_data_i() called m times sim_data() generate m datasets. Workflow sim_data_i()","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"article brief illustration use power4test() package power4mome power analysis Mediation, moderation, moderated-mediation model fitted structural equation model modeling using lavaan.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"prerequisite","dir":"Articles","previous_headings":"","what":"Prerequisite","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Basic knowledge fitting models lavaan required. Readers also expected basic knowledge mediation, moderation, /moderated mediation.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"brief illustration. complicated scenarios features power4mome described vignettes.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"package","dir":"Articles","previous_headings":"","what":"Package","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"introduction needs following package(s):","code":"library(power4mome)"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Two functions sufficient estimating power give particular model, population values, sample size, test used. basic workflow: Specify model syntax population model, lavaan style, set population values model parameters. Call power4test() examine setup datasets generated. Repeat previous steps model specified correctly. Call power4test() , test specified. Call get_rejection_rates() compute power.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"package power4mome needed vignette.","code":"library(power4mome)"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"mediation","dir":"Articles","previous_headings":"","what":"Mediation","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Let’s consider simple mediation model. like estimate power testing mediation effect Monte Carlo confidence interval.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"specify-the-population-model","dir":"Articles","previous_headings":"Mediation","what":"Specify the Population Model","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"model syntax Note , even going test mediation, moderation, moderated-mediation effects, need add labels model. taken care test functions, use package manymome (Cheung & Cheung, 2024).","code":"mod <- \" m ~ x y ~ m + x \""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"es_convention","dir":"Articles","previous_headings":"Mediation","what":"Specify The Population Values","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"two approaches : using named vectors lists, using long string similar lavaan model syntax. second approach demonstrated . Suppose want estimate power : path x m “large” strength. path m y “medium” strength. path x m “small” strength. default, power4mome use convention regression path correlation:1 Small: .10 (-.10) Medium: .30 (-.30) Large: .50 (-.50) product term, convention: Small: .05 (-.05) Medium: .10 (-.10) Large: .15 (-.15) values standardized solution (-called “betas”). following string denote desired values: line starts tag, parameter presented lavaan syntax. tag ends colon, :. colon population value, can : word denoting value. default: s: Small. (-s small negative.) m: Medium. (-m medium negative.) l: Large. (-l large negative.) nil: Zero. regression coefficients covariances, specified, set zero.","code":"mod_es <- \" m ~ x: l y ~ m: m y ~ x: s \""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-check-the-model","dir":"Articles","previous_headings":"Mediation","what":"Call power4test() to Check the Model","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"arguments used: nrep: number replications. stage, small number can used. important large sample size. model: model syntax. pop_es: string setting population values. n: sample size replications. stage, just checking model data generation, number can set large one unless model slow fit sample size large. iseed: supplied, used set seed random number generator. advised always set arbitrary integer, make results reproducible.2 population values can shown print object: default, population model fitted dataset, hence section <fit>. population values regression paths specified. necessary, can check data generation adding data_long = TRUE printing output: section Descriptive Statistics, generated psych::describe(), shows basic descriptive statistics observed variables. expected, means close zero standard deviations close one, datasets generated using standardized model. section Parameter Estimates Based shows parameter estimates population model fitted datasets combined. total sample size large, estimates close population values. results show population model desired one.","code":"out <- power4test(nrep = 2,                   model = mod,                   pop_es = mod_es,                   n = 50000,                   iseed = 1234) out #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x #> y ~ m + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x #> y ~ m + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.500   #>   y ~                         #>     m                 0.300   #>     x                 0.100   #>  #> Variances: #>                    Population #>    .m                 0.750   #>    .y                 0.870   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  50000  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                         50000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 print(out,       data_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x #> y ~ m + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x #> y ~ m + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.500   #>   y ~                         #>     m                 0.300   #>     x                 0.100   #>  #> Variances: #>                    Population #>    .m                 0.750   #>    .y                 0.870   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  50000  #>  #> ==== Descriptive Statistics ==== #>  #>   vars     n mean sd skew kurtosis se #> m    1 1e+05 0.00  1 0.01     0.03  0 #> y    2 1e+05 0.01  1 0.01     0.00  0 #> x    3 1e+05 0.00  1 0.01     0.01  0 #>  #> ===== Parameter Estimates Based on All 2 Samples Combined ===== #>  #> Total Sample Size: 100000  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   m ~                       #>     x                 0.500 #>   y ~                       #>     m                 0.295 #>     x                 0.102 #>  #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                         50000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"med_power","dir":"Articles","previous_headings":"Mediation","what":"Call power4test() to Do the Target Test","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"can now simulation estimate power. large number datasets (e.g., 500) target sample size generated, target test conducted datasets. Suppose like estimate power using Monte Carlo confidence interval test indirect effect x y m, sample size 50. call: new arguments used: R: number replications used generate Monte Carlo simulated estimates, 2000 example. ci_type: method used generate estimates. Support Monte Carlo (\"mc\") nonparametric bootstrapping (\"boot\").3 Although bootstrapping usually used test indirect effect, slow R bootstrapping nrep datasets (model fitted R*nrep times). Therefore, preferable use Monte Carlo initial estimation. test_fun: function used test replication. function following specific requirement can used, power4mome comes several built-function tests. function test_indirect_effect() used test indirect effect model. test_args: named list arguments supplied test_fun. test_indirect_effect(), named list specifying predictor (x), mediator(s) (m), outcome (y). path number mediators can supported. Please refer help page test_indirect_effect().4 parallel: test conducted slow, case test done Monte Carlo nonparametric bootstrapping confidence interval, advised enable parallel processing setting parallel TRUE.5 default printout:","code":"out <- power4test(nrep = 100,                   model = mod,                   pop_es = mod_es,                   n = 50,                   R = 2000,                   ci_type = \"mc\",                   test_fun = test_indirect_effect,                   test_args = list(x = \"x\",                                    m = \"m\",                                    y = \"y\",                                    mc_ci = TRUE),                   iseed = 1234,                   parallel = TRUE) out #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x #> y ~ m + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x #> y ~ m + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.500   #>   y ~                         #>     m                 0.300   #>     x                 0.100   #>  #> Variances: #>                    Population #>    .m                 0.750   #>    .y                 0.870   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  100  #> Sample Sizes:  50  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #> - mc_out #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                            50 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> =========== <mc_out> =========== #>  #>  #> == A 'mc_out' class object == #>  #> Number of Monte Carlo replications: 2000  #>  #>  #> ====================== Test(s) Conducted ====================== #>  #> - test_indirect: x->m->y #>  #> Call print() and set 'test_long = TRUE' for a detailed report."},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"compute-the-power","dir":"Articles","previous_headings":"Mediation","what":"Compute the Power","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"power estimate simply proportion significant results, rejection rate, null hypothesis false. rejection rate can retrieved get_rejection_rates(). output simply data frame: example , estimated power test indirect effect, conducted Monte Carlo confidence interval, 0.470.6","code":"out_power <- get_rejection_rates(out) out_power #>                     test label pvalid reject #> 1 test_indirect: x->m->y  Test      1   0.47"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"moderation","dir":"Articles","previous_headings":"","what":"Moderation","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Let’s consider moderation model, control variables.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"pop_es_xw","dir":"Articles","previous_headings":"Moderation","what":"Specify the Population Model and Values","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"model moderation, predictor x moderator w. product term included lavaan style, x:w. unrealistic specific population values control variables. Therefore, can just add proxy, control represent set control variables may included. syntax population values: example introduce one useful tag, .beta. model many paths, inconvenient specify manually. tag .beta specify default value regression path, small (.10) example. path explicitly included (y ~ control y ~ x:w), values override .beta.. example also illustrates can set population values correlation (covariance standardized solution). Control variables included usually may correlate predictors. Therefore, example, hypothesized small correlation x control variable (x ~~ control: s). Last, recall section convention product term values different: s denotes .05 product terms.","code":"mod <- \" y ~ x + w + x:w + control \" mod_es <- \" .beta.: s x ~~ control: s y ~ control: m y ~ x:w: m \""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-check-the-model-1","dir":"Articles","previous_headings":"Moderation","what":"Call power4test() to Check the Model","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"check model first: population values regression paths specified, estimates based 5 × 104 2 100000 support dataset generated correctly.","code":"out <- power4test(nrep = 2,                   model = mod,                   pop_es = mod_es,                   n = 50000,                   iseed = 1234) print(out,       data_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> y ~ x + w + x:w + control #>  #> == Model on Variables/Indicators == #>  #> y ~ x + w + x:w + control #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   y ~                         #>     x                 0.100   #>     w                 0.100   #>     x:w               0.100   #>     control           0.300   #>  #> Covariances: #>                    Population #>   x ~~                        #>     w                 0.000   #>     x:w               0.000   #>     control           0.100   #>   w ~~                        #>     x:w               0.000   #>     control           0.000   #>   x:w ~~                      #>     control           0.000   #>  #> Variances: #>                    Population #>    .y                 0.874   #>     x                 1.000   #>     w                 1.000   #>     x:w               1.000   #>     control           1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  50000  #>  #> ==== Descriptive Statistics ==== #>  #>         vars     n mean sd  skew kurtosis se #> y          1 1e+05 0.00  1  0.02     0.00  0 #> x          2 1e+05 0.00  1  0.01     0.01  0 #> w          3 1e+05 0.00  1  0.00    -0.02  0 #> x:w        4 1e+05 0.00  1 -0.03     6.01  0 #> control    5 1e+05 0.01  1  0.00     0.00  0 #>  #> ===== Parameter Estimates Based on All 2 Samples Combined ===== #>  #> Total Sample Size: 100000  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   y ~                       #>     x                 0.098 #>     w                 0.104 #>     x:w               0.102 #>     control           0.299 #>  #> Covariances: #>                     est.std #>   x ~~                      #>     w                -0.003 #>     x:w               0.002 #>     control           0.101 #>   w ~~                      #>     x:w              -0.004 #>     control           0.001 #>   x:w ~~                    #>     control           0.004 #>  #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                         50000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-test-the-moderation-effect","dir":"Articles","previous_headings":"Moderation","what":"Call power4test() to Test The Moderation Effect","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"can now simulation estimate power. simple model, test just test product term, x:w. model can fitted linear regression using lm(). Let’s estimate power sample size 50 model fitted lm(): new arguments used: fit_model_args: named list arguments fit_model(). default, lavaan::sem() used. fit model linear regression using lm(), add fit_function = \"lm\" list.7 test_fun: set test_moderation example. function automatically identify product terms model test . test used depends method used fit model. lm() used, usual t test used.8","code":"out <- power4test(nrep = 500,                   model = mod,                   pop_es = mod_es,                   n = 50,                   fit_model_args = list(fit_function = \"lm\"),                   test_fun = test_moderation,                   iseed = 1234,                   parallel = TRUE)"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"compute-the-power-1","dir":"Articles","previous_headings":"Moderation","what":"Compute the Power","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"can ues get_rejection_rates() estimate power: estimated power test product term, x:w, 0.110. function power4test() also supports redoing analysis using new value sample size. Simply set output power4test first argument, set new value n: estimated power sample size 200. estimated power 0.294 sample size 200. process can repeated find required sample size target power. (function power4test_by_n() can used estimate power sequence sample sizes.)","code":"out_power <- get_rejection_rates(out) out_power #>                    test label pvalid reject #> 1 test_moderation: CIs  y~x:w      1   0.11 out_new_n <- power4test(out,                         n = 200) out_new_n out_new_n_reject <- get_rejection_rates(out_new_n) out_new_n_reject #>                    test label pvalid reject #> 1 test_moderation: CIs  y~x:w      1  0.294"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"moderated-mediation","dir":"Articles","previous_headings":"","what":"Moderated-Mediation","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Let’s consider moderated mediation model.","code":""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"specify-the-population-model-and-values","dir":"Articles","previous_headings":"Moderated-Mediation","what":"Specify the Population Model and Values","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"model mediation model -path, m ~ x, moderated w. explained , need use label define parameters. handled test function used. syntax population values: Please refer previous section setting syntax.","code":"mod <- \" m ~ x + w + x:w y ~ m + x \" mod_es <- \" .beta.: s m ~ x: m y ~ m: m m ~ x:w: s \""},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-check-the-model-2","dir":"Articles","previous_headings":"Moderated-Mediation","what":"Call power4test() to Check the Model","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"check model first: population values estimates based 5 × 104 2 100000 expect.","code":"out <- power4test(nrep = 2,                   model = mod,                   pop_es = mod_es,                   n = 50000,                   iseed = 1234) print(out,       data_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x + w + x:w #> y ~ m + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x + w + x:w #> y ~ m + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.300   #>     w                 0.100   #>     x:w               0.050   #>   y ~                         #>     m                 0.300   #>     x                 0.100   #>  #> Covariances: #>                    Population #>   x ~~                        #>     w                 0.000   #>     x:w               0.000   #>   w ~~                        #>     x:w               0.000   #>  #> Variances: #>                    Population #>    .m                 0.898   #>    .y                 0.882   #>     x                 1.000   #>     w                 1.000   #>     x:w               1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  50000  #>  #> ==== Descriptive Statistics ==== #>  #>     vars     n mean sd skew kurtosis se #> m      1 1e+05    0  1 0.03     0.03  0 #> y      2 1e+05    0  1 0.01    -0.01  0 #> x      3 1e+05    0  1 0.00    -0.02  0 #> w      4 1e+05    0  1 0.00     0.01  0 #> x:w    5 1e+05    0  1 0.04     5.92  0 #>  #> ===== Parameter Estimates Based on All 2 Samples Combined ===== #>  #> Total Sample Size: 100000  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   m ~                       #>     x                 0.303 #>     w                 0.099 #>     x:w               0.052 #>   y ~                       #>     m                 0.299 #>     x                 0.098 #>  #> Covariances: #>                     est.std #>   x ~~                      #>     w                 0.003 #>     x:w              -0.001 #>   w ~~                      #>     x:w               0.008 #>  #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 2 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         7 #>  #>   Number of observations                         50000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.007 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.997"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"call-power4test-to-test-the-moderated-mediation-effect","dir":"Articles","previous_headings":"Moderated-Mediation","what":"Call power4test() to Test The Moderated-Mediation Effect","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"estimate power moderated-mediation effect, can test index moderated-mediation [hayes_index_2015]. example, product coefficient m ~ x:w coefficient y ~ m. can done test function test_index_of_mome(). , Monte Carlo confidence interval used. Let’s estimate power sample size 100. call similar one used testing mediation. new arguments used: test_fun: set test_index_of_mome() example. function similar test_indirect_effect(), one argument, w, moderator. Although example one mediator, support number mediators along path.9","code":"out <- power4test(nrep = 500,                   model = mod,                   pop_es = mod_es,                   n = 100,                   R = 2000,                   ci_type = \"mc\",                   test_fun = test_index_of_mome,                   test_args = list(x = \"x\",                                    m = \"m\",                                    y = \"y\",                                    w = \"w\",                                    mc_ci = TRUE),                   iseed = 1234,                   parallel = TRUE)"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"compute-the-power-2","dir":"Articles","previous_headings":"Moderated-Mediation","what":"Compute the Power","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"can ues get_rejection_rates() estimate power: estimated power test moderated mediation effect, conducted test index moderated mediation, 0.066. shown , can rerun analysis using larger sample size: estimated power sample size 500. estimated power 0.222 sample size 500. process can repeated find required sample size target power. Unlike previous example moderation tested regression, estimating power Monte Carlo confidence intervals substantially slower. However, believe necessary Monte Carlo nonparametric bootstrapping confidence interval test usually used moderated-mediation (mediation).","code":"out_power <- get_rejection_rates(out) out_power #>                                          test label pvalid reject #> 1 test_index_of_mome: x->m->y, moderated by w  Test      1  0.066 out_new_n <- power4test(out,                         n = 500) out_new_n_reject <- get_rejection_rates(out_new_n) out_new_n_reject #>                                          test label pvalid reject #> 1 test_index_of_mome: x->m->y, moderated by w  Test      1  0.222"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"advanced-features","dir":"Articles","previous_headings":"","what":"Advanced Features","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"brief illustration cover basic features power4mome. advanced features covered articles: inherent restriction form model. Typical models can specified lavaan model syntax can population model, although may special models power4test support. population model can model latent factors indicators. Nevertheless, users can specify relation among factors. need include indicators model syntax, also need manually specify factor loadings. number indicators factor factor loadings set argument number_of_indicators reliability (see help page sim_data() set ). model syntax used fit data automatically include indicators. Though illustrated , estimating power tests conducted nonparametric bootstrapping supported, although take time run. Although package focuses moderation, mediation, moderated-mediation, principle, power test can estimated, long test function test_fun available. functions provided power4mome (e.g., test_parameters() testing free model parameters). See help page do_test() write function test available power4mome. estimating power, usually population model fitted data. However, possible fit model generated data. can done using argument fit_model_args set argument model fit_model(). Preliminary support multigroup model available. See help pages ptable_pop() pop_es_yaml() specify population value syntax. Functions added tests relevant multigroup models (e.g., testing -group difference indirect effect). Although illustrated rerunning analysis new sample size (n), also possible rerun analysis using new population value parameter. can done using previous output power4test() first argument, setting pop_es named vector: Instead manually rerunning analyais, possible rerun analysis sequence sample sizes population values. See help pages power4test_by_n() power4test_by_pop_es() details. Basic support generating nonnormal variables, including dichotomous variables. See argument x_fun power4test() details.","code":"out_new_xw <- power4test(out,                          pop_es = c(\"m ~ x:w\" = \".30\"))"},{"path":"https://sfcheung.github.io/power4mome/articles/power4mome.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Power Analysis for Moderation, Mediation, and Moderated-Mediation","text":"Monte Carlo confidence interval supported models fitted lm() (regression). estimate power testing mediation moderated-mediation effects, ci_type = \"boot\" needed.","code":""},{"path":[]},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer. Sing-Hang Cheung. Author.","code":""},{"path":"https://sfcheung.github.io/power4mome/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung S, Cheung S (2025). power4mome: Power Analysis Moderation Mediation. R package version 0.0.1.3, https://sfcheung.github.io/power4mome/.","code":"@Manual{,   title = {power4mome: Power Analysis for Moderation and Mediation},   author = {Shu Fai Cheung and Sing-Hang Cheung},   year = {2025},   note = {R package version 0.0.1.3},   url = {https://sfcheung.github.io/power4mome/}, }"},{"path":"https://sfcheung.github.io/power4mome/index.html","id":"power4mome","dir":"","previous_headings":"","what":"Power Analysis for Moderation and Mediation","title":"Power Analysis for Moderation and Mediation","text":"Power analysis sample size determination moderation, mediation, moderated mediation package includes functions power analysis sample size determination moderation, mediation, moderated mediation models fitted structural equation modeling. information package, please visit GitHub page: https://sfcheung.github.io/power4mome/","code":""},{"path":"https://sfcheung.github.io/power4mome/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Power Analysis for Moderation and Mediation","text":"Stable release versions package can downloaded : https://github.com/sfcheung/power4mome/releases latest developmental version package can installed remotes::install_github:","code":"remotes::install_github(\"sfcheung/power4mome\")"},{"path":"https://sfcheung.github.io/power4mome/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Power Analysis for Moderation and Mediation","text":"suggestions found bugs, please feel feel open GitHub issue. Thanks.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Do a Test on Each Replication — do_test","title":"Do a Test on Each Replication — do_test","text":"test replication output sim_out().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do a Test on Each Replication — do_test","text":"","code":"do_test(   sim_all,   test_fun,   test_args = list(),   map_names = c(fit = \"fit\"),   results_fun = NULL,   results_args = list(),   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1) )"},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do a Test on Each Replication — do_test","text":"sim_all output sim_out(). test_fun function test. See 'Details' requirement function. test_args list arguments passed test_fun function. Default list(). map_names named character vector specifying content element extra replication sim_all map argument test_fun. Default c(fit = \"fit\"), indicating element fit element extra set argument fit test_fun. , first replication, fit = sim_out[[1]]$extra$fit calling test_fun. results_fun function used extract test results. See Details requirements function. Default NULL, assuming output test_fun can used directly. results_args list arguments passed results_fun function. Default list(). parallel TRUE, parallel processing used tests. Default FALSE. progress TRUE, progress tests displayed. Default `FALSE. ncores number CPU cores use parallel processing used.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do a Test on Each Replication — do_test","text":"object class test_out, list length equal sim_out. element list two elements: test: output test_fun. test_results: output results_fun.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Do a Test on Each Replication — do_test","text":"arbitrary test replication using function set test_fun. function work output lavaan::sem(). test results extracted output test_fun function set results_fun. test_fun already returns output expected format (see ), set results_fun NULL, default. output test_fun used estimating power. function set results_fun must accept output test_fun, first argument, return named list (can data frame) named vector following elements: est: Optional. estimate parameter. se: Optional. standard error estimate. cilo: Optional. lower limit confidence interval. cihi: Optional. upper limit confidence interval. sig: Required. 1, test significant. 0, test significant. test done reason, NA. results can used estimate power test. package came ready--use test functions examples: test_indirect_effect() test_moderation() test_index_of_mome() test_parameters() function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/do_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do a Test on Each Replication — do_test","text":"","code":"mod <- \" m ~ x y ~ m + x \" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 5,                      model = mod,                      pop_es = es,                      n = 100,                      iseed = 1234) fit_all <- fit_model(data_all) mc_all <- gen_mc(fit_all,                  R = 50,                  iseed = 4567) #> Error in gen_mc(fit_all, R = 50, iseed = 4567): manymome 0.2.7.1 or later is required. If not available from CRAN, can be installed from GitHub: remotes::install_github('sfcheung/manymome') sim_all <- sim_out(data_all = data_all,                    fit = fit_all,                    mc_out = mc_all) #> Error: object 'mc_all' not found  test_all <- do_test(sim_all,                     test_fun = test_indirect_effect,                     test_args = list(x = \"x\",                                      m = \"m\",                                      y = \"y\",                                      mc_ci = TRUE),                     parallel = FALSE,                     progress = FALSE) #> Error: object 'sim_all' not found  lapply(test_all, function(x) x$test_results) #> Error: object 'test_all' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Model to a List of Datasets — fit_model","title":"Fit a Model to a List of Datasets — fit_model","text":"Get output sim_data() fit model stored datasets.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Model to a List of Datasets — fit_model","text":"","code":"fit_model(   data_all = NULL,   model = NULL,   fit_function = \"lavaan\",   arg_data_name = \"data\",   arg_model_name = \"model\",   arg_group_name = \"group\",   ...,   fit_out = NULL,   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1) )"},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Model to a List of Datasets — fit_model","text":"data_all output sim_data(), sim_data class object. model model fitted. NULL, default, model stored data_all, data generation model, used. fit_function function used fit model. Can also string: \"lavaan\" (default) lavaan::sem(), \"lm\" many_lm lmhelprs::many_lm(). functions can also used necessary. arg_data_name name argument fit_function expecting dataset. Default \"data\". arg_model_name name argument fit_function expecting model definition. Default \"model\". arg_group_name name argument fit_function expecting name group variable. Used multigroup models. Default \"group\". ... Optional arguments passed fit_function fitting model. fit_out set fit_out object (output fit_model()), missing arguments retrieved fit_out. , users can use fit_model(data_all = new_data, fit_out = old_out) re-fit model originally fitted old_out new list dataset (new_data). need include arguments. parallel TRUE, parallel processing used fit models. Default FALSE. progress TRUE, progress model fitting displayed. Default `FALSE. ncores number CPU cores use parallel processing used.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Model to a List of Datasets — fit_model","text":"object class fit_out, list output fit_function (lavaan::sem() default). error occurred fitting model dataset, element error message fit function.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a Model to a List of Datasets — fit_model","text":"default, extracts model stored output sim_data(), fits model dataset simulated using fit_function, default \"lavaan\" lavaan::sem() called, returns results. datasets generated multigroup model calling sim_data(), multigroup model fitted. function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Model to a List of Datasets — fit_model","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 5,                  model = mod,                  pop_es = es,                  n = 100,                  iseed = 1234)  fit_all <- fit_model(data_all) fit_all[[1]] #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0"},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bootstrap Estimates — gen_boot","title":"Generate Bootstrap Estimates — gen_boot","text":"Get list output lavaan::sem() lmhelprs::many_lm() generate bootstrap estimates model parameters.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bootstrap Estimates — gen_boot","text":"","code":"gen_boot(   fit_all,   R = 100,   ...,   iseed = NULL,   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1),   compute_implied_stats = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bootstrap Estimates — gen_boot","text":"fit_all output fit_model() object class fit_out. R number replications generate bootstrap estimates fit output. ... Optional arguments passed manymome::do_boot() generating bootstrap estimates. iseed seed random number generator. Default NULL seed changed. parallel TRUE, parallel processing used generate bootstrap estimates fit outputs. Default FALSE. progress TRUE, progress displayed. Default `FALSE. ncores number CPU cores use parallel processing used. compute_implied_stats Whether implied statistics computed bootstrap samples. Usually needed default FALSE Required manymome 0.2.7.1 .","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bootstrap Estimates — gen_boot","text":"boot_list object, list output manymome::do_boot().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Bootstrap Estimates — gen_boot","text":"simply calls manymome::do_boot() output lavaan::sem() lmhelprs::many_lm() fit_all. simulated estimates can used test effects indirect effects, usually functions manymome package, manymome::indirect_effect(). function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/gen_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Bootstrap Estimates — gen_boot","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 2,                      model = mod,                      pop_es = es,                      n = 50,                      iseed = 1234)  fit_all <- fit_model(data_all) boot_all <- gen_boot(fit_all,                      R = 10,                      iseed = 4567) #> Error in gen_boot(fit_all, R = 10, iseed = 4567): manymome 0.2.7.1 or later is required. If not available from CRAN, can be installed from GitHub: remotes::install_github('sfcheung/manymome') boot_all #> Error: object 'boot_all' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Monte Carlo Estimates — gen_mc","title":"Generate Monte Carlo Estimates — gen_mc","text":"Get list output lavaan::sem() generate Monte Carlo estimates model parameters.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Monte Carlo Estimates — gen_mc","text":"","code":"gen_mc(   fit_all,   R = 100,   ...,   iseed = NULL,   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1),   compute_implied_stats = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Monte Carlo Estimates — gen_mc","text":"fit_all output fit_model() object class fit_out. R number replications generate Monte Carlo estimates fit output. ... Optional arguments passed manymome::do_mc() generating Monte Carlo estimates. iseed seed random number generator. Default NULL seed changed. parallel TRUE, parallel processing used generate Monte Carlo estimates fit outputs. Default FALSE. progress TRUE, progress displayed. Default `FALSE. ncores number CPU cores use parallel processing used. compute_implied_stats Whether implied statistics computed Monte Carlo replication. Usually needed default FALSE Required manymome 0.2.7.1 .","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Monte Carlo Estimates — gen_mc","text":"mc_list object, list output manymome::do_mc().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Monte Carlo Estimates — gen_mc","text":"simply calls manymome::do_mc() output lavaan::sem() fit_all. simulated estimates can used test effects indirect effects, usually functions manymome package, manymome::indirect_effect(). function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/gen_mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Monte Carlo Estimates — gen_mc","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 5,                      model = mod,                      pop_es = es,                      n = 100,                      iseed = 1234)  fit_all <- fit_model(data_all) mc_all <- gen_mc(fit_all,                  R = 100,                  iseed = 4567) #> Error in gen_mc(fit_all, R = 100, iseed = 4567): manymome 0.2.7.1 or later is required. If not available from CRAN, can be installed from GitHub: remotes::install_github('sfcheung/manymome')"},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Rejection Rates of All Tests — get_rejection_rates","title":"Rejection Rates of All Tests — get_rejection_rates","text":"Get rejection rates tests stored power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rejection Rates of All Tests — get_rejection_rates","text":"","code":"get_rejection_rates(object)"},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rejection Rates of All Tests — get_rejection_rates","text":"object power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rejection Rates of All Tests — get_rejection_rates","text":"data frame number rows equal number tests. Note tests, test test_parameters(), conduct one test parameters. test counted one test. data frame columns: test: name test. label: label test, \"Test\" test test (e.g., test_indirect_effect()). pvalid: proportion valid tests across replications. reject: rejection rate test. null hypothesis false, power.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rejection Rates of All Tests — get_rejection_rates","text":"loops tests stored power4test object retrieve rejection rate test.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/get_rejection_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rejection Rates of All Tests — get_rejection_rates","text":"","code":"model_simple_med <- \" m ~ x y ~ m + x \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 4,                        model = model_simple_med,                        pop_es = model_simple_med_es,                        n = 100,                        R = 50,                        ci_type = \"boot\",                        fit_model_args = list(fit_function = \"lm\"),                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate bootstrap estimates: #> Error in (function (fit_all, R = 100, ..., iseed = NULL, parallel = FALSE,     progress = FALSE, ncores = max(1, parallel::detectCores(logical = FALSE) -         1), compute_implied_stats = FALSE) {    manymome_implied <- (utils::packageVersion(\"manymome\") >=         \"0.2.7.1\")    if (isFALSE(manymome_implied)) {        stop(\"manymome 0.2.7.1 or later is required. \", \"If not available from CRAN, can be installed from \",             \"GitHub: remotes::install_github('sfcheung/manymome')\")    }    out <- do_FUN(X = fit_all, FUN = gen_boot_i, R = R, ...,         compute_implied_stats = compute_implied_stats, iseed = iseed,         parallel = parallel, progress = progress, ncores = ncores)    class(out) <- c(\"boot_list\", class(out))    return(out)})(fit_all = structure(list(structure(list(structure(list(coefficients = c(`(Intercept)` = -0.162163556101855, x = 0.381643498727352), residuals = c(`1` = -1.02891939623224, `2` = 0.369927544884584, `3` = 1.18150850103973, `4` = -2.13269977299452, `5` = 0.54607568938771, `6` = 0.582823301857471, `7` = -0.536528599212876, `8` = -0.450107194088952, `9` = -0.37895613292409, `10` = -0.595890907128218, `11` = -0.327180970112896, `12` = -0.757559806722447, `13` = -0.700269466468762, `14` = 0.354861059446031, `15` = 1.11140598308799, `16` = 0.0225036595731381, `17` = -0.312920142056316, `18` = -0.657573174165112, `19` = -0.611568833816399, `20` = 2.4153259072552, `21` = 0.216990593320716, `22` = -0.359823025499872, `23` = -0.443707478345026, `24` = 0.504775492856876, `25` = -0.52309301110588, `26` = -1.16546994078507, `27` = 0.472116755960512, `28` = -0.869648338336119, `29` = 0.203592845087206, `30` = -0.745900371211713, `31` = 1.24017300106319, `32` = -0.269095512262804, `33` = -0.438384627936607, `34` = -0.325545820700387, `35` = -1.41794992536253, `36` = -0.86369992141114, `37` = -1.65349587362388, `38` = -1.09625356029597, `39` = -0.120984831451399, `40` = -0.33079296165556, `41` = 1.54006686383876, `42` = -0.891007962456657, `43` = -0.564176338388539, `44` = -0.163596562496548, `45` = -0.845069013317451, `46` = -0.782285892583889, `47` = -1.00496331000191, `48` = -1.06517708094993, `49` = -0.359120245332755, `50` = -0.333685137504015, `51` = -1.5963529997563, `52` = -0.47965371138881, `53` = -0.932568132746879, `54` = -0.860194348037319, `55` = 0.100107651626744, `56` = 0.729533287991846, `57` = 1.61349627537539, `58` = -0.475644807250584, `59` = 1.67303409894382, `60` = -0.97538125130945, `61` = 0.708841034164776, `62` = 2.62222957991707, `63` = 0.116053521744209, `64` = -0.332667853341695, `65` = 0.127264915571469, `66` = 1.91181477655679, `67` = -0.904515053651882, `68` = 1.56396083664396, `69` = 1.39906006439994, `70` = 0.428716263726975, `71` = 0.193608648596948, `72` = -0.421326216738374, `73` = -0.242224804841652, `74` = 0.703139844307859, `75` = 1.96975565691792, `76` = 0.0689899901416316, `77` = -1.23049910097789, `78` = -0.60863735961429, `79` = 0.409033380643567, `80` = -0.166340113604968, `81` = 0.0751714260964351, `82` = -0.0383865814028183, `83` = -1.08969933863606, `84` = -0.0700507542105684, `85` = 1.03948148465988, `86` = 0.801563125080648, `87` = 0.755940661139373, `88` = -0.201953297139293, `89` = 0.1061755903921, `90` = -0.987829219240167, `91` = 0.0309982288928266, `92` = 0.390644056580291, `93` = 1.93375063135342, `94` = 1.16820885033987, `95` = -0.445798065334064, `96` = 0.353578078790682, `97` = -0.824249421994278, `98` = 1.0298553597236, `99` = 1.06139576797319, `100` = 2.15952328320349), effects = c(`(Intercept)` = 1.03160069776609, x = -3.64599888184533, 1.27500732436696, -2.06292416578536, 0.633765165223547, 0.649848702490068, -0.519323799026206, -0.399285002967382, -0.278419354151304, -0.442535470506302, -0.244389599216476, -0.637090243642917, -0.666996366181346, 0.530899668081812, 1.23259000364195, 0.105113127895999, -0.203892667718701, -0.527622242608082, -0.49549720757565, 2.48837978974518, 0.277813307975264, -0.288181639733472, -0.446348930325404, 0.552782743621529, -0.434299780019235, -1.03305013068298, 0.439746133535828, -0.798799056305882, 0.337143068112276, -0.652446587473343, 1.35715043251755, -0.154406007815099, -0.293360807870069, -0.228885162417906, -1.33060482872912, -0.712043855290592, -1.40258503897119, -0.982477105486927, -0.0203031896822697, -0.256115430190999, 1.63938477933101, -0.808002071872941, -0.411588782295118, -0.0943017438591665, -0.776129360471778, -0.691832345454908, -0.965418039820098, -0.981759990237675, -0.269252075798816, -0.243986396229167, -1.51443062227054, -0.426426185603601, -0.851348391565509, -0.788690451490272, 0.254472602963892, 0.848633581803617, 1.64753019855426, -0.317249539968302, 1.76319216152499, -0.891988763940383, 0.76595108971, 2.74033434784101, 0.210790421280995, -0.149438228370686, 0.213715093059015, 2.04454745854697, -0.79148581619093, 1.72069211309991, 1.4833765563138, 0.500064487196743, 0.309675339771844, -0.403317815712275, -0.17105983324784, 0.76150097325963, 1.97743196182253, 0.201011213593256, -1.16569107873004, -0.552023543014061, 0.511358300341947, -0.0789900496187106, 0.223801413661506, 0.0420054043067462, -0.95538246921071, -0.00547588425801425, 1.17888449052902, 0.888897297641519, 0.896959467332088, -0.0885963788844137, 0.279717557723794, -0.891702160511232, 0.0876644088421379, 0.484247235641394, 2.11711720051178, 1.29882202589105, -0.420009554576227, 0.372286623206826, -0.66810422824765, 1.14878094743175, 1.14715391870612, 2.24686856483505), rank = 2L, fitted.values = c(`1` = 0.0230201053765451, `2` = 0.103753718353641, `3` = -0.0913633762961261, `4` = 0.105266834446051, `5` = -0.0432125178365934, `6` = 0.128061960370017, `7` = 0.54100070848192, `8` = 0.2623624904919, `9` = -0.149697569078722, `10` = -0.587485758180196, `11` = -0.00261450609647368, `12` = -0.314910732395471, `13` = 0.407818376906248, `14` = -0.775495548724141, `15` = -0.320832523229562, `16` = -0.00110680405492035, `17` = -0.220072818789834, `18` = -0.393497188488777, `19` = -0.27845837099825, `20` = 0.0780948036332267, `21` = 0.179473010413194, `22` = 0.0898023026100778, `23` = 0.705496648940698, `24` = 0.285694163265626, `25` = -0.0523610087702852, `26` = -0.413960523063491, `27` = 0.951907296660635, `28` = 0.0963676655775686, `29` = -0.423329966488225, `30` = -0.0909900650298809, `31` = -0.28596615026215, `32` = -0.267002635060713, `33` = -0.518429037078242, `34` = -0.117570289831362, `35` = -0.0403581259695307, `36` = -0.573400501857861, `37` = -1.39607504802844, `38` = -0.259434810277849, `39` = -0.150898268063125, `40` = 0.0646371662515893, `41` = -0.139595003620268, `42` = -0.00439255554438833, `43` = -0.581121169610443, `44` = 0.109251857291161, `45` = 0.112195653955342, `46` = -0.0661225616591611, `47` = 0.355831408444302, `48` = -0.00780079359818342, `49` = -0.0612706512224019, `50` = -0.059866342711915, `51` = 0.00458815802045431, `52` = 0.242425840272847, `53` = 0.0104119689202729, `54` = 0.0909418839400932, `55` = -0.595853135108152, `56` = -0.303561524794687, `57` = 0.401512285660445, `58` = -0.629258465553452, `59` = -0.0636734338250793, `60` = -0.0075968684418144, `61` = 0.210245437703276, `62` = -0.295310094459526, `63` = -0.101625188387245, `64` = -0.835098388845349, `65` = -0.0329405760313956, `66` = -0.416553766112156, `67` = -0.253241488769728, `68` = -0.615466454165699, `69` = -0.0152554931183555, `70` = 0.0922321824325046, `71` = -0.278417466635451, `72` = 0.534340051612166, `73` = 0.0937510681859702, `74` = 0.199875898161973, `75` = 0.619977775758168, `76` = -0.410656832000261, `77` = 0.146440732325572, `78` = 0.214358521184343, `79` = -0.164518600311842, `80` = -0.0403992979435084, `81` = -0.548318807153218, `82` = 0.0172728318005036, `83` = -0.429684325968855, `84` = 0.148373218407242, `85` = -0.471840839479934, `86` = -0.0402675816404924, `87` = -0.48523342320718, `88` = -0.255957475642901, `89` = -0.754802102130438, `90` = -0.113147542420406, `91` = 0.213924506828359, `92` = -0.0922283302653705, `93` = -0.836233452669913, `94` = -0.39898620715658, `95` = 0.469854502581412, `96` = 0.528536903267979, `97` = -0.610608699379285, `98` = -0.302113470795557, `99` = -0.0272047025342144, `100` = -0.0403596593292304), assign = 0:1,     qr = structure(list(qr = structure(c(-10, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     -1.54603672070928, -9.55341540994009, 8.934957939301e-05,     0.0540197585329628, 0.0132958425103953, 0.0602718520367406,     0.173529908743249, 0.0971068962795162, -0.0159101596560765,     -0.135983753556878, 0.0244307915478926, -0.0612237125864962,     0.13700155646129, -0.187549811758407, -0.0628479014647698,     0.0248443139022357, -0.0352122088315533, -0.0827778761065715,     -0.0512258045841844, 0.0465671970557438, 0.0743725283422573,     0.0497782509688831, 0.218646746622124, 0.103506150237026,     0.0107866560761248, -0.0883904215948894, 0.286230598319638,     0.0515789544743565, -0.0909602093892271, 0.000191738877454484,     -0.0532849876797372, -0.048083802540635, -0.117043341521699,     -0.00709850603562899, 0.0140787258736557, -0.132120544384635,     -0.357758174244302, -0.0460081505648358, -0.0162394792810444,     0.0428761269765269, -0.0131392960914282, 0.0239431201290207,     -0.134238117100037, 0.0551127437406525, 0.055920148449096,     0.00701223009991309, 0.12274292113345, 0.0230083315664773,     0.00834297939358907, 0.00872814366708335, 0.0264062897173497,     0.0916388062265203, 0.0280036053196163, 0.0500908076555266,     -0.13827870130621, -0.0581109284171713, 0.135271964256201,     -0.147440890195416, 0.00768396037560704, 0.0230642627839509,     0.0828125822992972, -0.0558477817178545, -0.00272519107837195,     -0.203897277035479, 0.0161131614778655, -0.0891016788203313,     -0.0443094880833525, -0.143658110267416, 0.0209637068252873,     0.0504447020296681, -0.0512145856112433, 0.171703068668525,     0.0508612917771386, 0.0799684948825576, 0.195191206465939,     -0.0874843074762922, 0.0653126577394162, 0.083940691115114,     -0.0199751722118728, 0.0140674335021241, -0.125241306206715,     0.029885356549545, -0.092703040280446, 0.0658426869973222,     -0.104265444679688, 0.0141035597619734, -0.107938672281027,     -0.045054410657711, -0.18187415269643, -0.00588546468419628,     0.0838216525827256, -0.000147884165672395, -0.204208594691174,     -0.0842833671518745, 0.154016406900237, 0.170111420252755,     -0.142325758024907, -0.057713765925888, 0.0176863582020175,     0.0140783053140917), dim = c(100L, 2L), dimnames = list(c(\"1\",     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",     \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",     \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\",     \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\",     \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\",     \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\",     \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\",     \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",     \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\",     \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\",     \"x\")), assign = 0:1), qraux = c(1.1, 1.05360475124924), pivot = 1:2,         tol = 1e-07, rank = 2L), class = \"qr\"), df.residual = 98L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = m ~         x, data = structure(list(m = c(-1.0058992908557, 0.473681263238225,     1.0901451247436, -2.02743293854847, 0.502863171551116, 0.710885262227487,     0.00447210926904418, -0.187744703597052, -0.528653702002812,     -1.18337666530841, -0.32979547620937, -1.07247053911792,     -0.292451089562514, -0.42063448927811, 0.790573459858427,     0.0213968555182177, -0.532992960846149, -1.05107036265389,     -0.890027204814649, 2.49342071088843, 0.39646360373391, -0.270020722889794,     0.261789170595672, 0.790469656122502, -0.575454019876166,     -1.57943046384856, 1.42402405262115, -0.773280672758551,     -0.219737121401019, -0.836890436241594, 0.95420685080104,     -0.536098147323517, -0.956813665014848, -0.443116110531749,     -1.45830805133207, -1.437100423269, -3.04957092165232, -1.35568837057382,     -0.271883099514524, -0.26615579540397, 1.40047186021849,     -0.895400518001046, -1.14529750799898, -0.0543447052053874,     -0.732873359362109, -0.84840845424305, -0.64913190155761,     -1.07297787454812, -0.420390896555157, -0.39355148021593,     -1.59176484173585, -0.237227871115963, -0.922156163826606,     -0.769252464097226, -0.495745483481408, 0.425971763197159,     2.01500856103583, -1.10490327280404, 1.60936066511874, -0.982978119751264,     0.919086471868052, 2.32691948545754, 0.0144283333569641,     -1.16776624218704, 0.0943243395400734, 1.49526101044463,     -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479,     -0.0848088180385032, 0.113013834873792, -0.148473736655682,     0.903015742469832, 2.58973343267609, -0.341666841858629,     -1.08405836865232, -0.394278838429946, 0.244514780331725,     -0.206739411548476, -0.473147381056783, -0.0211137496023147,     -1.51938366460491, 0.0783224641966739, 0.567640645179946,     0.761295543440156, 0.270707237932193, -0.457910772782194,     -0.648626511738338, -1.10097676166057, 0.244922735721186,     0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475,     0.882114982058661, -1.43485812137356, 0.727741888928042,     1.03419106543897, 2.11916362387426), y = c(-0.1439617341926,     -0.174277626103084, 0.602224604404354, -1.44887499366459,     -0.463904174168501, 0.500059589539494, -0.773951880206804,     0.0517804664566934, 0.0430846805746435, -0.636812687531766,     -0.334582095393778, -1.0983461632776, -1.10731215946008,     0.525175789638999, 0.414653245603842, 0.730487316463909,     -1.34408136930753, -0.379154013094857, 0.137965520381119,     1.22395434592039, 0.0324813218120451, -0.812161380874894,     1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755,     0.165195533219977, -1.69718629157368, -0.660747173763155,     -0.222462342062906, 1.35498501787693, -0.0491610358843584,     -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034,     -1.79855196419749, -2.36507475508984, 0.660851637576232,     -0.67250052216282, 0.410951705416395, 0.760533257966452,     -0.0212725401002647, -0.121076956771822, 0.0784949379362682,     -0.0784246990073527, 1.11550997554267, -0.297558241032477,     0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841,     0.958116411077828, -1.14291155805925, -0.142425489752799,     1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468,     -0.829348978252946, -0.274283453294785, 0.937739407943759,     -0.351683826842485, -0.742409762101558, 0.399683091299982,     1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831,     1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296,     -1.12659429205047, 2.51705580505852, -0.896201086603481,     -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923,     -2.60274520612392, -0.0969780594504372, 0.0855764450401389,     0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257,     -0.669534565586153, 0.285524667523424, -0.722321914484456,     -0.343521604348032, -2.32395167916648, -0.135095644737079,     0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562,     -0.472625773108594, 0.657958641995046, -0.740224694435862    ), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057,     0.700733515544461, 0.311681028661359, 0.760462361967838,     1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736,     0.418057822385083, -0.400235237343163, 1.49349310261748,     -1.60708093984972, -0.415751788401515, 0.42200837321742,     -0.151736536534977, -0.60615111526422, -0.304721068966714,     0.629536099884472, 0.895171980275539, 0.660212631820405,     2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306,     2.91914013071762, 0.677415500438328, -0.684320344136007,     0.186492083080971, -0.324393300483657, -0.274704218225806,     -0.933503340589868, 0.116845344986082, 0.319160238648117,     -1.07754212275943, -3.23315213292314, -0.254874652654534,     0.0295178303214797, 0.594273774110513, 0.0591351681787969,     0.413398894737046, -1.09777217457042, 0.711175257270441,     0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607,     0.264364269837939, 0.268043904143697, 0.436930577039483,     1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084,     -0.370497517092117, 1.47696958979247, -1.22390375051376,     0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909,     0.158625439491262, -1.76325506654115, 0.338596047099905,     -0.666565029559273, -0.238646624327644, -1.18776528245719,     0.384935321768578, 0.66657951565448, -0.304613889457735,     1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091,     -0.651113609237535, 0.808619272846293, 0.986580613954563,     -0.00617079609070003, 0.319052357931912, -1.01182190274184,     0.470167547726389, -0.700970331629097, 0.813682862526491,     -0.811430783992772, 0.31939748709946, -0.846522653163624,     -0.245763179128733, -1.55285901110546, 0.128434032925753,     0.985443389404868, 0.183247523067191, -1.76622921343046,     -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214,     -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = m ~ x, model = structure(list(        m = c(-1.0058992908557, 0.473681263238225, 1.0901451247436,         -2.02743293854847, 0.502863171551116, 0.710885262227487,         0.00447210926904418, -0.187744703597052, -0.528653702002812,         -1.18337666530841, -0.32979547620937, -1.07247053911792,         -0.292451089562514, -0.42063448927811, 0.790573459858427,         0.0213968555182177, -0.532992960846149, -1.05107036265389,         -0.890027204814649, 2.49342071088843, 0.39646360373391,         -0.270020722889794, 0.261789170595672, 0.790469656122502,         -0.575454019876166, -1.57943046384856, 1.42402405262115,         -0.773280672758551, -0.219737121401019, -0.836890436241594,         0.95420685080104, -0.536098147323517, -0.956813665014848,         -0.443116110531749, -1.45830805133207, -1.437100423269,         -3.04957092165232, -1.35568837057382, -0.271883099514524,         -0.26615579540397, 1.40047186021849, -0.895400518001046,         -1.14529750799898, -0.0543447052053874, -0.732873359362109,         -0.84840845424305, -0.64913190155761, -1.07297787454812,         -0.420390896555157, -0.39355148021593, -1.59176484173585,         -0.237227871115963, -0.922156163826606, -0.769252464097226,         -0.495745483481408, 0.425971763197159, 2.01500856103583,         -1.10490327280404, 1.60936066511874, -0.982978119751264,         0.919086471868052, 2.32691948545754, 0.0144283333569641,         -1.16776624218704, 0.0943243395400734, 1.49526101044463,         -1.15775654242161, 0.948494382478262, 1.38380457128159,         0.520948446159479, -0.0848088180385032, 0.113013834873792,         -0.148473736655682, 0.903015742469832, 2.58973343267609,         -0.341666841858629, -1.08405836865232, -0.394278838429946,         0.244514780331725, -0.206739411548476, -0.473147381056783,         -0.0211137496023147, -1.51938366460491, 0.0783224641966739,         0.567640645179946, 0.761295543440156, 0.270707237932193,         -0.457910772782194, -0.648626511738338, -1.10097676166057,         0.244922735721186, 0.298415726314921, 1.09751717868351,         0.769222643183293, 0.0240564372473475, 0.882114982058661,         -1.43485812137356, 0.727741888928042, 1.03419106543897,         2.11916362387426), x = c(0.485226820569252, 0.696768778564913,         0.185513915583057, 0.700733515544461, 0.311681028661359,         0.760462361967838, 1.84246362620766, 1.1123628412626,         0.0326639575014441, -1.11444896479736, 0.418057822385083,         -0.400235237343163, 1.49349310261748, -1.60708093984972,         -0.415751788401515, 0.42200837321742, -0.151736536534977,         -0.60615111526422, -0.304721068966714, 0.629536099884472,         0.895171980275539, 0.660212631820405, 2.27348352044748,         1.17349757263239, 0.287709728313787, -0.659770093821306,         2.91914013071762, 0.677415500438328, -0.684320344136007,         0.186492083080971, -0.324393300483657, -0.274704218225806,         -0.933503340589868, 0.116845344986082, 0.319160238648117,         -1.07754212275943, -3.23315213292314, -0.254874652654534,         0.0295178303214797, 0.594273774110513, 0.0591351681787969,         0.413398894737046, -1.09777217457042, 0.711175257270441,         0.718888729854143, 0.251651069028968, 1.35727443615177,         0.404468471278607, 0.264364269837939, 0.268043904143697,         0.436930577039483, 1.06012390548736, 0.452190396528715,         0.663198615687065, -1.13637355399084, -0.370497517092117,         1.47696958979247, -1.22390375051376, 0.258068387396106,         0.405002805433516, 0.97580332180945, -0.348876736539909,         0.158625439491262, -1.76325506654115, 0.338596047099905,         -0.666565029559273, -0.238646624327644, -1.18776528245719,         0.384935321768578, 0.66657951565448, -0.304613889457735,         1.8250110640863, 0.670559370567588, 0.948632573255153,         2.04940300167091, -0.651113609237535, 0.808619272846293,         0.986580613954563, -0.00617079609070003, 0.319052357931912,         -1.01182190274184, 0.470167547726389, -0.700970331629097,         0.813682862526491, -0.811430783992772, 0.31939748709946,         -0.846522653163624, -0.245763179128733, -1.55285901110546,         0.128434032925753, 0.985443389404868, 0.183247523067191,         -1.76622921343046, -0.620533696615944, 1.65604303699874,         1.80980538558388, -1.17503676801214, -0.366703258827641,         0.353625448927287, 0.319156220867898)), terms = m ~ x, row.names = c(NA,     100L), class = \"data.frame\")), class = \"lm\"), structure(list(    coefficients = c(`(Intercept)` = 0.0173368017594537, m = 0.469027749026988,     x = 0.0982236710940749), residuals = c(`1` = 0.26283538455622,     `2` = -0.482223271849802, `3` = 0.0553576308460588, `4` = -0.584118106308919,     `5` = -0.747712212194643, `6` = 0.0746024684996695, `7` = -0.974359766533538,     `8` = 0.013240778559656, `9` = 0.2704927608621, `10` = 0.0103522728588377,     `11` = -0.238298841351725, `12` = -0.573351947863765, `13` = -1.13417766027431,     `14` = 0.862981625206129, `15` = 0.0673522204472366, `16` = 0.661663584074636,     `17` = -1.09652556273652, `18` = 0.156028739189242, `19` = 0.568006997122283,     `20` = -0.024701306061237, `21` = -0.258734989741068, `22` = -0.767699479186789,     `23` = 1.54988206709068, `24` = 0.54183390722267, `25` = 1.51639091784314,     `26` = 0.0678834052165448, `27` = -0.806776724577784, `28` = -1.4183712373322,     `29` = -0.507804711688819, `30` = 0.134407756640055, `31` = 0.921961825631964,     `32` = 0.211929526432042, `33` = -0.970216360478105, `34` = 0.536585512497517,     `35` = -1.52288230341222, `36` = -0.272844234652265, `37` = -0.06798330937485,     `38` = -1.72152136796443, `39` = 0.768136204323648, `40` = -0.623374622041528,     `41` = -0.269053733826263, `42` = 1.12255858857532, `43` = 0.606394183294495,     `44` = -0.182778828337633, `45` = 0.33428418808584, `46` = 0.277447514947504,     `47` = 1.26931757059142, `48` = 0.148632976372341, `49` = 0.382120869734528,     `50` = 0.245134606251191, `51` = -0.43625165321347, `52` = -0.0442726097766103,     `53` = 1.32888063830879, `54` = -0.86458941084701, `55` = 0.184374878902528,     `56` = 1.21188788442317, `57` = -0.303188647636594, `58` = -0.843598095372872,     `59` = -0.746094402012601, `60` = -0.425422627515763, `61` = -0.818544298649585,     `62` = -0.136719248424613, `63` = -0.391368690314309, `64` = -0.0388384061874185,     `65` = 0.304847410123495, `66` = 0.63539541882084, `67` = 1.42361442640392,     `68` = 0.0692164216761421, `69` = -0.29014253462797, `70` = 1.2072525772318,     `71` = 1.48594932766722, `72` = -0.155645360317152, `73` = -0.37588985978219,     `74` = -1.66064870870102, `75` = 1.08376227441573, `76` = -0.689331889610198,     `77` = -1.10354521089326, `78` = 2.50952450590145, `79` = 0.194376913004927,     `80` = -0.083881281819924, `81` = -2.2987778950076, `82` = -0.150593509327382,     `83` = 0.849724622699344, `84` = 0.263587098012147, `85` = 0.870040185597946,     `86` = 1.69283232125337, `87` = 1.0866738463285, `88` = -0.44795874665859,     `89` = 0.724939211286123, `90` = -0.235885326198613, `91` = -0.572527832891059,     `92` = -2.49925298174823, `93` = -0.493712940996171, `94` = 0.489898719108126,     `95` = 1.69831690912372, `96` = 0.265832811419256, `97` = 0.590756629481588,     `98` = -0.795274774620404, `99` = 0.120823142963001, `100` = -1.78285673618709    ), effects = c(`(Intercept)` = 0.158623933219053, m = -5.1094562155273,     x = 0.876084087117251, -0.682558552992273, -0.740659231358059,     0.0949934167127173, -0.973975511091415, -0.00176016106641896,     0.230293185505339, -0.0692518609718502, -0.266171258689074,     -0.641236374836041, -1.15000197946638, 0.811535608018228,     0.0797711168750406, 0.64899542708517, -1.13870184294982,     0.0870703687440155, 0.508928037548435, 0.071396405477279,     -0.250614913603245, -0.790640844334237, 1.56556070215087,     0.569669495752103, 1.4766451322183, -0.0244120113554683,     -0.734642930932198, -1.46287850598974, -0.541621210236563,     0.0823899147802988, 0.942333574526576, 0.168425942854134,     -1.03828078022056, 0.500896649908742, -1.60044817209318,     -0.363047078754715, -0.248736065806844, -1.8002258067372,     0.738994509328217, -0.646788917046678, -0.225688887198537,     1.07021581627094, 0.528596285899469, -0.195911905320262,     0.291924305787828, 0.225564543649497, 1.23676852114008, 0.0885350291346339,     0.348844815177458, 0.213053292946001, -0.518437957317708,     -0.0619173327082653, 1.2757588581328, -0.909060677509101,     0.134252738277095, 1.20900090478045, -0.219527722360395,     -0.92087551318629, -0.69177854417807, -0.481628831038727,     -0.787072821002821, -0.0573057066994652, -0.406893495358445,     -0.124064064440853, 0.29451917532158, 0.675811866759109,     1.35361496401876, 0.0809638105167902, -0.244336069973944,     1.21853028816934, 1.46164404326752, -0.150743177394335, -0.393481928256776,     -1.63013488065557, 1.19779674804118, -0.728091594650031,     -1.16020000910437, 2.48438405513989, 0.187189095950883, -0.107400326066066,     -2.34671557820162, -0.164630139416014, 0.759622489646881,     0.257177809655108, 0.868992483360778, 1.71112034884744, 1.0724628291245,     -0.487805051028562, 0.664173701572422, -0.299870862002188,     -0.570075970897387, -2.50227512672634, -0.481143222138844,     0.499408512096018, 1.69773797653045, 0.303800391565757, 0.499704584416232,     -0.785093264210686, 0.151228048102168, -1.7059327322752),     rank = 3L, fitted.values = c(`1` = -0.40679711874882, `2` = 0.307945645746718,     `3` = 0.546866973558295, `4` = -0.864756887355671, `5` = 0.283808038026142,     `6` = 0.425457121039825, `7` = 0.200407886326734, `8` = 0.0385396878970374,     `9` = -0.227408080287456, `10` = -0.647164960390603, `11` = -0.0962832540420531,     `12` = -0.524994215413838, `13` = 0.0268655008142267, `14` = -0.33780583556713,     `15` = 0.347301025156606, `16` = 0.0688237323892725, `17` = -0.247555806571011,     `18` = -0.535182752284099, `19` = -0.430041476741165, `20` = 1.24865565198162,     `21` = 0.291216311553113, `22` = -0.0444619016881054, `23` = 0.363433084713817,     `24` = 0.503354244848667, `25` = -0.224307196127137, `26` = -0.7882649541373,     `27` = 0.971972257797761, `28` = -0.278815054241482, `29` = -0.152942462074336,     `30` = -0.356870098702961, `31` = 0.433023192244968, `32` = -0.261090562316401,     `33` = -0.523127482872042, `34` = -0.17901997138606, `35` = -0.635301050637479,     `36` = -0.762543317948071, `37` = -1.73056865482264, `38` = -0.643553387125407,     `39` = -0.107284566747416, `40` = -0.0491259001212924, `41` = 0.680005439242658,     `42` = -0.36202533060887, `43` = -0.62766672339476, `44` = 0.0617018715658115,     `45` = -0.255789250149572, `46` = -0.355872213954857, `47` = -0.153807595048752,     `48` = -0.446191217404818, `49` = -0.153871365073662, `50` = -0.140921506853081,     `51` = -0.68632815365014, `52` = 0.0101996091750262, `53` = -0.370764227230966,     `54` = -0.27832214721224, `55` = -0.326800368655327, `56` = 0.180737752740847,     `57` = 1.10750510661593, `58` = -0.621109812617643, `59` = 0.797520036296048,     `60` = -0.403926350737183, `61` = 0.544260845354799, `62` = 1.07445865636837,     `63` = 0.0396848634718244, `64` = -0.70357135591414, `65` = 0.0948356811764866,     `66` = 0.653183243469876, `67` = -0.549123890789492, `68` = 0.34554032049694,     `69` = 0.704189305358801, `70` = 0.327149965924435, `71` = -0.0523611817515683,     `72` = 0.249602712841076, `73` = 0.0135633023298941, `74` = 0.534054416650553,     `75` = 1.43329353064279, `76` = -0.206869196993283, `77` = -0.41169110120703,     `78` = -0.0706853445854567, `79` = 0.13141490053667, `80` = -0.048291225206999,     `81` = -0.30396731111632, `82` = 0.0536154498769452, `83` = -0.764148177659205,     `84` = 0.133995128703554, `85` = 0.203874305381917, `86` = 0.405777930564599,     `87` = 0.061157445554076, `88` = -0.221575818927562, `89` = -0.439414543762699,     `90` = -0.486436588285842, `91` = 0.229006228543027, `92` = 0.17530130258175,     `93` = 0.358617296259092, `94` = 0.317172468873109, `95` = 0.191282564954983,     `96` = 0.608838935115286, `97` = -0.77106789810615, `98` = 0.32264900151181,     `99` = 0.537135499032045, `100` = 1.04263204175123), assign = 0:2,     qr = structure(list(qr = structure(cdim = c(100L, 3L), dimnames = list(c(\"1\", \"2\", \"3\", \"4\",     \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",     \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\",     \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\",     \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\",     \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\",     \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\",     \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\",     \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\",     \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\",     \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\", \"m\", \"x\"    )), assign = 0:2), qraux = c(1.1, 1.06474514597053, 1.05182700602575    ), pivot = 1:3, tol = 1e-07, rank = 3L), class = \"qr\"), df.residual = 97L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = y ~         m + x, data = structure(list(m = c(-1.0058992908557,     0.473681263238225, 1.0901451247436, -2.02743293854847, 0.502863171551116,     0.710885262227487, 0.00447210926904418, -0.187744703597052,     -0.528653702002812, -1.18337666530841, -0.32979547620937,     -1.07247053911792, -0.292451089562514, -0.42063448927811,     0.790573459858427, 0.0213968555182177, -0.532992960846149,     -1.05107036265389, -0.890027204814649, 2.49342071088843,     0.39646360373391, -0.270020722889794, 0.261789170595672,     0.790469656122502, -0.575454019876166, -1.57943046384856,     1.42402405262115, -0.773280672758551, -0.219737121401019,     -0.836890436241594, 0.95420685080104, -0.536098147323517,     -0.956813665014848, -0.443116110531749, -1.45830805133207,     -1.437100423269, -3.04957092165232, -1.35568837057382, -0.271883099514524,     -0.26615579540397, 1.40047186021849, -0.895400518001046,     -1.14529750799898, -0.0543447052053874, -0.732873359362109,     -0.84840845424305, -0.64913190155761, -1.07297787454812,     -0.420390896555157, -0.39355148021593, -1.59176484173585,     -0.237227871115963, -0.922156163826606, -0.769252464097226,     -0.495745483481408, 0.425971763197159, 2.01500856103583,     -1.10490327280404, 1.60936066511874, -0.982978119751264,     0.919086471868052, 2.32691948545754, 0.0144283333569641,     -1.16776624218704, 0.0943243395400734, 1.49526101044463,     -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479,     -0.0848088180385032, 0.113013834873792, -0.148473736655682,     0.903015742469832, 2.58973343267609, -0.341666841858629,     -1.08405836865232, -0.394278838429946, 0.244514780331725,     -0.206739411548476, -0.473147381056783, -0.0211137496023147,     -1.51938366460491, 0.0783224641966739, 0.567640645179946,     0.761295543440156, 0.270707237932193, -0.457910772782194,     -0.648626511738338, -1.10097676166057, 0.244922735721186,     0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475,     0.882114982058661, -1.43485812137356, 0.727741888928042,     1.03419106543897, 2.11916362387426), y = c(-0.1439617341926,     -0.174277626103084, 0.602224604404354, -1.44887499366459,     -0.463904174168501, 0.500059589539494, -0.773951880206804,     0.0517804664566934, 0.0430846805746435, -0.636812687531766,     -0.334582095393778, -1.0983461632776, -1.10731215946008,     0.525175789638999, 0.414653245603842, 0.730487316463909,     -1.34408136930753, -0.379154013094857, 0.137965520381119,     1.22395434592039, 0.0324813218120451, -0.812161380874894,     1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755,     0.165195533219977, -1.69718629157368, -0.660747173763155,     -0.222462342062906, 1.35498501787693, -0.0491610358843584,     -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034,     -1.79855196419749, -2.36507475508984, 0.660851637576232,     -0.67250052216282, 0.410951705416395, 0.760533257966452,     -0.0212725401002647, -0.121076956771822, 0.0784949379362682,     -0.0784246990073527, 1.11550997554267, -0.297558241032477,     0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841,     0.958116411077828, -1.14291155805925, -0.142425489752799,     1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468,     -0.829348978252946, -0.274283453294785, 0.937739407943759,     -0.351683826842485, -0.742409762101558, 0.399683091299982,     1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831,     1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296,     -1.12659429205047, 2.51705580505852, -0.896201086603481,     -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923,     -2.60274520612392, -0.0969780594504372, 0.0855764450401389,     0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257,     -0.669534565586153, 0.285524667523424, -0.722321914484456,     -0.343521604348032, -2.32395167916648, -0.135095644737079,     0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562,     -0.472625773108594, 0.657958641995046, -0.740224694435862    ), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057,     0.700733515544461, 0.311681028661359, 0.760462361967838,     1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736,     0.418057822385083, -0.400235237343163, 1.49349310261748,     -1.60708093984972, -0.415751788401515, 0.42200837321742,     -0.151736536534977, -0.60615111526422, -0.304721068966714,     0.629536099884472, 0.895171980275539, 0.660212631820405,     2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306,     2.91914013071762, 0.677415500438328, -0.684320344136007,     0.186492083080971, -0.324393300483657, -0.274704218225806,     -0.933503340589868, 0.116845344986082, 0.319160238648117,     -1.07754212275943, -3.23315213292314, -0.254874652654534,     0.0295178303214797, 0.594273774110513, 0.0591351681787969,     0.413398894737046, -1.09777217457042, 0.711175257270441,     0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607,     0.264364269837939, 0.268043904143697, 0.436930577039483,     1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084,     -0.370497517092117, 1.47696958979247, -1.22390375051376,     0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909,     0.158625439491262, -1.76325506654115, 0.338596047099905,     -0.666565029559273, -0.238646624327644, -1.18776528245719,     0.384935321768578, 0.66657951565448, -0.304613889457735,     1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091,     -0.651113609237535, 0.808619272846293, 0.986580613954563,     -0.00617079609070003, 0.319052357931912, -1.01182190274184,     0.470167547726389, -0.700970331629097, 0.813682862526491,     -0.811430783992772, 0.31939748709946, -0.846522653163624,     -0.245763179128733, -1.55285901110546, 0.128434032925753,     0.985443389404868, 0.183247523067191, -1.76622921343046,     -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214,     -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = y ~ m + x, model = structure(list(        y = c(-0.1439617341926, -0.174277626103084, 0.602224604404354,         -1.44887499366459, -0.463904174168501, 0.500059589539494,         -0.773951880206804, 0.0517804664566934, 0.0430846805746435,         -0.636812687531766, -0.334582095393778, -1.0983461632776,         -1.10731215946008, 0.525175789638999, 0.414653245603842,         0.730487316463909, -1.34408136930753, -0.379154013094857,         0.137965520381119, 1.22395434592039, 0.0324813218120451,         -0.812161380874894, 1.9133151518045, 1.04518815207134,         1.292083721716, -0.720381548920755, 0.165195533219977,         -1.69718629157368, -0.660747173763155, -0.222462342062906,         1.35498501787693, -0.0491610358843584, -1.49334384335015,         0.357565541111457, -2.1581833540497, -1.03538755260034,         -1.79855196419749, -2.36507475508984, 0.660851637576232,         -0.67250052216282, 0.410951705416395, 0.760533257966452,         -0.0212725401002647, -0.121076956771822, 0.0784949379362682,         -0.0784246990073527, 1.11550997554267, -0.297558241032477,         0.228249504660866, 0.10421309939811, -1.12257980686361,         -0.0340730006015841, 0.958116411077828, -1.14291155805925,         -0.142425489752799, 1.39262563716402, 0.804316458979331,         -1.46470790799051, 0.0514256342834468, -0.829348978252946,         -0.274283453294785, 0.937739407943759, -0.351683826842485,         -0.742409762101558, 0.399683091299982, 1.28857866229072,         0.874490535614432, 0.414756742173082, 0.414046770730831,         1.53440254315624, 1.43358814591565, 0.0939573525239246,         -0.362326557452296, -1.12659429205047, 2.51705580505852,         -0.896201086603481, -1.51523631210029, 2.438839161316,         0.325791813541597, -0.132172507026923, -2.60274520612392,         -0.0969780594504372, 0.0855764450401389, 0.397582226715701,         1.07391449097986, 2.09861025181797, 1.14783129188257,         -0.669534565586153, 0.285524667523424, -0.722321914484456,         -0.343521604348032, -2.32395167916648, -0.135095644737079,         0.807071187981235, 1.8895994740787, 0.874671746534542,         -0.180311268624562, -0.472625773108594, 0.657958641995046,         -0.740224694435862), m = c(-1.0058992908557, 0.473681263238225,         1.0901451247436, -2.02743293854847, 0.502863171551116,         0.710885262227487, 0.00447210926904418, -0.187744703597052,         -0.528653702002812, -1.18337666530841, -0.32979547620937,         -1.07247053911792, -0.292451089562514, -0.42063448927811,         0.790573459858427, 0.0213968555182177, -0.532992960846149,         -1.05107036265389, -0.890027204814649, 2.49342071088843,         0.39646360373391, -0.270020722889794, 0.261789170595672,         0.790469656122502, -0.575454019876166, -1.57943046384856,         1.42402405262115, -0.773280672758551, -0.219737121401019,         -0.836890436241594, 0.95420685080104, -0.536098147323517,         -0.956813665014848, -0.443116110531749, -1.45830805133207,         -1.437100423269, -3.04957092165232, -1.35568837057382,         -0.271883099514524, -0.26615579540397, 1.40047186021849,         -0.895400518001046, -1.14529750799898, -0.0543447052053874,         -0.732873359362109, -0.84840845424305, -0.64913190155761,         -1.07297787454812, -0.420390896555157, -0.39355148021593,         -1.59176484173585, -0.237227871115963, -0.922156163826606,         -0.769252464097226, -0.495745483481408, 0.425971763197159,         2.01500856103583, -1.10490327280404, 1.60936066511874,         -0.982978119751264, 0.919086471868052, 2.32691948545754,         0.0144283333569641, -1.16776624218704, 0.0943243395400734,         1.49526101044463, -1.15775654242161, 0.948494382478262,         1.38380457128159, 0.520948446159479, -0.0848088180385032,         0.113013834873792, -0.148473736655682, 0.903015742469832,         2.58973343267609, -0.341666841858629, -1.08405836865232,         -0.394278838429946, 0.244514780331725, -0.206739411548476,         -0.473147381056783, -0.0211137496023147, -1.51938366460491,         0.0783224641966739, 0.567640645179946, 0.761295543440156,         0.270707237932193, -0.457910772782194, -0.648626511738338,         -1.10097676166057, 0.244922735721186, 0.298415726314921,         1.09751717868351, 0.769222643183293, 0.0240564372473475,         0.882114982058661, -1.43485812137356, 0.727741888928042,         1.03419106543897, 2.11916362387426), x = c(0.485226820569252,         0.696768778564913, 0.185513915583057, 0.700733515544461,         0.311681028661359, 0.760462361967838, 1.84246362620766,         1.1123628412626, 0.0326639575014441, -1.11444896479736,         0.418057822385083, -0.400235237343163, 1.49349310261748,         -1.60708093984972, -0.415751788401515, 0.42200837321742,         -0.151736536534977, -0.60615111526422, -0.304721068966714,         0.629536099884472, 0.895171980275539, 0.660212631820405,         2.27348352044748, 1.17349757263239, 0.287709728313787,         -0.659770093821306, 2.91914013071762, 0.677415500438328,         -0.684320344136007, 0.186492083080971, -0.324393300483657,         -0.274704218225806, -0.933503340589868, 0.116845344986082,         0.319160238648117, -1.07754212275943, -3.23315213292314,         -0.254874652654534, 0.0295178303214797, 0.594273774110513,         0.0591351681787969, 0.413398894737046, -1.09777217457042,         0.711175257270441, 0.718888729854143, 0.251651069028968,         1.35727443615177, 0.404468471278607, 0.264364269837939,         0.268043904143697, 0.436930577039483, 1.06012390548736,         0.452190396528715, 0.663198615687065, -1.13637355399084,         -0.370497517092117, 1.47696958979247, -1.22390375051376,         0.258068387396106, 0.405002805433516, 0.97580332180945,         -0.348876736539909, 0.158625439491262, -1.76325506654115,         0.338596047099905, -0.666565029559273, -0.238646624327644,         -1.18776528245719, 0.384935321768578, 0.66657951565448,         -0.304613889457735, 1.8250110640863, 0.670559370567588,         0.948632573255153, 2.04940300167091, -0.651113609237535,         0.808619272846293, 0.986580613954563, -0.00617079609070003,         0.319052357931912, -1.01182190274184, 0.470167547726389,         -0.700970331629097, 0.813682862526491, -0.811430783992772,         0.31939748709946, -0.846522653163624, -0.245763179128733,         -1.55285901110546, 0.128434032925753, 0.985443389404868,         0.183247523067191, -1.76622921343046, -0.620533696615944,         1.65604303699874, 1.80980538558388, -1.17503676801214,         -0.366703258827641, 0.353625448927287, 0.319156220867898        )), terms = y ~ m + x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\")), class = c(\"lm_list_lmhelprs\", \"lm_list\", \"list\"), cases_removed = integer(0), call = (function (models,     data, na_omit_all = TRUE, ...) {    my_call <- match.call()    my_call$na_omit_all <- NULL    my_call[[1L]] <- quote(stats::lm)    my_mm <- my_call    my_mm[[1L]] <- quote(stats::model.frame)    my_mm$models <- NULL    if (is.null(my_call$data) && na_omit_all) {        stop(\"The argument 'data' must be set if na_omit_all is TRUE.\")    }    models1 <- parse_models(models)    data_full <- eval(my_call$data, envir = parent.frame())    if (na_omit_all) {        all_vars <- sapply(models1, function(x) {            all.vars(stats::as.formula(x))        }, USE.NAMES = FALSE)        all_vars <- unique(unlist(all_vars))        if (!is.null(my_call$subset)) {            all_ys <- sapply(models1, function(x) {                all.vars(stats::as.formula(x))[1]            }, USE.NAMES = FALSE)            ys1 <- all_ys[1]            f0 <- paste(ys1, \"~\", paste(setdiff(all_vars, ys1),                 collapse = \" + \"))            my_mm0 <- my_mm            my_mm0$formula <- f0            my_mm0$na.action <- \"na.pass\"            data_selected <- tryCatch(eval(my_mm0, envir = parent.frame()),                 error = function(e) e)            if (inherits(data_selected, \"error\")) {                subset_i <- eval(my_mm0$subset, envir = parent.frame())                if (is.logical(subset_i)) {                  subset_i <- sapply(subset_i, isTRUE)                  omitted_subset <- which(!subset_i)                }                else if (is.character(subset_i)) {                  omitted_subset <- !(row.names(data_full) %in%                     subset_i)                  omitted_subset[is.na(omitted_subset)] <- TRUE                  omitted_subset <- which(omitted_subset)                }                else {                  omitted_subset <- setdiff(seq_len(nrow(data_full)),                     subset_i)                }            }            else {                subset_i <- match(row.names(data_selected), row.names(data_full))                subset_i <- stats::na.omit(subset_i)                omitted_subset <- setdiff(seq_len(nrow(data_full)),                   subset_i)            }        }        else {            omitted_subset <- numeric(0)        }        data <- stats::na.omit(eval(my_call$data, envir = parent.frame())[,             all_vars])        data_omitted <- attr(data, \"na.action\")        if (!is.null(data_omitted)) {            omitted_listwise <- as.numeric(data_omitted)        }        else {            omitted_listwise <- numeric(0)        }        omitted <- c(omitted_subset, omitted_listwise)        omitted <- unique(sort(omitted))        selected <- !logical(nrow(data_full))        selected[omitted] <- FALSE        my_call$subset <- which(selected)    }    else {        selected <- !logical(nrow(data_full))    }    tmpfct <- function(x, env = parent.frame()) {        call0 <- my_call        call0$models <- NULL        call0$formula <- stats::as.formula(x, env = env)        outtmp <- eval(call0, envir = env)        outtmp    }    out1 <- lapply(models1, tmpfct, env = parent.frame())    out2 <- lm2list_free(out1)    attr(out2, \"cases_removed\") <- which(!selected)    attr(out2, \"call\") <- match.call()    out2})(models = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(m = c(-1.0058992908557, 0.473681263238225, 1.0901451247436, -2.02743293854847, 0.502863171551116, 0.710885262227487, 0.00447210926904418, -0.187744703597052, -0.528653702002812, -1.18337666530841, -0.32979547620937, -1.07247053911792, -0.292451089562514, -0.42063448927811, 0.790573459858427, 0.0213968555182177, -0.532992960846149, -1.05107036265389, -0.890027204814649, 2.49342071088843, 0.39646360373391, -0.270020722889794, 0.261789170595672, 0.790469656122502, -0.575454019876166, -1.57943046384856, 1.42402405262115, -0.773280672758551, -0.219737121401019, -0.836890436241594, 0.95420685080104, -0.536098147323517, -0.956813665014848, -0.443116110531749, -1.45830805133207, -1.437100423269, -3.04957092165232, -1.35568837057382, -0.271883099514524, -0.26615579540397, 1.40047186021849, -0.895400518001046, -1.14529750799898, -0.0543447052053874, -0.732873359362109, -0.84840845424305, -0.64913190155761, -1.07297787454812, -0.420390896555157, -0.39355148021593, -1.59176484173585, -0.237227871115963, -0.922156163826606, -0.769252464097226, -0.495745483481408, 0.425971763197159, 2.01500856103583, -1.10490327280404, 1.60936066511874, -0.982978119751264, 0.919086471868052, 2.32691948545754, 0.0144283333569641, -1.16776624218704, 0.0943243395400734, 1.49526101044463, -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479, -0.0848088180385032, 0.113013834873792, -0.148473736655682, 0.903015742469832, 2.58973343267609, -0.341666841858629, -1.08405836865232, -0.394278838429946, 0.244514780331725, -0.206739411548476, -0.473147381056783, -0.0211137496023147, -1.51938366460491, 0.0783224641966739, 0.567640645179946, 0.761295543440156, 0.270707237932193, -0.457910772782194, -0.648626511738338, -1.10097676166057, 0.244922735721186, 0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475, 0.882114982058661, -1.43485812137356, 0.727741888928042, 1.03419106543897, 2.11916362387426), y = c(-0.1439617341926, -0.174277626103084, 0.602224604404354, -1.44887499366459, -0.463904174168501, 0.500059589539494, -0.773951880206804, 0.0517804664566934, 0.0430846805746435, -0.636812687531766, -0.334582095393778, -1.0983461632776, -1.10731215946008, 0.525175789638999, 0.414653245603842, 0.730487316463909, -1.34408136930753, -0.379154013094857, 0.137965520381119, 1.22395434592039, 0.0324813218120451, -0.812161380874894, 1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755, 0.165195533219977, -1.69718629157368, -0.660747173763155, -0.222462342062906, 1.35498501787693, -0.0491610358843584, -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034, -1.79855196419749, -2.36507475508984, 0.660851637576232, -0.67250052216282, 0.410951705416395, 0.760533257966452, -0.0212725401002647, -0.121076956771822, 0.0784949379362682, -0.0784246990073527, 1.11550997554267, -0.297558241032477, 0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841, 0.958116411077828, -1.14291155805925, -0.142425489752799, 1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468, -0.829348978252946, -0.274283453294785, 0.937739407943759, -0.351683826842485, -0.742409762101558, 0.399683091299982, 1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831, 1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296, -1.12659429205047, 2.51705580505852, -0.896201086603481, -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923, -2.60274520612392, -0.0969780594504372, 0.0855764450401389, 0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257, -0.669534565586153, 0.285524667523424, -0.722321914484456, -0.343521604348032, -2.32395167916648, -0.135095644737079, 0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562, -0.472625773108594, 0.657958641995046, -0.740224694435862), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057, 0.700733515544461, 0.311681028661359, 0.760462361967838, 1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736, 0.418057822385083, -0.400235237343163, 1.49349310261748, -1.60708093984972, -0.415751788401515, 0.42200837321742, -0.151736536534977, -0.60615111526422, -0.304721068966714, 0.629536099884472, 0.895171980275539, 0.660212631820405, 2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306, 2.91914013071762, 0.677415500438328, -0.684320344136007, 0.186492083080971, -0.324393300483657, -0.274704218225806, -0.933503340589868, 0.116845344986082, 0.319160238648117, -1.07754212275943, -3.23315213292314, -0.254874652654534, 0.0295178303214797, 0.594273774110513, 0.0591351681787969, 0.413398894737046, -1.09777217457042, 0.711175257270441, 0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607, 0.264364269837939, 0.268043904143697, 0.436930577039483, 1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084, -0.370497517092117, 1.47696958979247, -1.22390375051376, 0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909, 0.158625439491262, -1.76325506654115, 0.338596047099905, -0.666565029559273, -0.238646624327644, -1.18776528245719, 0.384935321768578, 0.66657951565448, -0.304613889457735, 1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091, -0.651113609237535, 0.808619272846293, 0.986580613954563, -0.00617079609070003, 0.319052357931912, -1.01182190274184, 0.470167547726389, -0.700970331629097, 0.813682862526491, -0.811430783992772, 0.31939748709946, -0.846522653163624, -0.245763179128733, -1.55285901110546, 0.128434032925753, 0.985443389404868, 0.183247523067191, -1.76622921343046, -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214, -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA, -100L)))), structure(list(structure(list(coefficients = c(`(Intercept)` = 0.00359240575150906, x = 0.382732763516548), residuals = c(`1` = -0.638309680947255, `2` = -0.811636380352614, `3` = -0.233473980054519, `4` = 0.968739308213971, `5` = -0.128534129033088, `6` = -0.602585016131483, `7` = -0.358392964210803, `8` = 1.49574811145649, `9` = -0.459293958711428, `10` = 0.725890100735062, `11` = 1.48774907040203, `12` = 0.489042666848007, `13` = -0.404844869289696, `14` = -0.127637246323415, `15` = -0.44304497166009, `16` = 1.23967250380267, `17` = 0.0774687750552127, `18` = 1.43410685092965, `19` = -0.574691665308142, `20` = -0.729215896870353, `21` = 0.0116009542394814, `22` = 0.03131751749879, `23` = -0.592238119297328, `24` = -1.51225748915907, `25` = 0.0810504069622551, `26` = -0.616989361351339, `27` = 1.0578560205748, `28` = -0.931216410802673, `29` = 1.07327062301445, `30` = -0.639359158179586, `31` = 0.258947190260889, `32` = 0.794594573940522, `33` = -0.475839992151701, `34` = 0.390011449602914, `35` = -0.123725564189262, `36` = -0.987772001780167, `37` = -0.238343931360045, `38` = 1.4989082260653, `39` = -0.17385278300444, `40` = -0.812249549209319, `41` = -0.0910657608348354, `42` = 0.203502307013659, `43` = 0.961645797916102, `44` = 1.08907236691378, `45` = 0.139266616332848, `46` = 1.20059239124669, `47` = -0.579679506526092, `48` = -2.25629230981608, `49` = -0.503318869538649, `50` = -0.548566500342308, `51` = -2.09795213551185, `52` = 0.626432823606617, `53` = -0.656855396205137, `54` = -0.162258468534056, `55` = -1.53167309820087, `56` = 0.469529137333409, `57` = 1.86795308843342, `58` = -0.60424925356072, `59` = -0.189879216014634, `60` = 1.80445716981996, `61` = 0.945196570389133, `62` = 1.91017694110602, `63` = 0.0162337219466052, `64` = -0.157783189922451, `65` = -0.549582419566638, `66` = 1.24989727841953, `67` = -1.15997371898521, `68` = 0.26551436697819, `69` = -0.158157540682688, `70` = 2.21909829015737, `71` = -0.565189782493709, `72` = -1.29680311175277, `73` = 0.1945449216296, `74` = 0.0116327152413977, `75` = -0.727544055313591, `76` = 0.187134940829045, `77` = -0.303201255084669, `78` = -0.472179845352651, `79` = 0.509378315704507, `80` = -0.236110423435845, `81` = -1.67445323474589, `82` = -2.57246016896382, `83` = -0.58653410214976, `84` = 1.3924675463832, `85` = 0.75146177757971, `86` = 1.20530863863354, `87` = 1.10105105729179, `88` = 0.202118812350638, `89` = -1.42215265609739, `90` = 0.222713475576613, `91` = 1.50703418963112, `92` = -3.30659823135846, `93` = -0.784206332076243, `94` = 0.971376604185378, `95` = 0.496981353491917, `96` = 0.791162805995104, `97` = 0.457309741683089, `98` = 0.442339513241108, `99` = 0.0806385972197143, `100` = -0.79897252143844), effects = c(`(Intercept)` = 0.487949089166442, x = 3.53749365281527, -0.229235396268716, 1.0321354641656, -0.201796453642345, -0.529492977219647, -0.192574020057833, 1.51572637688684, -0.429395442947496, 0.782669878723765, 1.61957678096152, 0.605149201998609, -0.348426317952624, -0.147119873604507, -0.361211409536245, 1.35812923010767, 0.328316675750014, 1.4539106323126, -0.550054594258358, -0.768280368110209, -0.0388430162310263, 0.0971578632478397, -0.630531314828302, -1.45684585745609, 0.185418226054968, -0.500212334678304, 1.13842424889085, -0.892142146693421, 1.13075651402021, -0.598363291462474, 0.300082842627337, 0.798481140694903, -0.400599858117657, 0.327386661186858, -0.0998363952025164, -0.846048975520584, -0.162853280025263, 1.51714930601387, -0.0886531854505664, -0.781664167371644, -0.0669383549678521, 0.164850534046867, 1.06422835934757, 1.14579829386806, 0.235781086340547, 1.3375187176881, -0.390610377569037, -2.21491007071395, -0.49126714533155, -0.539230347331811, -1.9420378021374, 0.763542990025605, -0.518916222351825, -0.0570049306228198, -1.48846102648805, 0.482092423798378, 1.98233447725773, -0.341833170524159, -0.203273293936921, 1.81551784603442, 1.05133133236753, 2.04324068688861, 0.0934104670678553, -0.110085881119005, -0.546317185909023, 1.20498859163121, -1.04314708037387, 0.300020167314718, -0.1990268462214, 2.33971435065694, -0.493591679947433, -1.11333245414653, 0.229289144412566, 0.113456496780523, -0.605223546212071, 0.298984076124649, -0.279803977653396, -0.260464758430011, 0.595622128722423, -0.107376782199071, -1.54944688315464, -2.55123945916426, -0.556436980771129, 1.45570480893828, 0.768140084430457, 1.30430893318363, 1.30271293253266, 0.174234309282109, -1.34998175038448, 0.304592622673427, 1.55116220847892, -3.30641975646492, -0.759478723134583, 0.95990098148869, 0.549155282661439, 0.883097008068327, 0.53451958627147, 0.438401697474758, 0.197493075504715, -0.674580822908805), rank = 2L,     fitted.values = c(`1` = 0.380499964480278, `2` = -0.465154906099681,     `3` = 0.27522788253199, `4` = -0.0382096638391503, `5` = 0.685854851819903,     `6` = -0.0895818492363381, `7` = -0.580881485061524, `8` = 0.191833533935353,     `9` = 0.13927257157483, `10` = -0.0031537749877687, `11` = -0.400784018826715,     `12` = -0.317487722751189, `13` = -0.00123986961224809, `14` = 0.400911170766313,     `15` = -0.135897502276298, `16` = -0.329939859003044, `17` = -1.03139469128751,     `18` = 0.192758011558313, `19` = 0.167149549300479, `20` = 0.504662641611895,     `21` = 0.564955215955375, `22` = -0.0511598378392359, `23` = 0.500576152648316,     `24` = 0.00409514343759732, `25` = -0.25529189178607, `26` = -0.321040221779797,     `27` = -0.129193320384901, `28` = 0.0906562416244652, `29` = -0.00689500917680408,     `30` = 0.0804749176712171, `31` = 0.0797342843196133, `32` = 0.277092992112565,     `33` = -0.100963209894438, `34` = 0.629493457635481, `35` = 0.171112196498161,     `36` = -0.45321286876176, `37` = -0.102290538335955, `38` = 0.201037751334162,     `39` = -0.153731937456109, `40` = 0.135633314435676, `41` = 0.16984993402756,     `42` = 0.50247602155017, `43` = -0.245832971135794, `44` = -0.00286845333782448,     `45` = -0.213682096490501, `46` = -0.42779827234333, `47` = -0.704069111106093,     `48` = 0.0784277813890539, `49` = 0.233831126826071, `50` = 0.248219174572061,     `51` = -0.528403386543905, `52` = -0.42877232096279, `53` = -0.433164692837174,     `54` = -0.259984740445823, `55` = 0.0687326870373604, `56` = 0.231120690730526,     `57` = -0.308347293016671, `58` = -1.09268697486892, `59` = 0.368651902812687,     `60` = 0.239082046358038, `61` = -0.264653774337872, `62` = -0.407332966550108,     `63` = -0.111224054030291, `64` = 0.0449683292872122, `65` = 0.280385032576697,     `66` = 0.535627343422814, `67` = -0.321303083213176, `68` = 0.114861563499307,     `69` = 0.514225286147984, `70` = -0.34138076820476, `71` = -0.0816664508906588,     `72` = -0.674406448163988, `73` = 0.113598317833955, `74` = -0.2418126893868,     `75` = -0.350411534143083, `76` = -0.294930526510433, `77` = 0.173718410319711,     `78` = -0.824055331636924, `79` = -0.159264556881648, `80` = -0.384390555381373,     `81` = -0.36464206878304, `82` = 0.185250628310022, `83` = 0.138220289435998,     `84` = -0.0373677909474235, `85` = 0.209317870807993, `86` = -0.226852865958394,     `87` = -0.770789893463575, `88` = 0.445427252737147, `89` = -0.0847013627798738,     `90` = -0.136139027436236, `91` = 0.0638796781648836, `92` = 0.2967397621207,     `93` = 0.166669847824502, `94` = 0.358487254793509, `95` = 0.0212496259630596,     `96` = -0.189414232030471, `97` = -0.111399426605327, `98` = 0.318549312400568,     `99` = -0.32145058755933, `100` = -0.361385421485835), assign = 0:1,     qr = structure(list(qr = structure(c(-10, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     1.36877005738465, 9.24272492459957, -0.0805643805323514,     0.00804003183788573, -0.196642884012102, 0.0225622304448865,     0.161445768916875, -0.0569899640721923, -0.042131714837259,     -0.00186977784431195, 0.110534733050711, 0.0869880346674537,     -0.00241081213676853, -0.116093289010901, 0.0356550180469505,     0.0905080794997449, 0.288799553952633, -0.0572513009716164,     -0.0500121467084127, -0.145422379329695, -0.162466247181019,     0.0117008649788242, -0.144267186030528, -0.0039189457402309,     0.0694061427775218, 0.087992276477409, 0.0337598395535384,     -0.0283885580370556, -0.000812183243101058, -0.0255104400946685,     -0.0253010734005362, -0.0810916209357626, 0.0257795819867168,     -0.18071030583219, -0.0511323316717209, 0.125355635949948,     0.0261547991805231, -0.0595918676520003, 0.0406965635393694,     -0.0411029477223673, -0.050775507718243, -0.144804252408115,     0.0667322381493826, -0.00195043428583439, 0.0576436353699242,     0.118171284849218, 0.19626918858479, -0.0249317432875281,     -0.0688620964383645, -0.0729293963851899, 0.14661094413186,     0.118446634776329, 0.119688296898009, 0.0707327454856336,     -0.022191075655806, -0.068095894047192, 0.0844041629685622,     0.306126025629162, -0.106974044958561, -0.0703464579799854,     0.0720526160918558, 0.112386029015067, 0.0286801791730005,     -0.0154732239555674, -0.0820222347508608, -0.154175667632072,     0.0880665837297116, -0.0352310641304809, -0.14812560525025,     0.0937422645823419, 0.0203246579931649, 0.187883968467575,     -0.0348739622415922, 0.0655957607041737, 0.096295135859195,     0.0806114306492941, -0.0518690718831064, 0.230187615670967,     0.0422605577026198, 0.105900530122234, 0.100317909053044,     -0.0551290686837035, -0.0418342493879588, 0.00780204614113208,     -0.0619325416676954, 0.0613668277655942, 0.215130220972617,     -0.128677363030484, 0.0211825851548998, 0.0357232938330415,     -0.0208191978946645, -0.0866454881469444, -0.0498765418075827,     -0.104100641069599, -0.00876827812328972, 0.0507834493620379,     0.0287297545481808, -0.0928107431043664, 0.0881082811461964,     0.0993973003914248), dim = c(100L, 2L), dimnames = list(c(\"1\",     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",     \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",     \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\",     \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\",     \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\",     \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\",     \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\",     \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",     \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\",     \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\",     \"x\")), assign = 0:1), qraux = c(1.1, 1.12873148295067), pivot = 1:2,         tol = 1e-07, rank = 2L), class = \"qr\"), df.residual = 98L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = m ~         x, data = structure(list(m = c(-0.257809716466977, -1.27679128645229,     0.0417539024774709, 0.930529644374821, 0.557320722786814,     -0.692166865367821, -0.939274449272328, 1.68758164539185,     -0.320021387136598, 0.722736325747294, 1.08696505157531,     0.171554944096819, -0.406084738901945, 0.273273924442898,     -0.578942473936388, 0.909732644799622, -0.953925916232302,     1.62686486248796, -0.407542116007663, -0.224553255258458,     0.576556170194857, -0.0198423203404459, -0.0916619666490127,     -1.50816234572148, -0.174241484823815, -0.938029583131136,     0.928662700189895, -0.840560169178208, 1.06637561383764,     -0.558884240508369, 0.338681474580503, 1.07168756605309,     -0.576803202046139, 1.01950490723839, 0.0473866323088989,     -1.44098487054193, -0.340634469696, 1.69994597739946, -0.327584720460549,     -0.676616234773644, 0.0787841731927249, 0.705978328563829,     0.715812826780308, 1.08620391357595, -0.0744154801576535,     0.772794118903362, -1.28374861763219, -2.17786452842703,     -0.269487742712578, -0.300347325770247, -2.62635552205575,     0.197660502643827, -1.09002008904231, -0.422243208979879,     -1.46294041116351, 0.700649828063935, 1.55960579541675, -1.69693622842964,     0.178772686798053, 2.043539216178, 0.680542796051261, 1.50284397455591,     -0.0949903320836854, -0.112814860635238, -0.26919738698994,     1.78552462184234, -1.48127680219839, 0.380375930477497, 0.356067745465296,     1.87771752195261, -0.646856233384368, -1.97120955991676,     0.308143239463555, -0.230179974145403, -1.07795558945667,     -0.107795585681388, -0.129482844764958, -1.29623517698958,     0.350113758822859, -0.620500978817218, -2.03909530352893,     -2.3872095406538, -0.448313812713761, 1.35509975543578, 0.960779648387702,     0.978455772675148, 0.33026116382822, 0.647546065087784, -1.50685401887726,     0.0865744481403767, 1.570913867796, -3.00985846923776, -0.61753648425174,     1.32986385897889, 0.518230979454976, 0.601748573964633, 0.345910315077762,     0.760888825641675, -0.240811990339615, -1.16035794292427),         y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909,         -0.31360760280103, 0.640175146926015, -0.213196392482659,         0.79760306542824, -0.127458830395686, -0.608428327270797,         0.296462080432809, -0.675699447934353, -0.160785042341766,         -0.816336600011713, -1.72327297092188, -0.535281428595674,         -0.00765373905760863, 0.504252652768121, 0.290293398421208,         0.279048146683646, 0.0112439636534965, -0.782874281888901,         0.314097024690366, -0.137704261235468, -0.610267273940993,         0.482754152828057, -0.370320007780895, 1.83711945518766,         -0.320207869670493, -0.552807217421982, 0.363031624793193,         -0.889723127628635, -1.12596728225233, -0.989827090143935,         -0.135156944128649, -0.502422245847366, 0.671002166714933,         1.24615343604938, 1.47878632390233, -1.26696576554576,         -0.318262612371445, 0.461251449812912, 0.234319865433172,         0.506642364182273, -0.275113574856366, -1.1523196355089,         1.60555795178744, -0.410322767817899, -1.44261499715763,         0.146949268211736, 1.63598725465829, -0.99909896430973,         1.32114252865484, 0.639318072702142, -0.563746491712262,         -0.0710896951888477, -0.213631541678839, -0.496420443744945,         -1.88914122076051, -0.0394093687246016, 2.57807132340186,         0.431038410226631, 0.0561439072327621, 0.152015405319829,         0.548056818220597, -1.25627629638571, -0.0206175507163967,         -2.42211981133594, -0.909283759946111, -0.590510681738354,         0.686052294710227, 0.89774915490782, -0.216018726494471,         0.390474315164319, -0.605815891489038, -0.573798023956782,         0.420348323013462, -0.501247083246725, 0.269064048092409,         1.12547954741865, -1.32047313229652, -1.66639182067291,         -0.148538371524439, -1.68533218467757, 1.04102930892646,         0.682605683525256, 3.25695951166719, -2.1988419377994,         -0.404377490884628, -0.169701059508333, 1.49329651567534,         1.51264727973354, -2.74193258577351, 1.63059880130779,         -0.856905261795034, -0.70478471721872, 0.263513612781986,         2.10036995898208, 0.818927439813178, 0.512135540197413,         0.916380125290656), x = c(0.984779968314556, -1.22473787596427,         0.709726218065825, -0.109219992578064, 1.78260789538833,         -0.243444679602975, -1.52710702225461, 0.491834371466622,         0.354503660926992, -0.0176263476303775, -1.05655032211723,         -0.838914666078269, -0.0126257164904259, 1.03811014600433,         -0.364457713905061, -0.871449472185395, -2.7042030254467,         0.494249836540647, 0.427340324999113, 1.30919086010968,         1.4667226423107, -0.143056066294616, 1.29851372621074,         0.00131354755592194, -0.676410075685581, -0.848196596885468,         -0.346941100407436, 0.227479443027071, -0.0274014036111113,         0.200877790585033, 0.198942671822796, 0.71459935608369,         -0.273181774889849, 1.63534745793173, 0.437693886479643,         -1.19353585074908, -0.276649804199181, 0.515883050535119,         -0.411055332086343, 0.344995049472574, 0.434395860831138,         1.30347768300503, -0.651695910733076, -0.0168808623279884,         -0.567692455293591, -1.12713286976328, -1.84897031117903,         0.19552905518189, 0.601565225195587, 0.639158159789933,         -1.38999281746208, -1.12967785339758, -1.14115419483757,         -0.688671499600886, 0.170197818152129, 0.59448342725741,         -0.815032650724957, -2.86434683706673, 0.95382348170826,         0.615284770613444, -0.700870700550263, -1.07366134146979,         -0.299991196799737, 0.108106562802571, 0.723200763587674,         1.39009509607427, -0.848883398378404, 0.290722844643498,         1.33417603370242, -0.901342155259083, -0.222763412932851,         -1.7714680282034, 0.287422250114445, -0.641191762323999,         -0.924937642238947, -0.779977469185323, 0.444503373594371,         -2.16246900261166, -0.425510899920945, -1.01371765920455,         -0.962119028303747, 0.474634627277364, 0.351754269604537,         -0.107020356246981, 0.537517256600346, -0.60210489844813,         -2.02329764533368, 1.15442128059814, -0.230692997694109,         -0.365088768214911, 0.157517929375723, 0.765932222984396,         0.426086966202313, 0.927265399965311, 0.0461345928404875,         -0.504285643091111, -0.300449408355562, 0.822915978645871,         -0.849268796129039, -0.953610095681196)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = m ~ x, model = structure(list(        m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709,         0.930529644374821, 0.557320722786814, -0.692166865367821,         -0.939274449272328, 1.68758164539185, -0.320021387136598,         0.722736325747294, 1.08696505157531, 0.171554944096819,         -0.406084738901945, 0.273273924442898, -0.578942473936388,         0.909732644799622, -0.953925916232302, 1.62686486248796,         -0.407542116007663, -0.224553255258458, 0.576556170194857,         -0.0198423203404459, -0.0916619666490127, -1.50816234572148,         -0.174241484823815, -0.938029583131136, 0.928662700189895,         -0.840560169178208, 1.06637561383764, -0.558884240508369,         0.338681474580503, 1.07168756605309, -0.576803202046139,         1.01950490723839, 0.0473866323088989, -1.44098487054193,         -0.340634469696, 1.69994597739946, -0.327584720460549,         -0.676616234773644, 0.0787841731927249, 0.705978328563829,         0.715812826780308, 1.08620391357595, -0.0744154801576535,         0.772794118903362, -1.28374861763219, -2.17786452842703,         -0.269487742712578, -0.300347325770247, -2.62635552205575,         0.197660502643827, -1.09002008904231, -0.422243208979879,         -1.46294041116351, 0.700649828063935, 1.55960579541675,         -1.69693622842964, 0.178772686798053, 2.043539216178,         0.680542796051261, 1.50284397455591, -0.0949903320836854,         -0.112814860635238, -0.26919738698994, 1.78552462184234,         -1.48127680219839, 0.380375930477497, 0.356067745465296,         1.87771752195261, -0.646856233384368, -1.97120955991676,         0.308143239463555, -0.230179974145403, -1.07795558945667,         -0.107795585681388, -0.129482844764958, -1.29623517698958,         0.350113758822859, -0.620500978817218, -2.03909530352893,         -2.3872095406538, -0.448313812713761, 1.35509975543578,         0.960779648387702, 0.978455772675148, 0.33026116382822,         0.647546065087784, -1.50685401887726, 0.0865744481403767,         1.570913867796, -3.00985846923776, -0.61753648425174,         1.32986385897889, 0.518230979454976, 0.601748573964633,         0.345910315077762, 0.760888825641675, -0.240811990339615,         -1.16035794292427), x = c(0.984779968314556, -1.22473787596427,         0.709726218065825, -0.109219992578064, 1.78260789538833,         -0.243444679602975, -1.52710702225461, 0.491834371466622,         0.354503660926992, -0.0176263476303775, -1.05655032211723,         -0.838914666078269, -0.0126257164904259, 1.03811014600433,         -0.364457713905061, -0.871449472185395, -2.7042030254467,         0.494249836540647, 0.427340324999113, 1.30919086010968,         1.4667226423107, -0.143056066294616, 1.29851372621074,         0.00131354755592194, -0.676410075685581, -0.848196596885468,         -0.346941100407436, 0.227479443027071, -0.0274014036111113,         0.200877790585033, 0.198942671822796, 0.71459935608369,         -0.273181774889849, 1.63534745793173, 0.437693886479643,         -1.19353585074908, -0.276649804199181, 0.515883050535119,         -0.411055332086343, 0.344995049472574, 0.434395860831138,         1.30347768300503, -0.651695910733076, -0.0168808623279884,         -0.567692455293591, -1.12713286976328, -1.84897031117903,         0.19552905518189, 0.601565225195587, 0.639158159789933,         -1.38999281746208, -1.12967785339758, -1.14115419483757,         -0.688671499600886, 0.170197818152129, 0.59448342725741,         -0.815032650724957, -2.86434683706673, 0.95382348170826,         0.615284770613444, -0.700870700550263, -1.07366134146979,         -0.299991196799737, 0.108106562802571, 0.723200763587674,         1.39009509607427, -0.848883398378404, 0.290722844643498,         1.33417603370242, -0.901342155259083, -0.222763412932851,         -1.7714680282034, 0.287422250114445, -0.641191762323999,         -0.924937642238947, -0.779977469185323, 0.444503373594371,         -2.16246900261166, -0.425510899920945, -1.01371765920455,         -0.962119028303747, 0.474634627277364, 0.351754269604537,         -0.107020356246981, 0.537517256600346, -0.60210489844813,         -2.02329764533368, 1.15442128059814, -0.230692997694109,         -0.365088768214911, 0.157517929375723, 0.765932222984396,         0.426086966202313, 0.927265399965311, 0.0461345928404875,         -0.504285643091111, -0.300449408355562, 0.822915978645871,         -0.849268796129039, -0.953610095681196)), terms = m ~         x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\"),     structure(list(coefficients = c(`(Intercept)` = -0.0443005999567679,     m = 0.416877762692203, x = -0.156180658350468), residuals = c(`1` = -0.885778571044836,     `2` = -0.221800213902656, `3` = -0.206320355599509, `4` = -0.674282169455884,     `5` = 0.730550005547906, `6` = 0.0816318313860099, `7` = 0.994961716244259,     `8` = -0.709858475195252, `9` = -0.375351312279639, `10` = 0.0367170833184352,     `11` = -1.24954313169158, `12` = -0.319024128506833, `13` = -0.604720195351676,     `14` = -1.63076146714573, `15` = -0.306553831075414, `16` = -0.478704000998051,     `17` = 0.523879545630328, `18` = -0.266417520838034, `19` = 0.559986285462599,     `20` = 0.353626112706008, `21` = -0.749853420335727, `22` = 0.344326856142359,     `23` = 0.147610902938621, `24` = 0.0629578211988278, `25` = 0.49404998221088,     `26` = -0.067447636781518, `27` = 1.4400957369231, `28` = 0.110031462194632,     `29` = -0.957334466807087, `30` = 0.671691862118579, `31` = -0.955540305600998,     `32` = -1.41682279924686, `33` = -0.74773577125612, `34` = -0.260455626343604,     `35` = -0.409516759802684, `36` = 1.12961010064166, `37` = 1.38924962307651,     `38` = 0.894988202567621, `39` = -1.15030127261496, `40` = 0.0619858036932616,     `41` = 0.540552911442867, `42` = 0.187891801945938, `43` = 0.150754218021884,     `44` = -0.686263696410565, `45` = -1.16565945808269, `46` = 1.151661514786,     `47` = -0.119629316753828, `48` = -0.459873248578536, `49` = 0.397546168335291,     `50` = 1.90532011799881, `51` = -0.0770191436176961, `52` = 1.10660902962925,     `53` = 0.959797595239295, `54` = -0.450979255678856, `55` = 0.609659837614588,     `56` = -0.368569461428536, `57` = -1.22957715443066, `58` = -1.58478121722181,     `59` = 0.0793336528526517, `60` = 1.86656144749199, `61` = 0.0821734045187589,     `62` = -0.693742861754995, `63` = 0.189062539777506, `64` = 0.656271579027927,     `65` = -0.9868033206413, `66` = -0.50355649307047, `67` = -1.89288702017237,     `68` = -0.978148141594825, `69` = -0.486274315578955, `70` = -0.193197996059949,     `71` = 1.17691839773312, `72` = 0.373366261706267, `73` = 0.351206647112239,     `74` = -0.565700130462644, `75` = -0.224579079483769, `76` = 0.387769110921287,     `77` = -0.333545135130347, `78` = 0.516000436065154, `79` = 0.957368934424638,     `80` = -1.17582256393817, `81` = -0.922302115916814, `82` = 0.965065549381675,     `83` = -1.39920231208825, `84` = 0.503704444916859, `85` = 0.410328412232536,     `86` = 2.7993265187822, `87` = -2.60821983121063, `88` = -0.449726170164188,     `89` = 0.466743688285034, `90` = 1.44448634920887, `91` = 0.926670075013261,     `92` = -1.32326512230318, `93` = 1.99888317209626, `94` = -1.22217441142241,     `95` = -0.869317757452373, `96` = -0.0218010502135053, `97` = 1.9535438542991,     `98` = 0.674553967790979, `99` = 0.524185944220473, `100` = 1.29547269586268    ), effects = c(`(Intercept)` = 0.43264571547434, m = 3.91423689559544,     x = 1.35997405209498, -0.611671161986632, 0.825031370326444,     0.169917225198442, 1.07009744735539, -0.651954214935359,     -0.285294634533966, 0.104084869048116, -1.20237539355107,     -0.25341105101726, -0.518163644540912, -1.54152280287865,     -0.221820600704936, -0.426034374749043, 0.583367156606705,     -0.20745215175142, 0.652509122887982, 0.454958388177569,     -0.659963815848788, 0.422579381127501, 0.246547925936717,     0.168370839867388, 0.567715118443301, 0.0168354744057434,     1.49952802165125, 0.207190186548235, -0.895919636500827,     0.763719997927833, -0.878742274469626, -1.34547746703503,     -0.661806126055278, -0.175791958843407, -0.32456019258772,     1.21774913517943, 1.47113194364177, 0.95300779162785, -1.07045510673119,     0.157954472885101, 0.624933093233273, 0.273384538537429,     0.209676376134324, -0.625042663484988, -1.09221708981001,     1.20319783680123, -0.0430051573031029, -0.340493247655624,     0.490083337707241, 1.99888770198302, 0.0285459360373079,     1.16785323862506, 1.04269899336611, -0.373278775575326, 0.716587564374003,     -0.292561204205755, -1.18715391510179, -1.51487035761087,     0.169034820429815, 1.92010325842155, 0.141028916116286, -0.653850824561076,     0.266468647318223, 0.739490847391649, -0.8926284208016, -0.435180578165653,     -1.79941105529538, -0.90081691604533, -0.394439830990295,     -0.157328870898471, 1.26471556326264, 0.462682046561476,     0.429716857267196, -0.490611833562809, -0.138962108313871,     0.458910067880335, -0.245500595046317, 0.588602407786369,     1.02554026803337, -1.09915341596189, -0.820906408422221,     1.091760901173, -1.30700960345868, 0.559153314575665, 0.481160989926078,     2.85446944773015, -2.56128980842809, -0.365256601358954,     0.56900137125227, 1.517937787749, 0.982035748458895, -1.1820887664937,     2.09494620268786, -1.15233037134392, -0.797624760538641,     0.0410439840009282, 2.02347530577092, 0.752626737688837,     0.596644324656369, 1.38209827795288), rank = 3L, fitted.values = c(`1` = -0.305579321539554,     `2` = -0.385286127103049, `3` = -0.1377398344944, `4` = 0.360674566654854,     `5` = -0.0903748586218912, `6` = -0.294828223868669, `7` = -0.197358650816019,     `8` = 0.582399644799567, `9` = -0.233077014991157, `10` = 0.259744997114374,     `11` = 0.57384368375723, `12` = 0.158239086165067, `13` = -0.211616404660037,     `14` = -0.0925115037761512, `15` = -0.22872759752026, `16` = 0.471050261940442,     `17` = -0.0196268928622071, `18` = 0.556710919259243, `19` = -0.280938138778953,     `20` = -0.342382149052512, `21` = -0.0330208615531739, `22` = -0.0302298314519936,     `23` = -0.285315164174089, `24` = -0.673225095139821, `25` = -0.0112958293828235,     `26` = -0.302872370999377, `27` = 0.397023718264565, `28` = -0.430239331865125,     `29` = 0.404527249385104, `30` = -0.308660237325386, `31` = 0.065817177972363,     `32` = 0.290855516994525, `33` = -0.242091318887815, `34` = 0.125298682214955,     `35` = -0.0929054860446819, `36` = -0.458607933926723, `37` = -0.143096187027125,     `38` = 0.583798121334709, `39` = -0.116664492930797, `40` = -0.380248416064706,     `41` = -0.0793014616299551, `42` = 0.0464280634872343, `43` = 0.355888146160388,     `44` = 0.411150121554199, `45` = 0.0133398225737902, `46` = 0.45389643700144,     `47` = -0.290693451064071, `48` = -0.98274174857909, `49` = -0.250596900123554,     `50` = -0.269332863340521, `51` = -0.922079820692034, `52` = 0.214533499025585,     `53` = -0.320479522537153, `54` = -0.112767236033406, `55` = -0.680749532803436,     `56` = 0.154937919749697, `57` = 0.733156710685713, `58` = -0.3043600035387,     `59` = -0.118743021577253, `60` = 0.71150987590987, `61` = 0.348865005707872,     `62` = 0.749886768987757, `63` = -0.0370471344576764, `64` = -0.108214760807331,     `65` = -0.269472975744406, `66` = 0.482938942354073, `67` = -0.529232791163572,     `68` = 0.0688643816487136, `69` = -0.104236366159399, `70` = 0.879250290770177,     `71` = -0.279169242825299, `72` = -0.589384988200737, `73` = 0.0392676680520799,     `74` = -0.0401157610263937, `75` = -0.349218944473013, `76` = 0.0325792120921751,     `77` = -0.167701948116379, `78` = -0.246936387972745, `79` = 0.168110612994017,     `80` = -0.144650568358351, `81` = -0.744089704756098, `82` = -1.11360392090611,     `83` = -0.286129872589317, `84` = 0.537324864009605, `85` = 0.27227727129272,     `86` = 0.45763299288499, `87` = 0.40937789341123, `88` = 0.0453486792795598,     `89` = -0.636444747793368, `90` = 0.0488101664664706, `91` = 0.585977204720283,     `92` = -1.41866746347033, `93` = -0.368284370788474, `94` = 0.365269149627378,     `95` = 0.164533040233654, `96` = 0.285314662995491, `97` = 0.146826104682985,     `98` = 0.1443734720222, `99` = -0.0120504040230603, `100` = -0.379092570572025    ), assign = 0:2, qr = structure(list(qr = structure(cdim = c(100L, 3L), dimnames = list(        c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",         \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",         \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\",         \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\",         \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\",         \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\",         \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\",         \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\",         \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",         \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\",         \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"        ), c(\"(Intercept)\", \"m\", \"x\")), assign = 0:2), qraux = c(1.1,     1.11459188539618, 1.08092606017996), pivot = 1:3, tol = 1e-07,         rank = 3L), class = \"qr\"), df.residual = 97L, xlevels = structure(list(), names = character(0)),         call = stats::lm(formula = y ~ m + x, data = structure(list(            m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709,             0.930529644374821, 0.557320722786814, -0.692166865367821,             -0.939274449272328, 1.68758164539185, -0.320021387136598,             0.722736325747294, 1.08696505157531, 0.171554944096819,             -0.406084738901945, 0.273273924442898, -0.578942473936388,             0.909732644799622, -0.953925916232302, 1.62686486248796,             -0.407542116007663, -0.224553255258458, 0.576556170194857,             -0.0198423203404459, -0.0916619666490127, -1.50816234572148,             -0.174241484823815, -0.938029583131136, 0.928662700189895,             -0.840560169178208, 1.06637561383764, -0.558884240508369,             0.338681474580503, 1.07168756605309, -0.576803202046139,             1.01950490723839, 0.0473866323088989, -1.44098487054193,             -0.340634469696, 1.69994597739946, -0.327584720460549,             -0.676616234773644, 0.0787841731927249, 0.705978328563829,             0.715812826780308, 1.08620391357595, -0.0744154801576535,             0.772794118903362, -1.28374861763219, -2.17786452842703,             -0.269487742712578, -0.300347325770247, -2.62635552205575,             0.197660502643827, -1.09002008904231, -0.422243208979879,             -1.46294041116351, 0.700649828063935, 1.55960579541675,             -1.69693622842964, 0.178772686798053, 2.043539216178,             0.680542796051261, 1.50284397455591, -0.0949903320836854,             -0.112814860635238, -0.26919738698994, 1.78552462184234,             -1.48127680219839, 0.380375930477497, 0.356067745465296,             1.87771752195261, -0.646856233384368, -1.97120955991676,             0.308143239463555, -0.230179974145403, -1.07795558945667,             -0.107795585681388, -0.129482844764958, -1.29623517698958,             0.350113758822859, -0.620500978817218, -2.03909530352893,             -2.3872095406538, -0.448313812713761, 1.35509975543578,             0.960779648387702, 0.978455772675148, 0.33026116382822,             0.647546065087784, -1.50685401887726, 0.0865744481403767,             1.570913867796, -3.00985846923776, -0.61753648425174,             1.32986385897889, 0.518230979454976, 0.601748573964633,             0.345910315077762, 0.760888825641675, -0.240811990339615,             -1.16035794292427), y = c(-1.19135789258439, -0.607086341005705,             -0.344060190093909, -0.31360760280103, 0.640175146926015,             -0.213196392482659, 0.79760306542824, -0.127458830395686,             -0.608428327270797, 0.296462080432809, -0.675699447934353,             -0.160785042341766, -0.816336600011713, -1.72327297092188,             -0.535281428595674, -0.00765373905760863, 0.504252652768121,             0.290293398421208, 0.279048146683646, 0.0112439636534965,             -0.782874281888901, 0.314097024690366, -0.137704261235468,             -0.610267273940993, 0.482754152828057, -0.370320007780895,             1.83711945518766, -0.320207869670493, -0.552807217421982,             0.363031624793193, -0.889723127628635, -1.12596728225233,             -0.989827090143935, -0.135156944128649, -0.502422245847366,             0.671002166714933, 1.24615343604938, 1.47878632390233,             -1.26696576554576, -0.318262612371445, 0.461251449812912,             0.234319865433172, 0.506642364182273, -0.275113574856366,             -1.1523196355089, 1.60555795178744, -0.410322767817899,             -1.44261499715763, 0.146949268211736, 1.63598725465829,             -0.99909896430973, 1.32114252865484, 0.639318072702142,             -0.563746491712262, -0.0710896951888477, -0.213631541678839,             -0.496420443744945, -1.88914122076051, -0.0394093687246016,             2.57807132340186, 0.431038410226631, 0.0561439072327621,             0.152015405319829, 0.548056818220597, -1.25627629638571,             -0.0206175507163967, -2.42211981133594, -0.909283759946111,             -0.590510681738354, 0.686052294710227, 0.89774915490782,             -0.216018726494471, 0.390474315164319, -0.605815891489038,             -0.573798023956782, 0.420348323013462, -0.501247083246725,             0.269064048092409, 1.12547954741865, -1.32047313229652,             -1.66639182067291, -0.148538371524439, -1.68533218467757,             1.04102930892646, 0.682605683525256, 3.25695951166719,             -2.1988419377994, -0.404377490884628, -0.169701059508333,             1.49329651567534, 1.51264727973354, -2.74193258577351,             1.63059880130779, -0.856905261795034, -0.70478471721872,             0.263513612781986, 2.10036995898208, 0.818927439813178,             0.512135540197413, 0.916380125290656), x = c(0.984779968314556,             -1.22473787596427, 0.709726218065825, -0.109219992578064,             1.78260789538833, -0.243444679602975, -1.52710702225461,             0.491834371466622, 0.354503660926992, -0.0176263476303775,             -1.05655032211723, -0.838914666078269, -0.0126257164904259,             1.03811014600433, -0.364457713905061, -0.871449472185395,             -2.7042030254467, 0.494249836540647, 0.427340324999113,             1.30919086010968, 1.4667226423107, -0.143056066294616,             1.29851372621074, 0.00131354755592194, -0.676410075685581,             -0.848196596885468, -0.346941100407436, 0.227479443027071,             -0.0274014036111113, 0.200877790585033, 0.198942671822796,             0.71459935608369, -0.273181774889849, 1.63534745793173,             0.437693886479643, -1.19353585074908, -0.276649804199181,             0.515883050535119, -0.411055332086343, 0.344995049472574,             0.434395860831138, 1.30347768300503, -0.651695910733076,             -0.0168808623279884, -0.567692455293591, -1.12713286976328,             -1.84897031117903, 0.19552905518189, 0.601565225195587,             0.639158159789933, -1.38999281746208, -1.12967785339758,             -1.14115419483757, -0.688671499600886, 0.170197818152129,             0.59448342725741, -0.815032650724957, -2.86434683706673,             0.95382348170826, 0.615284770613444, -0.700870700550263,             -1.07366134146979, -0.299991196799737, 0.108106562802571,             0.723200763587674, 1.39009509607427, -0.848883398378404,             0.290722844643498, 1.33417603370242, -0.901342155259083,             -0.222763412932851, -1.7714680282034, 0.287422250114445,             -0.641191762323999, -0.924937642238947, -0.779977469185323,             0.444503373594371, -2.16246900261166, -0.425510899920945,             -1.01371765920455, -0.962119028303747, 0.474634627277364,             0.351754269604537, -0.107020356246981, 0.537517256600346,             -0.60210489844813, -2.02329764533368, 1.15442128059814,             -0.230692997694109, -0.365088768214911, 0.157517929375723,             0.765932222984396, 0.426086966202313, 0.927265399965311,             0.0461345928404875, -0.504285643091111, -0.300449408355562,             0.822915978645871, -0.849268796129039, -0.953610095681196            )), class = \"data.frame\", row.names = c(NA, -100L        )), subset = 1:100), terms = y ~ m + x, model = structure(list(            y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909,             -0.31360760280103, 0.640175146926015, -0.213196392482659,             0.79760306542824, -0.127458830395686, -0.608428327270797,             0.296462080432809, -0.675699447934353, -0.160785042341766,             -0.816336600011713, -1.72327297092188, -0.535281428595674,             -0.00765373905760863, 0.504252652768121, 0.290293398421208,             0.279048146683646, 0.0112439636534965, -0.782874281888901,             0.314097024690366, -0.137704261235468, -0.610267273940993,             0.482754152828057, -0.370320007780895, 1.83711945518766,             -0.320207869670493, -0.552807217421982, 0.363031624793193,             -0.889723127628635, -1.12596728225233, -0.989827090143935,             -0.135156944128649, -0.502422245847366, 0.671002166714933,             1.24615343604938, 1.47878632390233, -1.26696576554576,             -0.318262612371445, 0.461251449812912, 0.234319865433172,             0.506642364182273, -0.275113574856366, -1.1523196355089,             1.60555795178744, -0.410322767817899, -1.44261499715763,             0.146949268211736, 1.63598725465829, -0.99909896430973,             1.32114252865484, 0.639318072702142, -0.563746491712262,             -0.0710896951888477, -0.213631541678839, -0.496420443744945,             -1.88914122076051, -0.0394093687246016, 2.57807132340186,             0.431038410226631, 0.0561439072327621, 0.152015405319829,             0.548056818220597, -1.25627629638571, -0.0206175507163967,             -2.42211981133594, -0.909283759946111, -0.590510681738354,             0.686052294710227, 0.89774915490782, -0.216018726494471,             0.390474315164319, -0.605815891489038, -0.573798023956782,             0.420348323013462, -0.501247083246725, 0.269064048092409,             1.12547954741865, -1.32047313229652, -1.66639182067291,             -0.148538371524439, -1.68533218467757, 1.04102930892646,             0.682605683525256, 3.25695951166719, -2.1988419377994,             -0.404377490884628, -0.169701059508333, 1.49329651567534,             1.51264727973354, -2.74193258577351, 1.63059880130779,             -0.856905261795034, -0.70478471721872, 0.263513612781986,             2.10036995898208, 0.818927439813178, 0.512135540197413,             0.916380125290656), m = c(-0.257809716466977, -1.27679128645229,             0.0417539024774709, 0.930529644374821, 0.557320722786814,             -0.692166865367821, -0.939274449272328, 1.68758164539185,             -0.320021387136598, 0.722736325747294, 1.08696505157531,             0.171554944096819, -0.406084738901945, 0.273273924442898,             -0.578942473936388, 0.909732644799622, -0.953925916232302,             1.62686486248796, -0.407542116007663, -0.224553255258458,             0.576556170194857, -0.0198423203404459, -0.0916619666490127,             -1.50816234572148, -0.174241484823815, -0.938029583131136,             0.928662700189895, -0.840560169178208, 1.06637561383764,             -0.558884240508369, 0.338681474580503, 1.07168756605309,             -0.576803202046139, 1.01950490723839, 0.0473866323088989,             -1.44098487054193, -0.340634469696, 1.69994597739946,             -0.327584720460549, -0.676616234773644, 0.0787841731927249,             0.705978328563829, 0.715812826780308, 1.08620391357595,             -0.0744154801576535, 0.772794118903362, -1.28374861763219,             -2.17786452842703, -0.269487742712578, -0.300347325770247,             -2.62635552205575, 0.197660502643827, -1.09002008904231,             -0.422243208979879, -1.46294041116351, 0.700649828063935,             1.55960579541675, -1.69693622842964, 0.178772686798053,             2.043539216178, 0.680542796051261, 1.50284397455591,             -0.0949903320836854, -0.112814860635238, -0.26919738698994,             1.78552462184234, -1.48127680219839, 0.380375930477497,             0.356067745465296, 1.87771752195261, -0.646856233384368,             -1.97120955991676, 0.308143239463555, -0.230179974145403,             -1.07795558945667, -0.107795585681388, -0.129482844764958,             -1.29623517698958, 0.350113758822859, -0.620500978817218,             -2.03909530352893, -2.3872095406538, -0.448313812713761,             1.35509975543578, 0.960779648387702, 0.978455772675148,             0.33026116382822, 0.647546065087784, -1.50685401887726,             0.0865744481403767, 1.570913867796, -3.00985846923776,             -0.61753648425174, 1.32986385897889, 0.518230979454976,             0.601748573964633, 0.345910315077762, 0.760888825641675,             -0.240811990339615, -1.16035794292427), x = c(0.984779968314556,             -1.22473787596427, 0.709726218065825, -0.109219992578064,             1.78260789538833, -0.243444679602975, -1.52710702225461,             0.491834371466622, 0.354503660926992, -0.0176263476303775,             -1.05655032211723, -0.838914666078269, -0.0126257164904259,             1.03811014600433, -0.364457713905061, -0.871449472185395,             -2.7042030254467, 0.494249836540647, 0.427340324999113,             1.30919086010968, 1.4667226423107, -0.143056066294616,             1.29851372621074, 0.00131354755592194, -0.676410075685581,             -0.848196596885468, -0.346941100407436, 0.227479443027071,             -0.0274014036111113, 0.200877790585033, 0.198942671822796,             0.71459935608369, -0.273181774889849, 1.63534745793173,             0.437693886479643, -1.19353585074908, -0.276649804199181,             0.515883050535119, -0.411055332086343, 0.344995049472574,             0.434395860831138, 1.30347768300503, -0.651695910733076,             -0.0168808623279884, -0.567692455293591, -1.12713286976328,             -1.84897031117903, 0.19552905518189, 0.601565225195587,             0.639158159789933, -1.38999281746208, -1.12967785339758,             -1.14115419483757, -0.688671499600886, 0.170197818152129,             0.59448342725741, -0.815032650724957, -2.86434683706673,             0.95382348170826, 0.615284770613444, -0.700870700550263,             -1.07366134146979, -0.299991196799737, 0.108106562802571,             0.723200763587674, 1.39009509607427, -0.848883398378404,             0.290722844643498, 1.33417603370242, -0.901342155259083,             -0.222763412932851, -1.7714680282034, 0.287422250114445,             -0.641191762323999, -0.924937642238947, -0.779977469185323,             0.444503373594371, -2.16246900261166, -0.425510899920945,             -1.01371765920455, -0.962119028303747, 0.474634627277364,             0.351754269604537, -0.107020356246981, 0.537517256600346,             -0.60210489844813, -2.02329764533368, 1.15442128059814,             -0.230692997694109, -0.365088768214911, 0.157517929375723,             0.765932222984396, 0.426086966202313, 0.927265399965311,             0.0461345928404875, -0.504285643091111, -0.300449408355562,             0.822915978645871, -0.849268796129039, -0.953610095681196            )), terms = y ~ m + x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\")), class = c(\"lm_list_lmhelprs\", \"lm_list\", \"list\"), cases_removed = integer(0), call = (function (models,     data, na_omit_all = TRUE, ...) {    my_call <- match.call()    my_call$na_omit_all <- NULL    my_call[[1L]] <- quote(stats::lm)    my_mm <- my_call    my_mm[[1L]] <- quote(stats::model.frame)    my_mm$models <- NULL    if (is.null(my_call$data) && na_omit_all) {        stop(\"The argument 'data' must be set if na_omit_all is TRUE.\")    }    models1 <- parse_models(models)    data_full <- eval(my_call$data, envir = parent.frame())    if (na_omit_all) {        all_vars <- sapply(models1, function(x) {            all.vars(stats::as.formula(x))        }, USE.NAMES = FALSE)        all_vars <- unique(unlist(all_vars))        if (!is.null(my_call$subset)) {            all_ys <- sapply(models1, function(x) {                all.vars(stats::as.formula(x))[1]            }, USE.NAMES = FALSE)            ys1 <- all_ys[1]            f0 <- paste(ys1, \"~\", paste(setdiff(all_vars, ys1),                 collapse = \" + \"))            my_mm0 <- my_mm            my_mm0$formula <- f0            my_mm0$na.action <- \"na.pass\"            data_selected <- tryCatch(eval(my_mm0, envir = parent.frame()),                 error = function(e) e)            if (inherits(data_selected, \"error\")) {                subset_i <- eval(my_mm0$subset, envir = parent.frame())                if (is.logical(subset_i)) {                  subset_i <- sapply(subset_i, isTRUE)                  omitted_subset <- which(!subset_i)                }                else if (is.character(subset_i)) {                  omitted_subset <- !(row.names(data_full) %in%                     subset_i)                  omitted_subset[is.na(omitted_subset)] <- TRUE                  omitted_subset <- which(omitted_subset)                }                else {                  omitted_subset <- setdiff(seq_len(nrow(data_full)),                     subset_i)                }            }            else {                subset_i <- match(row.names(data_selected), row.names(data_full))                subset_i <- stats::na.omit(subset_i)                omitted_subset <- setdiff(seq_len(nrow(data_full)),                   subset_i)            }        }        else {            omitted_subset <- numeric(0)        }        data <- stats::na.omit(eval(my_call$data, envir = parent.frame())[,             all_vars])        data_omitted <- attr(data, \"na.action\")        if (!is.null(data_omitted)) {            omitted_listwise <- as.numeric(data_omitted)        }        else {            omitted_listwise <- numeric(0)        }        omitted <- c(omitted_subset, omitted_listwise)        omitted <- unique(sort(omitted))        selected <- !logical(nrow(data_full))        selected[omitted] <- FALSE        my_call$subset <- which(selected)    }    else {        selected <- !logical(nrow(data_full))    }    tmpfct <- function(x, env = parent.frame()) {        call0 <- my_call        call0$models <- NULL        call0$formula <- stats::as.formula(x, env = env)        outtmp <- eval(call0, envir = env)        outtmp    }    out1 <- lapply(models1, tmpfct, env = parent.frame())    out2 <- lm2list_free(out1)    attr(out2, \"cases_removed\") <- which(!selected)    attr(out2, \"call\") <- match.call()    out2})(models = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709, 0.930529644374821, 0.557320722786814, -0.692166865367821, -0.939274449272328, 1.68758164539185, -0.320021387136598, 0.722736325747294, 1.08696505157531, 0.171554944096819, -0.406084738901945, 0.273273924442898, -0.578942473936388, 0.909732644799622, -0.953925916232302, 1.62686486248796, -0.407542116007663, -0.224553255258458, 0.576556170194857, -0.0198423203404459, -0.0916619666490127, -1.50816234572148, -0.174241484823815, -0.938029583131136, 0.928662700189895, -0.840560169178208, 1.06637561383764, -0.558884240508369, 0.338681474580503, 1.07168756605309, -0.576803202046139, 1.01950490723839, 0.0473866323088989, -1.44098487054193, -0.340634469696, 1.69994597739946, -0.327584720460549, -0.676616234773644, 0.0787841731927249, 0.705978328563829, 0.715812826780308, 1.08620391357595, -0.0744154801576535, 0.772794118903362, -1.28374861763219, -2.17786452842703, -0.269487742712578, -0.300347325770247, -2.62635552205575, 0.197660502643827, -1.09002008904231, -0.422243208979879, -1.46294041116351, 0.700649828063935, 1.55960579541675, -1.69693622842964, 0.178772686798053, 2.043539216178, 0.680542796051261, 1.50284397455591, -0.0949903320836854, -0.112814860635238, -0.26919738698994, 1.78552462184234, -1.48127680219839, 0.380375930477497, 0.356067745465296, 1.87771752195261, -0.646856233384368, -1.97120955991676, 0.308143239463555, -0.230179974145403, -1.07795558945667, -0.107795585681388, -0.129482844764958, -1.29623517698958, 0.350113758822859, -0.620500978817218, -2.03909530352893, -2.3872095406538, -0.448313812713761, 1.35509975543578, 0.960779648387702, 0.978455772675148, 0.33026116382822, 0.647546065087784, -1.50685401887726, 0.0865744481403767, 1.570913867796, -3.00985846923776, -0.61753648425174, 1.32986385897889, 0.518230979454976, 0.601748573964633, 0.345910315077762, 0.760888825641675, -0.240811990339615, -1.16035794292427), y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909, -0.31360760280103, 0.640175146926015, -0.213196392482659, 0.79760306542824, -0.127458830395686, -0.608428327270797, 0.296462080432809, -0.675699447934353, -0.160785042341766, -0.816336600011713, -1.72327297092188, -0.535281428595674, -0.00765373905760863, 0.504252652768121, 0.290293398421208, 0.279048146683646, 0.0112439636534965, -0.782874281888901, 0.314097024690366, -0.137704261235468, -0.610267273940993, 0.482754152828057, -0.370320007780895, 1.83711945518766, -0.320207869670493, -0.552807217421982, 0.363031624793193, -0.889723127628635, -1.12596728225233, -0.989827090143935, -0.135156944128649, -0.502422245847366, 0.671002166714933, 1.24615343604938, 1.47878632390233, -1.26696576554576, -0.318262612371445, 0.461251449812912, 0.234319865433172, 0.506642364182273, -0.275113574856366, -1.1523196355089, 1.60555795178744, -0.410322767817899, -1.44261499715763, 0.146949268211736, 1.63598725465829, -0.99909896430973, 1.32114252865484, 0.639318072702142, -0.563746491712262, -0.0710896951888477, -0.213631541678839, -0.496420443744945, -1.88914122076051, -0.0394093687246016, 2.57807132340186, 0.431038410226631, 0.0561439072327621, 0.152015405319829, 0.548056818220597, -1.25627629638571, -0.0206175507163967, -2.42211981133594, -0.909283759946111, -0.590510681738354, 0.686052294710227, 0.89774915490782, -0.216018726494471, 0.390474315164319, -0.605815891489038, -0.573798023956782, 0.420348323013462, -0.501247083246725, 0.269064048092409, 1.12547954741865, -1.32047313229652, -1.66639182067291, -0.148538371524439, -1.68533218467757, 1.04102930892646, 0.682605683525256, 3.25695951166719, -2.1988419377994, -0.404377490884628, -0.169701059508333, 1.49329651567534, 1.51264727973354, -2.74193258577351, 1.63059880130779, -0.856905261795034, -0.70478471721872, 0.263513612781986, 2.10036995898208, 0.818927439813178, 0.512135540197413, 0.916380125290656), x = c(0.984779968314556, -1.22473787596427, 0.709726218065825, -0.109219992578064, 1.78260789538833, -0.243444679602975, -1.52710702225461, 0.491834371466622, 0.354503660926992, -0.0176263476303775, -1.05655032211723, -0.838914666078269, -0.0126257164904259, 1.03811014600433, -0.364457713905061, -0.871449472185395, -2.7042030254467, 0.494249836540647, 0.427340324999113, 1.30919086010968, 1.4667226423107, -0.143056066294616, 1.29851372621074, 0.00131354755592194, -0.676410075685581, -0.848196596885468, -0.346941100407436, 0.227479443027071, -0.0274014036111113, 0.200877790585033, 0.198942671822796, 0.71459935608369, -0.273181774889849, 1.63534745793173, 0.437693886479643, -1.19353585074908, -0.276649804199181, 0.515883050535119, -0.411055332086343, 0.344995049472574, 0.434395860831138, 1.30347768300503, -0.651695910733076, -0.0168808623279884, -0.567692455293591, -1.12713286976328, -1.84897031117903, 0.19552905518189, 0.601565225195587, 0.639158159789933, -1.38999281746208, -1.12967785339758, -1.14115419483757, -0.688671499600886, 0.170197818152129, 0.59448342725741, -0.815032650724957, -2.86434683706673, 0.95382348170826, 0.615284770613444, -0.700870700550263, -1.07366134146979, -0.299991196799737, 0.108106562802571, 0.723200763587674, 1.39009509607427, -0.848883398378404, 0.290722844643498, 1.33417603370242, -0.901342155259083, -0.222763412932851, -1.7714680282034, 0.287422250114445, -0.641191762323999, -0.924937642238947, -0.779977469185323, 0.444503373594371, -2.16246900261166, -0.425510899920945, -1.01371765920455, -0.962119028303747, 0.474634627277364, 0.351754269604537, -0.107020356246981, 0.537517256600346, -0.60210489844813, -2.02329764533368, 1.15442128059814, -0.230692997694109, -0.365088768214911, 0.157517929375723, 0.765932222984396, 0.426086966202313, 0.927265399965311, 0.0461345928404875, -0.504285643091111, -0.300449408355562, 0.822915978645871, -0.849268796129039, -0.953610095681196)), class = \"data.frame\", row.names = c(NA, -100L)))), structure(list(structure(list(coefficients = c(`(Intercept)` = -0.0827235584389019, x = 0.239791041380513), residuals = c(`1` = 0.320113267479929, `2` = 0.583436859872225, `3` = -1.53343057720771, `4` = 0.940314400137382, `5` = 0.0881080150171858, `6` = -0.0433863282700166, `7` = 1.07230458062952, `8` = 1.48063131869985, `9` = -0.9777417598371, `10` = 1.02640859395056, `11` = -0.472952181178468, `12` = 0.250776079777491, `13` = 0.503401776462985, `14` = 0.163288092213762, `15` = -1.1707984690133, `16` = -0.411946146648389, `17` = 1.5518672207355, `18` = 0.244274005433573, `19` = -0.748812792780607, `20` = -0.598804801761755, `21` = 1.0231958739356, `22` = 0.467894887036559, `23` = -0.832507671280345, `24` = 0.128888790700715, `25` = 0.73660059700975, `26` = 1.79564192000858, `27` = -0.76676602514544, `28` = -0.312193789621622, `29` = 0.967992897465111, `30` = -0.356367466645986, `31` = 1.46172275004417, `32` = 1.08732725479393, `33` = -1.5362674582615, `34` = 0.525027050445377, `35` = -1.22807218390805, `36` = -1.24972601224718, `37` = 0.285356321222464, `38` = 0.148725001915632, `39` = 0.0168689014654811, `40` = 1.28411557092973, `41` = 0.266108705341356, `42` = -0.551537807796386, `43` = 0.171174181656719, `44` = -0.383533891994184, `45` = 0.00156447671382709, `46` = -1.09555764875588, `47` = -0.0250100252222309, `48` = 0.0994411738964406, `49` = -0.532689254435317, `50` = 0.0119112240133728, `51` = -0.54470426689631, `52` = -0.504046178816138, `53` = -0.203793239046614, `54` = 0.635191615002516, `55` = -0.166460793928599, `56` = 0.234145868149363, `57` = 1.01790171815053, `58` = -0.209697246848144, `59` = -0.0784964867678125, `60` = 0.595075117576939, `61` = -1.14904987288503, `62` = 0.631996329005043, `63` = -0.457988016092331, `64` = -1.06053820496786, `65` = -1.60954238302446, `66` = -0.560220112435391, `67` = -1.01898831193233, `68` = -1.04499268737748, `69` = 1.517785905184, `70` = -0.986200754199921, `71` = 1.03188264609016, `72` = 0.55083434896237, `73` = -0.773455022810464, `74` = -0.484623440014209, `75` = -0.400000192862274, `76` = 0.307550926401431, `77` = -0.234695704614291, `78` = 0.943903182492403, `79` = -0.137113553777403, `80` = -2.01527391915332, `81` = -0.0385808095291889, `82` = -1.74386966856896, `83` = 0.955560607222291, `84` = -0.573665266820248, `85` = -0.873242048320092, `86` = -0.425639036106722, `87` = 0.530819408264896, `88` = -1.69797989319844, `89` = 0.387242008842658, `90` = -0.80756175172942, `91` = 0.0231277797606494, `92` = 0.794581326511468, `93` = 0.670038568408161, `94` = 1.55635546808256, `95` = 0.182899052456487, `96` = -0.53523208348493, `97` = 2.143948131287, `98` = -0.210635197406964, `99` = 0.942642193659394, `100` = 1.01642444511173), effects = c(`(Intercept)` = 0.783774811983872, x = 2.20356225084733, -1.56108599766031, 1.01086001082687, 0.057797785903537, -0.0274121157060734, 0.989040332383158, 1.44387346448978, -0.972913972582932, 0.982612918387186, -0.456554294909864, 0.262358614812468, 0.44494229018764, 0.0974785683620673, -1.07138369815893, -0.447168020470212, 1.52715967855029, 0.216337477154921, -0.803866038624575, -0.67279785827027, 0.938182189278643, 0.491086973008502, -0.909619989222475, 0.139069090588571, 0.785799325021414, 1.83170535168459, -0.799147942048647, -0.365722163207997, 0.885979947295982, -0.382404366353692, 1.42438572988435, 1.07052117752776, -1.59321077693641, 0.533177517353826, -1.21542737636812, -1.21798579402596, 0.379066387930797, 0.134114878684149, -0.0385718013228319, 1.2549767339546, 0.155112052436803, -0.569736006673602, 0.123645447996294, -0.387157072441843, -0.0376832906277457, -1.19351831470177, -0.0481357358024221, 0.00294493311645005, -0.51039230188207, -0.109719657153341, -0.57725108979397, -0.504925804658158, -0.309072491241854, 0.683992288938672, -0.238255800784616, 0.182359155032495, 1.00146721433599, -0.252552423290648, -0.158242483598303, 0.591627529788013, -1.20178118582916, 0.633678052817397, -0.509689871305991, -1.13612947933749, -1.63959521822724, -0.550992485657576, -1.03125286356777, -1.07316086643328, 1.38990274484412, -0.934634443782557, 1.00471720282104, 0.48016598319012, -0.809159454903281, -0.495888457601711, -0.505212604683438, 0.320361448422174, -0.246722119393498, 0.982341584370838, -0.110116447880238, -2.06872937494351, -0.0895203549869184, -1.82148103861377, 0.911408930547539, -0.548868729046258, -0.803686466931023, -0.401684274227801, 0.409158016097589, -1.67964903444829, 0.416890784455931, -0.800024452088583, -0.0470619118664078, 0.825721015292908, 0.683491707198599, 1.56628084880688, 0.137707165614016, -0.515633516783485, 2.12478220467163, -0.239269847600874, 0.996090742203524, 1.03134211007966), rank = 2L,     fitted.values = c(`1` = -0.32825346792681, `2` = -0.415469736086512,     `3` = -0.0945263407202566, `4` = 0.351528601022864, `5` = -0.106585180722931,     `6` = 0.103650940995963, `7` = -0.347116279476144, `8` = -0.135871991699523,     `9` = 0.0530209421622312, `10` = -0.167839629485359, `11` = 0.105575378524291,     `12` = 0.0837027852428641, `13` = -0.234446519013802, `14` = -0.26783232509749,     `15` = 0.482659928319046, `16` = -0.128895164321747, `17` = -0.0811363013944342,     `18` = -0.095803206487464, `19` = -0.218974478043251, `20` = -0.305004085312604,     `21` = -0.355062680314666, `22` = 0.136436422625535, `23` = -0.319172592108013,     `24` = 0.0773334639680787, `25` = 0.254565438838981, `26` = 0.194901464096211,     `27` = -0.115995332179936, `28` = -0.212048106719899, `29` = -0.341432554117528,     `30` = -0.0871745933080292, `31` = -0.138502715949241, `32` = -0.0452457671183821,     `33` = -0.22755968653536, `34` = 0.0681134280799881, `35` = 0.0885279066779783,     `36` = 0.175264290195949, `37` = 0.45674765992504, `38` = -0.0352711656542231,     `39` = -0.220734409509631, `40` = -0.101264409178796, `41` = -0.473084163930484,     `42` = -0.0515691500492257, `43` = -0.184796162351038, `44` = 0.0146344215517016,     `45` = -0.147181832786744, `46` = -0.413871278528113, `47` = -0.0739512057165321,     `48` = -0.407219473812172, `49` = 0.132370490931283, `50` = -0.521387628902224,     `51` = -0.116744378629788, `52` = 0.0270963690033169, `53` = -0.447114224402815,     `54` = 0.252757372412425, `55` = -0.295019965000519, `56` = -0.204137026253361,     `57` = -0.0435579826583633, `58` = -0.163567634826144, `59` = -0.331135455119276,     `60` = 0.0154320096447257, `61` = -0.208427647400823, `62` = 0.0387306935880811,     `63` = -0.203751579312203, `64` = -0.312263611680501, `65` = -0.105416029802785,     `66` = 0.0730061718443896, `67` = -0.0246169618290653, `68` = -0.0968554253155716,     `69` = -0.549787127256942, `70` = 0.265319621557473, `71` = -0.0923007353320535,     `72` = -0.289902464530915, `73` = -0.131087071055852, `74` = -0.020076814986039,     `75` = -0.446810617823357, `76` = 0.0892806254857442, `77` = -0.0235352815218692,     `78` = 0.205689204132758, `79` = 0.153719825063749, `80` = -0.211716894888893,     `81` = -0.200288967669364, `82` = -0.321439418168794, `83` = -0.169456680275457,     `84` = 0.143724265194685, `85` = 0.347031627245825, `86` = 0.139900697422851,     `87` = -0.521526217901072, `88` = 0.114355448525795, `89` = 0.165764407151989,     `90` = 0.0653282608912892, `91` = -0.287728200518976, `92` = 0.172536527349056,     `93` = 0.0921995600675513, `94` = 0.076175554001978, `95` = -0.174181588765381,     `96` = 0.120113711853434, `97` = -0.0559648242580266, `98` = -0.0989742600560327,     `99` = 0.273869242760195, `100` = 0.0988518236047657), assign = 0:1,     qr = structure(list(qr = structure(ce-05, 0.168813331139415, -0.0224746679716495,     0.037985168028256, -0.0525185533102509, 0.0209153849759143,     0.141941893593413, -0.0123174529173892, 0.13892323382404,     -0.105948434555634, 0.190733957594677, 0.00710254436056444,     -0.0581739176852865, 0.157027896206645, -0.160581282542955,     0.088005902685104, 0.0467622578948509, -0.0261102209893971,     0.0283514363210028, 0.104395496446238, -0.0528805072748904,     0.0487093874328579, -0.0634536979956864, 0.0465873379709823,     0.0958312530573714, 0.00196161910526591, -0.079008274792021,     -0.0347058578142768, -0.00192327431397909, 0.203621952178809,     -0.166282164893893, -0.0039902411000396, 0.0856835265109631,     0.0136114108201112, -0.0367662247684122, 0.15689011630987,     -0.0863937950490941, -0.0351967358490498, -0.139221246872727,     -0.115636989587041, 0.0502020829474981, 0.0450159679579464,     0.0999953316917572, 0.031023947817807, -0.11110089814455,     -0.203363942663925, -0.10936572239884, 0.190796850757234,     -0.0977730165938493, -0.121102949118526, -0.0755239570922837,     0.084696822363575, -0.124176209333646, -0.0877184386259591,     -0.0804465741440678, 0.0331681615735595, -0.100386177772039,     -0.0204798642364201, -0.000961724559872364, -0.17016207398175,     -0.0907373066133085), dim = c(100L, 2L), dimnames = list(        c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",         \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",         \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\",         \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\",         \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\",         \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\",         \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\",         \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\",         \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",         \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\",         \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"        ), c(\"(Intercept)\", \"x\")), assign = 0:1), qraux = c(1.1,     1.14266729064439), pivot = 1:2, tol = 1e-07, rank = 2L), class = \"qr\"),     df.residual = 98L, xlevels = structure(list(), names = character(0)),     call = stats::lm(formula = m ~ x, data = structure(list(m = c(-0.00814020044688141,     0.167967123785712, -1.62795691792796, 1.29184300116025, -0.0184771657057447,     0.0602646127259461, 0.725188301153378, 1.34475932700033,     -0.924720817674869, 0.8585689644652, -0.367376802654177,     0.334478865020355, 0.268955257449183, -0.104544232883729,     -0.688138540694256, -0.540841310970137, 1.47073091934107,     0.148470798946109, -0.967787270823859, -0.903808887074359,     0.668133193620937, 0.604331309662094, -1.15168026338836,     0.206222254668794, 0.99116603584873, 1.99054338410479, -0.882761357325375,     -0.524241896341522, 0.626560343347583, -0.443542059954015,     1.32322003409493, 1.04208148767555, -1.76382714479686, 0.593140478525365,     -1.13954427723008, -1.07446172205123, 0.742103981147505,     0.113453836261409, -0.20386550804415, 1.18285116175094, -0.206975458589128,     -0.603106957845612, -0.0136219806943186, -0.368899470442482,     -0.145617356072917, -1.509428927284, -0.098961230938763,     -0.307778299915731, -0.400318763504034, -0.509476404888851,     -0.661448645526099, -0.476949809812821, -0.650907463449429,     0.887948987414941, -0.461480758929118, 0.0300088418960022,     0.974343735492169, -0.373264881674288, -0.409631941887088,     0.610507127221665, -1.35747752028585, 0.670727022593124,     -0.661739595404534, -1.37280181664836, -1.71495841282725,     -0.487213940591002, -1.0436052737614, -1.14184811269305,     0.967998777927062, -0.720881132642448, 0.939581910758106,     0.260931884431455, -0.904542093866316, -0.504700255000248,     -0.846810810685631, 0.396831551887176, -0.25823098613616,     1.14959238662516, 0.0166062712863464, -2.22699081404222,     -0.238869777198553, -2.06530908673775, 0.786103926946834,     -0.429941001625563, -0.526210421074268, -0.285738338683871,     0.00929319036382326, -1.58362444467265, 0.553006415994647,     -0.742233490838131, -0.264600420758326, 0.967117853860525,     0.762238128475713, 1.63253102208454, 0.00871746369110592,     -0.415118371631495, 2.08798330702898, -0.309609457462997,     1.21651143641959, 1.11527626871649), y = c(0.389886673115764,     1.31843409056788, -0.994970123526719, -0.420504588403101,     -0.321530441363213, -0.443768312278922, 0.646647025424089,     -0.135881700440692, 0.127239060610954, -0.578667243346392,     1.33657546929283, 1.42266221623004, -0.254190191454151, 0.0690297140111326,     -0.667659946681306, -1.3152232490055, -1.56942776288785,     0.0525029308099555, -0.513661749400436, 0.970420206410657,     -1.39405431524841, -0.271291043761853, 0.186295125941764,     0.399627330992032, 0.601024949816664, 0.457676866485655,     -0.267356972173323, -0.466420972447583, 0.411713584660471,     -0.722272394684956, 1.69093740222961, 1.4389724870837, 0.275752996927813,     -0.0214075904225611, -0.833335456257173, -0.840581914041809,     1.56109626357356, -0.202838641867873, -0.0173782388208663,     0.921544097368724, 0.483861574076099, -0.533365332591791,     2.02485487137291, -0.98768366878004, -1.30824343040963, -0.718079281632652,     1.48117032930771, -0.108206026592038, -0.105133843681358,     0.492817191242108, -0.416437632387497, -0.14867106171104,     0.721124870707462, 0.525160929442882, -0.88216167351009,     0.357018827927476, -0.458112556836835, -1.44955072702983,     -0.311087927071662, -0.648179084141866, -0.175644622285204,     0.208103252488642, -0.994535042154295, 0.719069622435714,     -0.952690510454673, 0.987625550179094, -0.62002814663546,     -0.856089716737864, 0.807426088080981, 0.531468718128727,     2.81306088317972, -0.765823473827937, -0.611125964328616,     0.681027204222692, -0.127553611787498, 0.0361714382197732,     -1.25742457860655, 0.333471059467234, -0.15169844253015,     -1.18431679703132, 1.27680746181135, -1.43270617940003, -0.971847634677628,     0.214953152143963, -0.360060031374152, -0.319838343097406,     0.55506477005216, -3.30906570708085, -0.20297890390857, -0.504009926941532,     0.391896752939163, 0.257520584079299, -0.489356378531118,     1.13891723062622, 0.021199614718457, -0.111838423833238,     2.04561103315638, -0.624381421726574, -0.473584327671255,     -0.550885291594103), x = c(-1.02393278779038, -1.38765057998806,     -0.0492211144061267, 1.81096073048314, -0.0995100657082667,     0.777237124297383, -1.10259632518001, -0.221644782701794,     0.5660949625959, -0.354959345255063, 0.785262601468044, 0.694047378599404,     -0.632729895584955, -0.771958641961308, 2.3578173876011,     -0.19254933635981, 0.00661933421419712, -0.0545460246273611,     -0.568206880540376, -0.926975943696645, -1.1357351813807,     0.913962339054452, -0.986062833322873, 0.66748541348963,     1.40659548970662, 1.15777896011788, -0.138753197573533, -0.539321850960138,     -1.07889349906152, -0.0185621399511091, -0.232615685678704,     0.15629354251416, -0.604009754754033, 0.629035120121665,     0.714169570852022, 1.07588610128876, 2.24975551737932, 0.197890598879292,     -0.575546318478704, -0.0773208650045946, -1.62791988910102,     0.129923153969037, -0.425673133260061, 0.406011748521125,     -0.268810185638072, -1.38098453629771, 0.0365833213445593,     -1.35324453117639, 0.897006193942258, -1.82935971226393,     -0.141876944171991, 0.457981777842779, -1.51961751308999,     1.39905531466027, -0.885339190903023, -0.506330291221321,     0.163332105966331, -0.337143856258392, -1.03595153200983,     0.409337928216715, -0.524223458216886, 0.506500373524185,     -0.504722862774708, -0.957250328953504, -0.0946343584532563,     0.649439317610584, 0.242321799327066, -0.0589340902617142,     -1.94779407157618, 1.4514436318915, -0.0399396776377224,     -0.863997691069911, -0.201690239712518, 0.261255562727432,     -1.51835138330586, 0.717308632275803, 0.246832728096417,     1.20276704630509, 0.986039270447351, -0.537940599062239,     -0.490282741813956, -0.995516172562447, -0.361702928254615,     0.944354811296923, 1.79220701161545, 0.928409395864299, -1.82993766963068,     0.821878106163116, 1.0362687620034, 0.617420144129801, -0.854930363118786,     1.06451051848471, 0.729481458103667, 0.66265658435809, -0.381407202704243,     0.845891777793581, 0.111591884445813, -0.0677702616560359,     1.48709809651828, 0.75722337664623)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = m ~ x, model = structure(list(        m = c(-0.00814020044688141, 0.167967123785712, -1.62795691792796,         1.29184300116025, -0.0184771657057447, 0.0602646127259461,         0.725188301153378, 1.34475932700033, -0.924720817674869,         0.8585689644652, -0.367376802654177, 0.334478865020355,         0.268955257449183, -0.104544232883729, -0.688138540694256,         -0.540841310970137, 1.47073091934107, 0.148470798946109,         -0.967787270823859, -0.903808887074359, 0.668133193620937,         0.604331309662094, -1.15168026338836, 0.206222254668794,         0.99116603584873, 1.99054338410479, -0.882761357325375,         -0.524241896341522, 0.626560343347583, -0.443542059954015,         1.32322003409493, 1.04208148767555, -1.76382714479686,         0.593140478525365, -1.13954427723008, -1.07446172205123,         0.742103981147505, 0.113453836261409, -0.20386550804415,         1.18285116175094, -0.206975458589128, -0.603106957845612,         -0.0136219806943186, -0.368899470442482, -0.145617356072917,         -1.509428927284, -0.098961230938763, -0.307778299915731,         -0.400318763504034, -0.509476404888851, -0.661448645526099,         -0.476949809812821, -0.650907463449429, 0.887948987414941,         -0.461480758929118, 0.0300088418960022, 0.974343735492169,         -0.373264881674288, -0.409631941887088, 0.610507127221665,         -1.35747752028585, 0.670727022593124, -0.661739595404534,         -1.37280181664836, -1.71495841282725, -0.487213940591002,         -1.0436052737614, -1.14184811269305, 0.967998777927062,         -0.720881132642448, 0.939581910758106, 0.260931884431455,         -0.904542093866316, -0.504700255000248, -0.846810810685631,         0.396831551887176, -0.25823098613616, 1.14959238662516,         0.0166062712863464, -2.22699081404222, -0.238869777198553,         -2.06530908673775, 0.786103926946834, -0.429941001625563,         -0.526210421074268, -0.285738338683871, 0.00929319036382326,         -1.58362444467265, 0.553006415994647, -0.742233490838131,         -0.264600420758326, 0.967117853860525, 0.762238128475713,         1.63253102208454, 0.00871746369110592, -0.415118371631495,         2.08798330702898, -0.309609457462997, 1.21651143641959,         1.11527626871649), x = c(-1.02393278779038, -1.38765057998806,         -0.0492211144061267, 1.81096073048314, -0.0995100657082667,         0.777237124297383, -1.10259632518001, -0.221644782701794,         0.5660949625959, -0.354959345255063, 0.785262601468044,         0.694047378599404, -0.632729895584955, -0.771958641961308,         2.3578173876011, -0.19254933635981, 0.00661933421419712,         -0.0545460246273611, -0.568206880540376, -0.926975943696645,         -1.1357351813807, 0.913962339054452, -0.986062833322873,         0.66748541348963, 1.40659548970662, 1.15777896011788,         -0.138753197573533, -0.539321850960138, -1.07889349906152,         -0.0185621399511091, -0.232615685678704, 0.15629354251416,         -0.604009754754033, 0.629035120121665, 0.714169570852022,         1.07588610128876, 2.24975551737932, 0.197890598879292,         -0.575546318478704, -0.0773208650045946, -1.62791988910102,         0.129923153969037, -0.425673133260061, 0.406011748521125,         -0.268810185638072, -1.38098453629771, 0.0365833213445593,         -1.35324453117639, 0.897006193942258, -1.82935971226393,         -0.141876944171991, 0.457981777842779, -1.51961751308999,         1.39905531466027, -0.885339190903023, -0.506330291221321,         0.163332105966331, -0.337143856258392, -1.03595153200983,         0.409337928216715, -0.524223458216886, 0.506500373524185,         -0.504722862774708, -0.957250328953504, -0.0946343584532563,         0.649439317610584, 0.242321799327066, -0.0589340902617142,         -1.94779407157618, 1.4514436318915, -0.0399396776377224,         -0.863997691069911, -0.201690239712518, 0.261255562727432,         -1.51835138330586, 0.717308632275803, 0.246832728096417,         1.20276704630509, 0.986039270447351, -0.537940599062239,         -0.490282741813956, -0.995516172562447, -0.361702928254615,         0.944354811296923, 1.79220701161545, 0.928409395864299,         -1.82993766963068, 0.821878106163116, 1.0362687620034,         0.617420144129801, -0.854930363118786, 1.06451051848471,         0.729481458103667, 0.66265658435809, -0.381407202704243,         0.845891777793581, 0.111591884445813, -0.0677702616560359,         1.48709809651828, 0.75722337664623)), terms = m ~ x, row.names = c(NA,     100L), class = \"data.frame\")), class = \"lm\"), structure(list(    coefficients = c(`(Intercept)` = -0.00391577932119407, m = 0.427344314295511,     x = -0.138146119270245), residuals = c(`1` = 0.255828779788355,     `2` = 1.05887153202222, `3` = -0.302155917352329, `4` = -0.718473373523134,     `5` = -0.323465479739297, `6` = -0.358233980084933, `7` = 0.188338304008515,     `8` = -0.737260540195697, `9` = 0.604532845897258, `10` = -0.99069228546568,     `11` = 1.60596861743322, `12` = 1.37952030627597, `13` = -0.452620091825079,     `14` = 0.0109787862234911, `15` = -0.0439487525018131, `16` = -1.10678195409126,     `17` = -2.19310604447182, `18` = -0.0145647632612711, `19` = -0.1746631579344,     `20` = 1.23251544555427, `21` = -1.83255886523966, `22` = -0.399372463275986,     `23` = 0.546154163928153, `24` = 0.407625721842403, `25` = 0.375687267481081,     `26` = -0.229112081435854, `27` = 0.0946336382995377, `28` = -0.312978620157131,     `29` = -0.00117258631221126, `30` = -0.531375725491092, `31` = 1.09724766916052,     `32` = 1.01915201397947, `33` = 0.949988674357391, `34` = -0.1840682614482,     `35` = -0.243782154459615, `36` = -0.228871537204023, `37` = 1.55867311996808,     `38` = -0.220068896132767, `39` = -0.00585118411414826, `40` = 0.409293580618812,     `41` = 0.35133632366191, `42` = -0.253766844399039, `43` = 1.97578683525578,     `44` = -0.770031850782307, `45` = -1.27923398587414, `46` = -0.259895286865217,     `47` = 1.53243047188003, `48` = -0.159708421144017, `49` = 0.19377380778359,     `50` = 0.461735870461678, `51` = -0.149455284453539, `52` = 0.122334912343456,     `53` = 0.793272991457801, `54` = 0.342890819972571, `55` = -0.803340889164871,     `56` = 0.278162934484623, `57` = -0.848013336456184, `58` = -1.33269743817684,     `59` = -0.275230950330414, `60` = -0.848611608222476, `61` = 0.335962020731028,     `62` = -0.00464128672839672, `63` = -0.777554113992055, `64` = 1.17740403464104,     `65` = -0.228970373528447, `66` = 1.28946695828678, `67` = -0.136657771011904,     `68` = -0.372353154530612, `69` = 0.128592901284204, `70` = 1.0439602558529,     `71` = 2.40993416365297, `72` = -0.992773379816699, `73` = -0.248521988063665,     `74` = 0.936715210070296, `75` = 0.0284876014718608, `76` = -0.0304030860231323,     `77` = -1.10905627208974, `78` = 0.0122726684399408, `79` = -0.0186617601644603,     `80` = -0.303023561499216, `81` = 1.31507222414861, `82` = -0.683719000508867,     `83` = -1.3538367548496, `84` = 0.533060726387213, `85` = 0.116315223099775,     `86` = -0.0655577542307291, `87` = 0.302210369743795, `88` = -2.5148577544698,     `89` = -0.292230764239875, `90` = -0.0976106885601457, `91` = 0.390782705720467,     `92` = -0.00479795564946044, `93` = -0.71040369703665, `94` = 0.536723595286495,     `95` = -0.0312998894191313, `96` = 0.186332497789078, `97` = 1.17265500365304,     `98` = -0.497517999756161, `99` = -0.78410096297127, `100` = -0.918969013673228    ), effects = c(`(Intercept)` = 0.399137706954752, m = -3.52634103243821,     x = 1.23068688805953, -0.865956048287928, -0.353203276196786,     -0.38242659056465, 0.0571995945899345, -0.924444612926447,     0.68914148607242, -1.12465381419272, 1.63066453628076, 1.32268643553137,     -0.523960524261096, -0.0200850037201211, 0.0433653933161812,     -1.07850589097588, -2.3908711951281, -0.0625915826842817,     -0.103933237955236, 1.29000845591707, -1.95774161264909,     -0.483329630662105, 0.630928379588666, 0.364974469748113,     0.255786944933471, -0.467073308726921, 0.162783250222639,     -0.292339056000673, -0.120674059800894, -0.511310844574918,     0.912337577416973, 0.872736607931936, 1.11088242167331, -0.271469134336759,     -0.132228662948644, -0.118746610690271, 1.48113470611566,     -0.259922017371917, -0.022337906613483, 0.242959335221903,     0.317772493984264, -0.213050363474888, 1.94009288283026,     -0.751444300036777, -1.29728078349613, -0.140875524247637,     1.5141229719809, -0.177229908667716, 0.224076392381222, 0.459323633042139,     -0.106589378625522, 0.154102171271651, 0.812115990324681,     0.234633423915147, -0.795588234350222, 0.236158594649945,     -0.986589342452484, -1.32592192607735, -0.275884368418297,     -0.941631558024998, 0.451849252996524, -0.102917521097577,     -0.740665271191224, 1.28786567477031, -0.065210802123729,     1.32557576695565, -0.0438580867749343, -0.273342806974014,     -0.0442287246390142, 1.11999408843264, 2.27195434486596,     -1.06702981835093, -0.178931642996782, 0.968387707387128,     0.0696866032691834, -0.0939605123226421, -1.10572275128264,     -0.129066160086178, -0.0344182329450275, -0.0882299321640424,     1.30398867315243, -0.494938129743439, -1.47964821310008,     0.567524845571578, 0.175799014333577, -0.0477983691171004,     0.240643399206647, -2.35089037879691, -0.368310454952646,     -0.032957354281033, 0.376592639179725, -0.127622880829209,     -0.815419662389954, 0.331378240285701, -0.0688075446261307,     0.217475725629382, 0.906255405975148, -0.493537927071668,     -0.928359560819725, -1.06377549818059), rank = 3L, fitted.values = c(`1` = 0.13405789332741,     `2` = 0.259562558545656, `3` = -0.69281420617439, `4` = 0.297968785120034,     `5` = 0.001935038376084, `6` = -0.0855343321939884, `7` = 0.458308721415575,     `8` = 0.601378839755005, `9` = -0.477293785286303, `10` = 0.412025042119288,     `11` = -0.269393148140388, `12` = 0.0431419099540762, `13` = 0.198429900370929,     `14` = 0.0580509277876415, `15` = -0.623711194179493, `16` = -0.208441294914244,     `17` = 0.623678281583977, `18` = 0.0670676940712266, `19` = -0.338998591466036,     `20` = -0.262095239143611, `21` = 0.438504549991247, `22` = 0.128081419514134,     `23` = -0.359859037986389, `24` = -0.00799839085037118, `25` = 0.225337682335583,     `26` = 0.686788947921509, `27` = -0.36199061047286, `28` = -0.153442352290452,     `29` = 0.412886170972683, `30` = -0.190896669193864, `31` = 0.593689733069085,     `32` = 0.419820473104229, `33` = -0.674235677429577, `34` = 0.162660671025639,     `35` = -0.589553301797558, `36` = -0.611710376837786, `37` = 0.00242314360548046,     `38` = 0.0172302542648939, `39` = -0.011527054706718, `40` = 0.512250516749913,     `41` = 0.132525250414189, `42` = -0.279598488192752, `43` = 0.0490680361171287,     `44` = -0.217651817997734, `45` = -0.0290094445354867, `46` = -0.458183994767436,     `47` = -0.0512601425723267, `48` = 0.051502394551979, `49` = -0.298907651464948,     `50` = 0.0310813207804301, `51` = -0.266982347933958, `52` = -0.271005974054496,     `53` = -0.0721481207503392, `54` = 0.18227010947031, `55` = -0.0788207843452191,     `56` = 0.0788558934428537, `57` = 0.389900779619349, `58` = -0.116853288852986,     `59` = -0.0358569767412485, `60` = 0.20043252408061, `61` = -0.511606643016232,     `62` = 0.212744539217039, `63` = -0.21698092816224, `64` = -0.458334412205329,     `65` = -0.723720136926225, `66` = -0.301841408107688, `67` = -0.483370375623556,     `68` = -0.483736562207252, `69` = 0.678833186796777, `70` = -0.512491537724172,     `71` = 0.403126719526751, `72` = 0.226949905988762, `73` = -0.362603976264951,     `74` = -0.255688005847603, `75` = -0.156041213259359, `76` = 0.0665745242429055,     `77` = -0.148368306516813, `78` = 0.321198391027294, `79` = -0.13303668236569,     `80` = -0.881293235532108, `81` = -0.0382647623372576, `82` = -0.748987178891159,     `83` = 0.381989120171968, `84` = -0.31810757424325, `85` = -0.476375254473927,     `86` = -0.254280588866677, `87` = 0.252854400308366, `88` = -0.79420795261105,     `89` = 0.0892518603313055, `90` = -0.406399238381386, `91` = 0.00111404721869657,     `92` = 0.26231853972876, `93` = 0.221047318505532, `94` = 0.602193635339727,     `95` = 0.0524995041375883, `96` = -0.298170921622316, `97` = 0.872956029503336,     `98` = -0.126863421970413, `99` = 0.310516635300014, `100` = 0.368083722079125    ), assign = 0:2, qr = structure(list(qr = structure(ce-05, -0.044890488434858, -0.0858978267025449,     -0.127391874433219, 0.103422238357185, -0.0896825260516876,     0.0803289073575933, 0.154276443381947, 0.114864302202671,     0.00233932548334431, -0.0467441488194373, -0.120533681246108,     0.0107845829673819, -0.0335421093851053, 0.0133435249758228,     -0.0397634379229722, 0.0715673822158312, 0.101031221449449,     0.140886592436859, 0.251783752079903, 0.0286821581801548,     -0.0544913009558665, -0.0144973297296156, -0.172585799421624,     0.0292855343871807, -0.0398536225358828, 0.0575859314097819,     -0.0207290245942997, -0.129902680161064, 0.0130157250179949,     -0.140594994703211, 0.113061649488078, -0.19172213360015,     -0.0005540543786692, 0.0646610575603235, -0.155328241632807,     0.154615944492056, -0.0863061050989559, -0.0494087769315426,     0.0149118739903051, -0.0257840450579246, -0.10380823425604,     0.0467065705679462, -0.0354760140261105, 0.0569212883130326,     -0.0412806129123548, -0.0839077477679854, 0.0168531086740864,     0.0862703302733444, 0.0469634526604626, 0.014275852634503,     -0.221991740808498, 0.17898098273874, -0.00750624394771036,     -0.0922105349246247, -0.00447518889242164, 0.0428971316737817,     -0.152935318199132, 0.0837316513419384, 0.0384463831977671,     0.12957623640255, 0.118265531416431, -0.0270256521445913,     -0.0445181837317437, -0.0802466891743403, -0.0418612055355164,     0.11871692987501, 0.214995455255905, 0.115270244925587, -0.197747326692301,     0.1182238221774, 0.117740973800782, 0.0856061431574502, -0.0851547004993932,     0.116153281519706, 0.0808997881729444, 0.0633995288513645,     -0.0351413826168192, 0.107494030934503, -0.00369100557006286,     0.00372211440765353, 0.160723891805227, 0.0799576799255087    ), dim = c(100L, 3L), dimnames = list(c(\"1\", \"2\", \"3\", \"4\",     \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",     \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\",     \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\",     \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\",     \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\",     \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\",     \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\",     \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\",     \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\",     \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\", \"m\", \"x\"    )), assign = 0:2), qraux = c(1.1, 1.02671957316234, 1.02095121211067    ), pivot = 1:3, tol = 1e-07, rank = 3L), class = \"qr\"), df.residual = 97L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = y ~         m + x, data = structure(list(m = c(-0.00814020044688141,     0.167967123785712, -1.62795691792796, 1.29184300116025, -0.0184771657057447,     0.0602646127259461, 0.725188301153378, 1.34475932700033,     -0.924720817674869, 0.8585689644652, -0.367376802654177,     0.334478865020355, 0.268955257449183, -0.104544232883729,     -0.688138540694256, -0.540841310970137, 1.47073091934107,     0.148470798946109, -0.967787270823859, -0.903808887074359,     0.668133193620937, 0.604331309662094, -1.15168026338836,     0.206222254668794, 0.99116603584873, 1.99054338410479, -0.882761357325375,     -0.524241896341522, 0.626560343347583, -0.443542059954015,     1.32322003409493, 1.04208148767555, -1.76382714479686, 0.593140478525365,     -1.13954427723008, -1.07446172205123, 0.742103981147505,     0.113453836261409, -0.20386550804415, 1.18285116175094, -0.206975458589128,     -0.603106957845612, -0.0136219806943186, -0.368899470442482,     -0.145617356072917, -1.509428927284, -0.098961230938763,     -0.307778299915731, -0.400318763504034, -0.509476404888851,     -0.661448645526099, -0.476949809812821, -0.650907463449429,     0.887948987414941, -0.461480758929118, 0.0300088418960022,     0.974343735492169, -0.373264881674288, -0.409631941887088,     0.610507127221665, -1.35747752028585, 0.670727022593124,     -0.661739595404534, -1.37280181664836, -1.71495841282725,     -0.487213940591002, -1.0436052737614, -1.14184811269305,     0.967998777927062, -0.720881132642448, 0.939581910758106,     0.260931884431455, -0.904542093866316, -0.504700255000248,     -0.846810810685631, 0.396831551887176, -0.25823098613616,     1.14959238662516, 0.0166062712863464, -2.22699081404222,     -0.238869777198553, -2.06530908673775, 0.786103926946834,     -0.429941001625563, -0.526210421074268, -0.285738338683871,     0.00929319036382326, -1.58362444467265, 0.553006415994647,     -0.742233490838131, -0.264600420758326, 0.967117853860525,     0.762238128475713, 1.63253102208454, 0.00871746369110592,     -0.415118371631495, 2.08798330702898, -0.309609457462997,     1.21651143641959, 1.11527626871649), y = c(0.389886673115764,     1.31843409056788, -0.994970123526719, -0.420504588403101,     -0.321530441363213, -0.443768312278922, 0.646647025424089,     -0.135881700440692, 0.127239060610954, -0.578667243346392,     1.33657546929283, 1.42266221623004, -0.254190191454151, 0.0690297140111326,     -0.667659946681306, -1.3152232490055, -1.56942776288785,     0.0525029308099555, -0.513661749400436, 0.970420206410657,     -1.39405431524841, -0.271291043761853, 0.186295125941764,     0.399627330992032, 0.601024949816664, 0.457676866485655,     -0.267356972173323, -0.466420972447583, 0.411713584660471,     -0.722272394684956, 1.69093740222961, 1.4389724870837, 0.275752996927813,     -0.0214075904225611, -0.833335456257173, -0.840581914041809,     1.56109626357356, -0.202838641867873, -0.0173782388208663,     0.921544097368724, 0.483861574076099, -0.533365332591791,     2.02485487137291, -0.98768366878004, -1.30824343040963, -0.718079281632652,     1.48117032930771, -0.108206026592038, -0.105133843681358,     0.492817191242108, -0.416437632387497, -0.14867106171104,     0.721124870707462, 0.525160929442882, -0.88216167351009,     0.357018827927476, -0.458112556836835, -1.44955072702983,     -0.311087927071662, -0.648179084141866, -0.175644622285204,     0.208103252488642, -0.994535042154295, 0.719069622435714,     -0.952690510454673, 0.987625550179094, -0.62002814663546,     -0.856089716737864, 0.807426088080981, 0.531468718128727,     2.81306088317972, -0.765823473827937, -0.611125964328616,     0.681027204222692, -0.127553611787498, 0.0361714382197732,     -1.25742457860655, 0.333471059467234, -0.15169844253015,     -1.18431679703132, 1.27680746181135, -1.43270617940003, -0.971847634677628,     0.214953152143963, -0.360060031374152, -0.319838343097406,     0.55506477005216, -3.30906570708085, -0.20297890390857, -0.504009926941532,     0.391896752939163, 0.257520584079299, -0.489356378531118,     1.13891723062622, 0.021199614718457, -0.111838423833238,     2.04561103315638, -0.624381421726574, -0.473584327671255,     -0.550885291594103), x = c(-1.02393278779038, -1.38765057998806,     -0.0492211144061267, 1.81096073048314, -0.0995100657082667,     0.777237124297383, -1.10259632518001, -0.221644782701794,     0.5660949625959, -0.354959345255063, 0.785262601468044, 0.694047378599404,     -0.632729895584955, -0.771958641961308, 2.3578173876011,     -0.19254933635981, 0.00661933421419712, -0.0545460246273611,     -0.568206880540376, -0.926975943696645, -1.1357351813807,     0.913962339054452, -0.986062833322873, 0.66748541348963,     1.40659548970662, 1.15777896011788, -0.138753197573533, -0.539321850960138,     -1.07889349906152, -0.0185621399511091, -0.232615685678704,     0.15629354251416, -0.604009754754033, 0.629035120121665,     0.714169570852022, 1.07588610128876, 2.24975551737932, 0.197890598879292,     -0.575546318478704, -0.0773208650045946, -1.62791988910102,     0.129923153969037, -0.425673133260061, 0.406011748521125,     -0.268810185638072, -1.38098453629771, 0.0365833213445593,     -1.35324453117639, 0.897006193942258, -1.82935971226393,     -0.141876944171991, 0.457981777842779, -1.51961751308999,     1.39905531466027, -0.885339190903023, -0.506330291221321,     0.163332105966331, -0.337143856258392, -1.03595153200983,     0.409337928216715, -0.524223458216886, 0.506500373524185,     -0.504722862774708, -0.957250328953504, -0.0946343584532563,     0.649439317610584, 0.242321799327066, -0.0589340902617142,     -1.94779407157618, 1.4514436318915, -0.0399396776377224,     -0.863997691069911, -0.201690239712518, 0.261255562727432,     -1.51835138330586, 0.717308632275803, 0.246832728096417,     1.20276704630509, 0.986039270447351, -0.537940599062239,     -0.490282741813956, -0.995516172562447, -0.361702928254615,     0.944354811296923, 1.79220701161545, 0.928409395864299, -1.82993766963068,     0.821878106163116, 1.0362687620034, 0.617420144129801, -0.854930363118786,     1.06451051848471, 0.729481458103667, 0.66265658435809, -0.381407202704243,     0.845891777793581, 0.111591884445813, -0.0677702616560359,     1.48709809651828, 0.75722337664623)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = y ~ m + x, model = structure(list(        y = c(0.389886673115764, 1.31843409056788, -0.994970123526719,         -0.420504588403101, -0.321530441363213, -0.443768312278922,         0.646647025424089, -0.135881700440692, 0.127239060610954,         -0.578667243346392, 1.33657546929283, 1.42266221623004,         -0.254190191454151, 0.0690297140111326, -0.667659946681306,         -1.3152232490055, -1.56942776288785, 0.0525029308099555,         -0.513661749400436, 0.970420206410657, -1.39405431524841,         -0.271291043761853, 0.186295125941764, 0.399627330992032,         0.601024949816664, 0.457676866485655, -0.267356972173323,         -0.466420972447583, 0.411713584660471, -0.722272394684956,         1.69093740222961, 1.4389724870837, 0.275752996927813,         -0.0214075904225611, -0.833335456257173, -0.840581914041809,         1.56109626357356, -0.202838641867873, -0.0173782388208663,         0.921544097368724, 0.483861574076099, -0.533365332591791,         2.02485487137291, -0.98768366878004, -1.30824343040963,         -0.718079281632652, 1.48117032930771, -0.108206026592038,         -0.105133843681358, 0.492817191242108, -0.416437632387497,         -0.14867106171104, 0.721124870707462, 0.525160929442882,         -0.88216167351009, 0.357018827927476, -0.458112556836835,         -1.44955072702983, -0.311087927071662, -0.648179084141866,         -0.175644622285204, 0.208103252488642, -0.994535042154295,         0.719069622435714, -0.952690510454673, 0.987625550179094,         -0.62002814663546, -0.856089716737864, 0.807426088080981,         0.531468718128727, 2.81306088317972, -0.765823473827937,         -0.611125964328616, 0.681027204222692, -0.127553611787498,         0.0361714382197732, -1.25742457860655, 0.333471059467234,         -0.15169844253015, -1.18431679703132, 1.27680746181135,         -1.43270617940003, -0.971847634677628, 0.214953152143963,         -0.360060031374152, -0.319838343097406, 0.55506477005216,         -3.30906570708085, -0.20297890390857, -0.504009926941532,         0.391896752939163, 0.257520584079299, -0.489356378531118,         1.13891723062622, 0.021199614718457, -0.111838423833238,         2.04561103315638, -0.624381421726574, -0.473584327671255,         -0.550885291594103), m = c(-0.00814020044688141, 0.167967123785712,         -1.62795691792796, 1.29184300116025, -0.0184771657057447,         0.0602646127259461, 0.725188301153378, 1.34475932700033,         -0.924720817674869, 0.8585689644652, -0.367376802654177,         0.334478865020355, 0.268955257449183, -0.104544232883729,         -0.688138540694256, -0.540841310970137, 1.47073091934107,         0.148470798946109, -0.967787270823859, -0.903808887074359,         0.668133193620937, 0.604331309662094, -1.15168026338836,         0.206222254668794, 0.99116603584873, 1.99054338410479,         -0.882761357325375, -0.524241896341522, 0.626560343347583,         -0.443542059954015, 1.32322003409493, 1.04208148767555,         -1.76382714479686, 0.593140478525365, -1.13954427723008,         -1.07446172205123, 0.742103981147505, 0.113453836261409,         -0.20386550804415, 1.18285116175094, -0.206975458589128,         -0.603106957845612, -0.0136219806943186, -0.368899470442482,         -0.145617356072917, -1.509428927284, -0.098961230938763,         -0.307778299915731, -0.400318763504034, -0.509476404888851,         -0.661448645526099, -0.476949809812821, -0.650907463449429,         0.887948987414941, -0.461480758929118, 0.0300088418960022,         0.974343735492169, -0.373264881674288, -0.409631941887088,         0.610507127221665, -1.35747752028585, 0.670727022593124,         -0.661739595404534, -1.37280181664836, -1.71495841282725,         -0.487213940591002, -1.0436052737614, -1.14184811269305,         0.967998777927062, -0.720881132642448, 0.939581910758106,         0.260931884431455, -0.904542093866316, -0.504700255000248,         -0.846810810685631, 0.396831551887176, -0.25823098613616,         1.14959238662516, 0.0166062712863464, -2.22699081404222,         -0.238869777198553, -2.06530908673775, 0.786103926946834,         -0.429941001625563, -0.526210421074268, -0.285738338683871,         0.00929319036382326, -1.58362444467265, 0.553006415994647,         -0.742233490838131, -0.264600420758326, 0.967117853860525,         0.762238128475713, 1.63253102208454, 0.00871746369110592,         -0.415118371631495, 2.08798330702898, -0.309609457462997,         1.21651143641959, 1.11527626871649), x = c(-1.02393278779038,         -1.38765057998806, -0.0492211144061267, 1.81096073048314,         -0.0995100657082667, 0.777237124297383, -1.10259632518001,         -0.221644782701794, 0.5660949625959, -0.354959345255063,         0.785262601468044, 0.694047378599404, -0.632729895584955,         -0.771958641961308, 2.3578173876011, -0.19254933635981,         0.00661933421419712, -0.0545460246273611, -0.568206880540376,         -0.926975943696645, -1.1357351813807, 0.913962339054452,         -0.986062833322873, 0.66748541348963, 1.40659548970662,         1.15777896011788, -0.138753197573533, -0.539321850960138,         -1.07889349906152, -0.0185621399511091, -0.232615685678704,         0.15629354251416, -0.604009754754033, 0.629035120121665,         0.714169570852022, 1.07588610128876, 2.24975551737932,         0.197890598879292, -0.575546318478704, -0.0773208650045946,         -1.62791988910102, 0.129923153969037, -0.425673133260061,         0.406011748521125, -0.268810185638072, -1.38098453629771,         0.0365833213445593, -1.35324453117639, 0.897006193942258,         -1.82935971226393, -0.141876944171991, 0.457981777842779,         -1.51961751308999, 1.39905531466027, -0.885339190903023,         -0.506330291221321, 0.163332105966331, -0.337143856258392,         -1.03595153200983, 0.409337928216715, -0.524223458216886,         0.506500373524185, -0.504722862774708, -0.957250328953504,         -0.0946343584532563, 0.649439317610584, 0.242321799327066,         -0.0589340902617142, -1.94779407157618, 1.4514436318915,         -0.0399396776377224, -0.863997691069911, -0.201690239712518,         0.261255562727432, -1.51835138330586, 0.717308632275803,         0.246832728096417, 1.20276704630509, 0.986039270447351,         -0.537940599062239, -0.490282741813956, -0.995516172562447,         -0.361702928254615, 0.944354811296923, 1.79220701161545,         0.928409395864299, -1.82993766963068, 0.821878106163116,         1.0362687620034, 0.617420144129801, -0.854930363118786,         1.06451051848471, 0.729481458103667, 0.66265658435809,         -0.381407202704243, 0.845891777793581, 0.111591884445813,         -0.0677702616560359, 1.48709809651828, 0.75722337664623        )), terms = y ~ m + x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\")), class = c(\"lm_list_lmhelprs\", \"lm_list\", \"list\"), cases_removed = integer(0), call = (function (models,     data, na_omit_all = TRUE, ...) {    my_call <- match.call()    my_call$na_omit_all <- NULL    my_call[[1L]] <- quote(stats::lm)    my_mm <- my_call    my_mm[[1L]] <- quote(stats::model.frame)    my_mm$models <- NULL    if (is.null(my_call$data) && na_omit_all) {        stop(\"The argument 'data' must be set if na_omit_all is TRUE.\")    }    models1 <- parse_models(models)    data_full <- eval(my_call$data, envir = parent.frame())    if (na_omit_all) {        all_vars <- sapply(models1, function(x) {            all.vars(stats::as.formula(x))        }, USE.NAMES = FALSE)        all_vars <- unique(unlist(all_vars))        if (!is.null(my_call$subset)) {            all_ys <- sapply(models1, function(x) {                all.vars(stats::as.formula(x))[1]            }, USE.NAMES = FALSE)            ys1 <- all_ys[1]            f0 <- paste(ys1, \"~\", paste(setdiff(all_vars, ys1),                 collapse = \" + \"))            my_mm0 <- my_mm            my_mm0$formula <- f0            my_mm0$na.action <- \"na.pass\"            data_selected <- tryCatch(eval(my_mm0, envir = parent.frame()),                 error = function(e) e)            if (inherits(data_selected, \"error\")) {                subset_i <- eval(my_mm0$subset, envir = parent.frame())                if (is.logical(subset_i)) {                  subset_i <- sapply(subset_i, isTRUE)                  omitted_subset <- which(!subset_i)                }                else if (is.character(subset_i)) {                  omitted_subset <- !(row.names(data_full) %in%                     subset_i)                  omitted_subset[is.na(omitted_subset)] <- TRUE                  omitted_subset <- which(omitted_subset)                }                else {                  omitted_subset <- setdiff(seq_len(nrow(data_full)),                     subset_i)                }            }            else {                subset_i <- match(row.names(data_selected), row.names(data_full))                subset_i <- stats::na.omit(subset_i)                omitted_subset <- setdiff(seq_len(nrow(data_full)),                   subset_i)            }        }        else {            omitted_subset <- numeric(0)        }        data <- stats::na.omit(eval(my_call$data, envir = parent.frame())[,             all_vars])        data_omitted <- attr(data, \"na.action\")        if (!is.null(data_omitted)) {            omitted_listwise <- as.numeric(data_omitted)        }        else {            omitted_listwise <- numeric(0)        }        omitted <- c(omitted_subset, omitted_listwise)        omitted <- unique(sort(omitted))        selected <- !logical(nrow(data_full))        selected[omitted] <- FALSE        my_call$subset <- which(selected)    }    else {        selected <- !logical(nrow(data_full))    }    tmpfct <- function(x, env = parent.frame()) {        call0 <- my_call        call0$models <- NULL        call0$formula <- stats::as.formula(x, env = env)        outtmp <- eval(call0, envir = env)        outtmp    }    out1 <- lapply(models1, tmpfct, env = parent.frame())    out2 <- lm2list_free(out1)    attr(out2, \"cases_removed\") <- which(!selected)    attr(out2, \"call\") <- match.call()    out2})(models = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(m = c(-0.00814020044688141, 0.167967123785712, -1.62795691792796, 1.29184300116025, -0.0184771657057447, 0.0602646127259461, 0.725188301153378, 1.34475932700033, -0.924720817674869, 0.8585689644652, -0.367376802654177, 0.334478865020355, 0.268955257449183, -0.104544232883729, -0.688138540694256, -0.540841310970137, 1.47073091934107, 0.148470798946109, -0.967787270823859, -0.903808887074359, 0.668133193620937, 0.604331309662094, -1.15168026338836, 0.206222254668794, 0.99116603584873, 1.99054338410479, -0.882761357325375, -0.524241896341522, 0.626560343347583, -0.443542059954015, 1.32322003409493, 1.04208148767555, -1.76382714479686, 0.593140478525365, -1.13954427723008, -1.07446172205123, 0.742103981147505, 0.113453836261409, -0.20386550804415, 1.18285116175094, -0.206975458589128, -0.603106957845612, -0.0136219806943186, -0.368899470442482, -0.145617356072917, -1.509428927284, -0.098961230938763, -0.307778299915731, -0.400318763504034, -0.509476404888851, -0.661448645526099, -0.476949809812821, -0.650907463449429, 0.887948987414941, -0.461480758929118, 0.0300088418960022, 0.974343735492169, -0.373264881674288, -0.409631941887088, 0.610507127221665, -1.35747752028585, 0.670727022593124, -0.661739595404534, -1.37280181664836, -1.71495841282725, -0.487213940591002, -1.0436052737614, -1.14184811269305, 0.967998777927062, -0.720881132642448, 0.939581910758106, 0.260931884431455, -0.904542093866316, -0.504700255000248, -0.846810810685631, 0.396831551887176, -0.25823098613616, 1.14959238662516, 0.0166062712863464, -2.22699081404222, -0.238869777198553, -2.06530908673775, 0.786103926946834, -0.429941001625563, -0.526210421074268, -0.285738338683871, 0.00929319036382326, -1.58362444467265, 0.553006415994647, -0.742233490838131, -0.264600420758326, 0.967117853860525, 0.762238128475713, 1.63253102208454, 0.00871746369110592, -0.415118371631495, 2.08798330702898, -0.309609457462997, 1.21651143641959, 1.11527626871649), y = c(0.389886673115764, 1.31843409056788, -0.994970123526719, -0.420504588403101, -0.321530441363213, -0.443768312278922, 0.646647025424089, -0.135881700440692, 0.127239060610954, -0.578667243346392, 1.33657546929283, 1.42266221623004, -0.254190191454151, 0.0690297140111326, -0.667659946681306, -1.3152232490055, -1.56942776288785, 0.0525029308099555, -0.513661749400436, 0.970420206410657, -1.39405431524841, -0.271291043761853, 0.186295125941764, 0.399627330992032, 0.601024949816664, 0.457676866485655, -0.267356972173323, -0.466420972447583, 0.411713584660471, -0.722272394684956, 1.69093740222961, 1.4389724870837, 0.275752996927813, -0.0214075904225611, -0.833335456257173, -0.840581914041809, 1.56109626357356, -0.202838641867873, -0.0173782388208663, 0.921544097368724, 0.483861574076099, -0.533365332591791, 2.02485487137291, -0.98768366878004, -1.30824343040963, -0.718079281632652, 1.48117032930771, -0.108206026592038, -0.105133843681358, 0.492817191242108, -0.416437632387497, -0.14867106171104, 0.721124870707462, 0.525160929442882, -0.88216167351009, 0.357018827927476, -0.458112556836835, -1.44955072702983, -0.311087927071662, -0.648179084141866, -0.175644622285204, 0.208103252488642, -0.994535042154295, 0.719069622435714, -0.952690510454673, 0.987625550179094, -0.62002814663546, -0.856089716737864, 0.807426088080981, 0.531468718128727, 2.81306088317972, -0.765823473827937, -0.611125964328616, 0.681027204222692, -0.127553611787498, 0.0361714382197732, -1.25742457860655, 0.333471059467234, -0.15169844253015, -1.18431679703132, 1.27680746181135, -1.43270617940003, -0.971847634677628, 0.214953152143963, -0.360060031374152, -0.319838343097406, 0.55506477005216, -3.30906570708085, -0.20297890390857, -0.504009926941532, 0.391896752939163, 0.257520584079299, -0.489356378531118, 1.13891723062622, 0.021199614718457, -0.111838423833238, 2.04561103315638, -0.624381421726574, -0.473584327671255, -0.550885291594103), x = c(-1.02393278779038, -1.38765057998806, -0.0492211144061267, 1.81096073048314, -0.0995100657082667, 0.777237124297383, -1.10259632518001, -0.221644782701794, 0.5660949625959, -0.354959345255063, 0.785262601468044, 0.694047378599404, -0.632729895584955, -0.771958641961308, 2.3578173876011, -0.19254933635981, 0.00661933421419712, -0.0545460246273611, -0.568206880540376, -0.926975943696645, -1.1357351813807, 0.913962339054452, -0.986062833322873, 0.66748541348963, 1.40659548970662, 1.15777896011788, -0.138753197573533, -0.539321850960138, -1.07889349906152, -0.0185621399511091, -0.232615685678704, 0.15629354251416, -0.604009754754033, 0.629035120121665, 0.714169570852022, 1.07588610128876, 2.24975551737932, 0.197890598879292, -0.575546318478704, -0.0773208650045946, -1.62791988910102, 0.129923153969037, -0.425673133260061, 0.406011748521125, -0.268810185638072, -1.38098453629771, 0.0365833213445593, -1.35324453117639, 0.897006193942258, -1.82935971226393, -0.141876944171991, 0.457981777842779, -1.51961751308999, 1.39905531466027, -0.885339190903023, -0.506330291221321, 0.163332105966331, -0.337143856258392, -1.03595153200983, 0.409337928216715, -0.524223458216886, 0.506500373524185, -0.504722862774708, -0.957250328953504, -0.0946343584532563, 0.649439317610584, 0.242321799327066, -0.0589340902617142, -1.94779407157618, 1.4514436318915, -0.0399396776377224, -0.863997691069911, -0.201690239712518, 0.261255562727432, -1.51835138330586, 0.717308632275803, 0.246832728096417, 1.20276704630509, 0.986039270447351, -0.537940599062239, -0.490282741813956, -0.995516172562447, -0.361702928254615, 0.944354811296923, 1.79220701161545, 0.928409395864299, -1.82993766963068, 0.821878106163116, 1.0362687620034, 0.617420144129801, -0.854930363118786, 1.06451051848471, 0.729481458103667, 0.66265658435809, -0.381407202704243, 0.845891777793581, 0.111591884445813, -0.0677702616560359, 1.48709809651828, 0.75722337664623)), class = \"data.frame\", row.names = c(NA, -100L)))), structure(list(    structure(list(coefficients = c(`(Intercept)` = -0.0648689174476599,     x = 0.263756087698713), residuals = c(`1` = -2.67268811244128,     `2` = -0.362507914295489, `3` = -1.35110135863207, `4` = 0.601322871915966,     `5` = -0.397074760380514, `6` = 0.953814973833101, `7` = 0.534948062754297,     `8` = 0.0653063873817456, `9` = 0.0298119587674418, `10` = -0.286736516910204,     `11` = 0.244904852896152, `12` = -1.02690305517607, `13` = 0.705790993086126,     `14` = -0.316056434537125, `15` = -0.642383796378864, `16` = -0.230088869173352,     `17` = 1.8860477459842, `18` = -1.60028874349877, `19` = -0.23194886385619,     `20` = 0.205162846523279, `21` = -0.554237005545695, `22` = -0.340605169541814,     `23` = 0.450262570567974, `24` = 0.236553859508413, `25` = -0.612669647519349,     `26` = 0.616086698844648, `27` = 0.22008650477559, `28` = 0.656841325238691,     `29` = -1.16842819633478, `30` = -0.698151994611314, `31` = -0.104954802014975,     `32` = 0.994693532362958, `33` = -0.384658110238403, `34` = -0.91331821694234,     `35` = 0.825191517557232, `36` = 0.550130365586332, `37` = -1.11907560328997,     `38` = 1.95727054902916, `39` = 1.49969356812053, `40` = -1.2120477412884,     `41` = 2.06809013739797, `42` = -1.54791971569743, `43` = 0.160031867190537,     `44` = -1.02023638601353, `45` = -0.307431995282886, `46` = -0.23026837997916,     `47` = 0.4244986565176, `48` = -0.950749013978025, `49` = -2.60025128025923,     `50` = 0.000990443620475126, `51` = -0.661071883035708, `52` = 0.230298970459046,     `53` = -0.730426527824602, `54` = 0.819990731259609, `55` = 0.121407150723945,     `56` = 0.705427907634608, `57` = -0.846668775736878, `58` = -0.161943767347117,     `59` = 0.398104590548779, `60` = 0.0308287806261141, `61` = 1.68528631061359,     `62` = -1.86506533758405, `63` = 0.820469007101228, `64` = 0.0662818778529674,     `65` = 0.944356797944032, `66` = -0.0693002538857554, `67` = -2.5599907448786,     `68` = 0.490774749784089, `69` = -0.0914317535296772, `70` = -0.873881378901702,     `71` = -0.564010201420552, `72` = 0.110635112170526, `73` = 2.43855778125765,     `74` = 0.205188385616968, `75` = -0.860640197832207, `76` = 1.91782514409681,     `77` = -0.314966640339039, `78` = -0.711523075452581, `79` = -1.16704262760661,     `80` = -0.607663380435057, `81` = 1.88478751861778, `82` = 0.877363585996937,     `83` = 0.768921171096844, `84` = 0.249064915258827, `85` = 0.246271184450971,     `86` = 0.654490026120049, `87` = 0.263430943540943, `88` = 0.184903856795093,     `89` = 1.00266966900555, `90` = -0.0698444622738392, `91` = 0.311614281088473,     `92` = -0.824596621369637, `93` = 1.55033314575741, `94` = 1.33486108144302,     `95` = -1.59574429902624, `96` = -0.147126252365874, `97` = 0.562051634939763,     `98` = 0.447048567486465, `99` = 0.775106974863821, `100` = -0.380164278949381    ), effects = c(`(Intercept)` = 0.668581545097909, x = 2.56573293627118,     -1.1090266906375, 0.85241217347887, -0.141336563266825, 1.18748720855496,     0.770336175297133, 0.314912652632146, 0.258046827766759,     -0.0414895543316485, 0.49120970986549, -0.772819598799854,     0.949085275983009, -0.0714544851749453, -0.40015608887185,     0.00775442139533155, 2.11853393190868, -1.36107831588082,     -0.000460665331086775, 0.435805404003335, -0.277203300348188,     -0.0933818833838674, 0.686657381799217, 0.492564111536689,     -0.358505170900065, 0.855920268601574, 0.468222891499459,     0.919955022279738, -0.935933354837172, -0.445378488946505,     0.133571379165116, 1.232916905361, -0.159308061295438, -0.672588697791267,     1.06047553449126, 0.779899980900352, -0.871346046845953,     2.21950275976712, 1.74104576623339, -0.984429679833461, 2.32742822993968,     -1.31665871959532, 0.403741548775217, -0.778379760925667,     -0.0603660436522557, 0.000705604090707517, 0.650976152174721,     -0.725974577533972, -2.34600843356556, 0.23518691270413,     -0.413692841669586, 0.484727673732305, -0.491941529240863,     1.06321071262374, 0.355227014316108, 0.927630217405443, -0.615693208160905,     0.0891445382044801, 0.639495186376253, 0.257432949955957,     1.91466297690618, -1.60365486139577, 1.05249278261682, 0.313246735230063,     1.19462867280997, 0.186495993029461, -2.31335930319468, 0.725791206940648,     0.134916695267952, -0.632482475531999, -0.320150504110395,     0.355995757556522, 2.67049599979957, 0.460752335834261, -0.620531271026235,     2.14897595954743, -0.0842828791710328, -0.473353572745815,     -0.910536283618577, -0.355119224105913, 2.13616377632981,     1.13713117273779, 1.01146812381889, 0.477878403785573, 0.517688236435601,     0.888696920194751, 0.508795370404278, 0.43684487702311, 1.23674164725818,     0.165639534637907, 0.553508800889084, -0.570908225312022,     1.80152798413576, 1.59664832239523, -1.37456940494989, 0.0976917355858295,     0.8138229196655, 0.715148236032367, 1.02310449045686, -0.130777469924839    ), rank = 2L, fitted.values = c(`1` = -0.0349974632344812,     `2` = -0.213916272095654, `3` = -0.0435836990322807, `4` = -0.24838286158219,     `5` = -0.35399890336206, `6` = 0.147307176851843, `7` = 0.108324966636683,     `8` = -0.214690466596905, `9` = 0.270836096581566, `10` = -0.115653547377909,     `11` = -0.139687345718847, `12` = -0.316405637401447, `13` = -0.0712915485785669,     `14` = -0.100999799608113, `15` = -0.0470605307578501, `16` = 0.052546947508875,     `17` = 0.174252454062241, `18` = 0.0214876126332004, `19` = 0.196925254024342,     `20` = 0.216136969789688, `21` = -0.837801399446125, `22` = -0.160552700617927,     `23` = 0.085454259051831, `24` = -0.360179589271537, `25` = -0.318246297679441,     `26` = 0.00733074344435225, `27` = -0.181296997078488, `28` = -0.521559370136527,     `29` = 0.174055812222476, `30` = -0.286645491673475, `31` = 0.0370326812584033,     `32` = 0.0439120359906553, `33` = 0.336374948179919, `34` = -0.0130239037210248,     `35` = 0.11068986514833, `36` = 0.235968926707704, `37` = -0.172054413896082,     `38` = -0.501533303041932, `39` = -0.027170250208133, `40` = 0.284849053135621,     `41` = -0.435783211436047, `42` = 0.20208695755964, `43` = -0.0807287933362417,     `44` = -0.0386300861807993, `45` = -0.156978292496921, `46` = 0.208607447094666,     `47` = 0.310761023761511, `48` = 0.349452014134612, `49` = -0.320026750038354,     `50` = 0.135397346301209, `51` = -0.16409122894027, `52` = -0.324249137068016,     `53` = 0.0379682890322188, `54` = -0.0696035274772971, `55` = 0.143953266925697,     `56` = 0.407886933829843, `57` = 0.208571472174342, `58` = -0.248360233676139,     `59` = -0.0280425895812846, `60` = 0.307883184979273, `61` = 0.244896148197559,     `62` = -0.482864707548168, `63` = 0.184757735699714, `64` = -0.154681580344868,     `65` = -0.22981213414041, `66` = -0.355317709129242, `67` = -0.147106868158872,     `68` = 0.116768428180596, `69` = 0.313692777842619, `70` = -0.0282313246727884,     `71` = -0.0841369290873123, `72` = -0.118236252884877, `73` = 0.186701463797326,     `74` = -0.350040271190455, `75` = 0.00107503791629726, `76` = 0.204590099254974,     `77` = 0.215200882845919, `78` = 0.0451358894568108, `79` = -0.371450066006415,     `80` = -0.28143501345273, `81` = -0.254902081535535, `82` = -0.445540685396394,     `83` = -0.0543133106064689, `84` = 0.25769071537954, `85` = -0.710199332694154,     `86` = 0.135160505899461, `87` = -0.118322162465826, `88` = -0.267732651900476,     `89` = 0.138225594143538, `90` = 0.106146615369766, `91` = -0.0394909980945238,     `92` = -0.307430450357739, `93` = -0.250780502180294, `94` = -0.491424246607092,     `95` = 0.431228301199555, `96` = -0.105907877332808, `97` = -0.26387651194109,     `98` = -0.634833279824798, `99` = -0.17814205006021, `100` = -0.209704745221592    ), assign = 0:1, qr = structure(list(qr = structure(cdim = c(100L, 2L), dimnames = list(c(\"1\",     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",     \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",     \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\",     \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\",     \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\",     \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\",     \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\",     \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",     \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\",     \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\",     \"x\")), assign = 0:1), qraux = c(1.1, 1.05844511014594), pivot = 1:2,         tol = 1e-07, rank = 2L), class = \"qr\"), df.residual = 98L,         xlevels = structure(list(), names = character(0)), call = stats::lm(formula = m ~             x, data = structure(list(m = c(-2.70768557567576,         -0.576424186391143, -1.39468505766435, 0.352940010333777,         -0.751073663742573, 1.10112215068494, 0.64327302939098,         -0.14938407921516, 0.300648055349008, -0.402390064288113,         0.105217507177305, -1.34330869257752, 0.634499444507559,         -0.417056234145238, -0.689444327136714, -0.177541921664477,         2.06030020004644, -1.57880113086557, -0.0350236098318482,         0.421299816312967, -1.39203840499182, -0.501157870159741,         0.535716829619804, -0.123625729763123, -0.93091594519879,         0.623417442289001, 0.0387895076971012, 0.135281955102164,         -0.994372384112306, -0.984797486284789, -0.0679221207565718,         1.03860556835361, -0.0482831620584835, -0.926342120663365,         0.935881382705561, 0.786099292294036, -1.29113001718605,         1.45573724598723, 1.4725233179124, -0.927198688152777,         1.63230692596192, -1.34583275813779, 0.0793030738542954,         -1.05886647219432, -0.464410287779807, -0.0216609328844941,         0.735259680279112, -0.601296999843413, -2.92027803029758,         0.136387789921684, -0.825163111975978, -0.0939501666089703,         -0.692458238792383, 0.750387203782311, 0.265360417649642,         1.11331484146445, -0.638097303562536, -0.410304001023256,         0.370062000967495, 0.338711965605387, 1.93018245881115,         -2.34793004513222, 1.00522674280094, -0.0883997024919002,         0.714544663803622, -0.424617963014997, -2.70709761303748,         0.607543177964685, 0.222261024312942, -0.902112703574491,         -0.648147130507864, -0.00760114071435173, 2.62525924505497,         -0.144851885573487, -0.859565159915909, 2.12241524335178,         -0.0997657574931206, -0.66638718599577, -1.53849269361302,         -0.889098393887787, 1.62988543708224, 0.431822900600543,         0.714607860490375, 0.506755630638367, -0.463928148243183,         0.78965053201951, 0.145108781075116, -0.082828795105383,         1.14089526314909, 0.0363021530959265, 0.272123282993949,         -1.13202707172738, 1.29955264357712, 0.843436834835929,         -1.16451599782668, -0.253034129698682, 0.298175122998673,         -0.187784712338332, 0.596964924803611, -0.589869024170972        ), y = c(-2.39769214926222, -0.0271342381632562, -2.03028139257948,         0.726717192533257, 0.233237262702031, -1.0999819020536,         1.1347663421693, -0.269107905915993, -0.433218417307571,         0.184868219745804, 1.16165570068378, 0.683788110201355,         -0.722453643499035, -0.587583077061067, -0.217952081664757,         -0.0315967642682094, 0.644737605177446, -2.81772939060932,         -0.258598007143378, -0.812822059738883, -0.667331874948201,         -0.976063148516166, 0.166004231550086, -0.703990248958998,         -0.819096821470398, -0.0154503546527277, 1.16979407197972,         0.688093019469736, -0.698354530105951, -1.55434238955639,         0.873233537800358, -0.724662329791168, -1.04818971219779,         -1.1353841666862, -0.37410750829602, -0.389540758166342,         0.469186308533027, 0.635907462971676, 0.116299227257785,         0.11812914235915, 0.987309203667009, -1.72955113828203,         -0.446158508020385, -0.0672072158678249, 1.45681759391999,         1.3591725577366, 1.09317511736965, -0.311967159825356,         -2.95472215999891, -0.564743866294391, -0.59913543570586,         0.377556344767569, -0.294792905605629, 0.42569332107066,         1.72474936049882, 0.892372947424209, -0.562012706382335,         -0.576259247560327, 0.26758481626852, -0.535009679036365,         2.14997859366183, -1.42297852912758, 0.0448735454371089,         -0.800251220618607, 1.16777950782666, -1.31845493066848,         -1.75948941480594, 0.574418620790539, 0.0173206471367888,         -0.233865479351139, -1.46393048092979, -0.376256834880135,         -0.163172666417521, -0.801738294538558, 0.56463160549001,         1.28016615465111, 0.0239779910545641, -1.14173753966622,         -1.251466271066, -1.32475171321478, 0.861296944630143,         0.878536590512995, 0.616414241046165, -0.281493112410781,         0.246763782323527, 0.730763880374178, 0.802796487275384,         -0.423009080928403, -0.450912742006031, -0.0550878824270805,         0.398274817111832, 0.784201242171063, 0.589446803450392,         0.791545398764313, -0.654366043820853, 1.74097815931376,         1.30780189037663, -0.295073909025553, 0.188147283961327,         -0.313714623076159), x = c(0.113254084384586, -0.565095410492474,         0.0807003872444948, -0.695771406588942, -1.09620213295198,         0.804440557754521, 0.656644119934708, -0.568030677344538,         1.27278584148814, -0.192543915756971, -0.283665218588817,         -0.953671712939253, -0.0243506460341634, -0.136985964857522,         0.0675183911210883, 0.445168359831976, 0.906600388246007,         0.327410566460573, 0.992561626752092, 1.06540057402709,         -2.93048205538058, -0.362773742987749, 0.569932538092558,         -1.11963547230504, -0.960650358604092, 0.273736471912206,         -0.441423288640161, -1.73148781767851, 0.905854843976373,         -0.840839641506773, 0.386347854925968, 0.412430114457017,         1.52126864304235, 0.196564235460822, 0.665610352836782,         1.14059109224811, -0.40638112804759, -1.65556135368929,         0.1429300364911, 1.32591430830883, -1.40627766063955,         1.01213161499515, -0.0601308429578255, 0.0994814242802729,         -0.349221797505872, 1.03685327959033, 1.42415647914164,         1.57084879138618, -0.967400733067285, 0.759285844342793,         -0.376189654458143, -0.983409413915195, 0.389895101103217,         -0.0179507137482475, 0.791724605090037, 1.79239787563701,         1.03671688493632, -0.695685615560389, 0.139622664969318,         1.41324549389255, 1.17443759629564, -1.58478158266429,         0.946429920633797, -0.340514085118673, -0.625362690703707,         -1.10120222898271, -0.31179546007352, 0.688656505383638,         1.43527187786736, 0.138907098200222, -0.0730523864217389,         -0.202335938111801, 0.95379933574217, -1.08119344744204,         0.250018704551322, 1.02162198057182, 1.06185151113365,         0.417070210072757, -1.16236615136998, -0.821084729814662,         -0.720488257715399, -1.44327196869698, 0.0400203344434218,         1.22294668396681, -2.44669391662971, 0.758387891981524,         -0.202661654123509, -0.76913384719501, 0.770008811410607,         0.64838515883954, 0.0962173786188587, -0.919643353169371,         -0.704861777237915, -1.61723406227759, 1.88089390836698,         -0.155594360847613, -0.754513748781243, -2.16095244416957,         -0.429461680300403, -0.549127904639596)), class = \"data.frame\", row.names = c(NA,         -100L)), subset = 1:100), terms = m ~ x, model = structure(list(            m = c(-2.70768557567576, -0.576424186391143, -1.39468505766435,             0.352940010333777, -0.751073663742573, 1.10112215068494,             0.64327302939098, -0.14938407921516, 0.300648055349008,             -0.402390064288113, 0.105217507177305, -1.34330869257752,             0.634499444507559, -0.417056234145238, -0.689444327136714,             -0.177541921664477, 2.06030020004644, -1.57880113086557,             -0.0350236098318482, 0.421299816312967, -1.39203840499182,             -0.501157870159741, 0.535716829619804, -0.123625729763123,             -0.93091594519879, 0.623417442289001, 0.0387895076971012,             0.135281955102164, -0.994372384112306, -0.984797486284789,             -0.0679221207565718, 1.03860556835361, -0.0482831620584835,             -0.926342120663365, 0.935881382705561, 0.786099292294036,             -1.29113001718605, 1.45573724598723, 1.4725233179124,             -0.927198688152777, 1.63230692596192, -1.34583275813779,             0.0793030738542954, -1.05886647219432, -0.464410287779807,             -0.0216609328844941, 0.735259680279112, -0.601296999843413,             -2.92027803029758, 0.136387789921684, -0.825163111975978,             -0.0939501666089703, -0.692458238792383, 0.750387203782311,             0.265360417649642, 1.11331484146445, -0.638097303562536,             -0.410304001023256, 0.370062000967495, 0.338711965605387,             1.93018245881115, -2.34793004513222, 1.00522674280094,             -0.0883997024919002, 0.714544663803622, -0.424617963014997,             -2.70709761303748, 0.607543177964685, 0.222261024312942,             -0.902112703574491, -0.648147130507864, -0.00760114071435173,             2.62525924505497, -0.144851885573487, -0.859565159915909,             2.12241524335178, -0.0997657574931206, -0.66638718599577,             -1.53849269361302, -0.889098393887787, 1.62988543708224,             0.431822900600543, 0.714607860490375, 0.506755630638367,             -0.463928148243183, 0.78965053201951, 0.145108781075116,             -0.082828795105383, 1.14089526314909, 0.0363021530959265,             0.272123282993949, -1.13202707172738, 1.29955264357712,             0.843436834835929, -1.16451599782668, -0.253034129698682,             0.298175122998673, -0.187784712338332, 0.596964924803611,             -0.589869024170972), x = c(0.113254084384586, -0.565095410492474,             0.0807003872444948, -0.695771406588942, -1.09620213295198,             0.804440557754521, 0.656644119934708, -0.568030677344538,             1.27278584148814, -0.192543915756971, -0.283665218588817,             -0.953671712939253, -0.0243506460341634, -0.136985964857522,             0.0675183911210883, 0.445168359831976, 0.906600388246007,             0.327410566460573, 0.992561626752092, 1.06540057402709,             -2.93048205538058, -0.362773742987749, 0.569932538092558,             -1.11963547230504, -0.960650358604092, 0.273736471912206,             -0.441423288640161, -1.73148781767851, 0.905854843976373,             -0.840839641506773, 0.386347854925968, 0.412430114457017,             1.52126864304235, 0.196564235460822, 0.665610352836782,             1.14059109224811, -0.40638112804759, -1.65556135368929,             0.1429300364911, 1.32591430830883, -1.40627766063955,             1.01213161499515, -0.0601308429578255, 0.0994814242802729,             -0.349221797505872, 1.03685327959033, 1.42415647914164,             1.57084879138618, -0.967400733067285, 0.759285844342793,             -0.376189654458143, -0.983409413915195, 0.389895101103217,             -0.0179507137482475, 0.791724605090037, 1.79239787563701,             1.03671688493632, -0.695685615560389, 0.139622664969318,             1.41324549389255, 1.17443759629564, -1.58478158266429,             0.946429920633797, -0.340514085118673, -0.625362690703707,             -1.10120222898271, -0.31179546007352, 0.688656505383638,             1.43527187786736, 0.138907098200222, -0.0730523864217389,             -0.202335938111801, 0.95379933574217, -1.08119344744204,             0.250018704551322, 1.02162198057182, 1.06185151113365,             0.417070210072757, -1.16236615136998, -0.821084729814662,             -0.720488257715399, -1.44327196869698, 0.0400203344434218,             1.22294668396681, -2.44669391662971, 0.758387891981524,             -0.202661654123509, -0.76913384719501, 0.770008811410607,             0.64838515883954, 0.0962173786188587, -0.919643353169371,             -0.704861777237915, -1.61723406227759, 1.88089390836698,             -0.155594360847613, -0.754513748781243, -2.16095244416957,             -0.429461680300403, -0.549127904639596)), terms = m ~             x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\"),     structure(list(coefficients = c(`(Intercept)` = -0.0679996468807155,     m = 0.587713838880244, x = -0.125031439877835), residuals = c(`1` = -0.72418789697779,     `2` = 0.308983187282588, `3` = -1.13251595081405, `4` = 0.500295810254633,     `5` = 0.605593564702603, `6` = -1.57854662019583, `7` = 0.906806687301271,     `8` = -0.184334861855316, `9` = -0.382775546770517, `10` = 0.465284033009744,     `11` = 1.13235049178049, `12` = 1.42202991815845, `13` = -1.03040269725285,     `14` = -0.291601262211106, `15` = 0.263685459071788, `16` = 0.196406767973958,     `17` = -0.384776135820666, `18` = -1.78090985572335, `19` = -0.0459130907166428,     `20` = -0.859217577405723, `21` = -0.147614384121404, `22` = -0.658884209314452,     `23` = -0.00958483018686576, `24` = -0.703323685095425, `25` = -0.324096488317499,     `26` = -0.279616100774322, `27` = 1.1598047990092, `28` = 0.460095174210859,     `29` = 0.067311863380586, `30` = -1.01269502257558, `31` = 1.02945758361091,     `32` = -1.21549881751041, `33` = -0.761606973909826, `34` = -0.498383726565804,     `35` = -0.772916080768963, `36` = -0.640932797525183, `37` = 1.2451905167287,     `38` = -0.358647035245588, `39` = -0.663252709608193, `40` = 0.896837264781337,     `41` = -0.0798494399179627, `42` = -0.744038681456642, `43` = -0.432284620985666,     `44` = 0.635541215966658, `45` = 1.75409388966837, `46` = 1.56954189312582,     `47` = 0.907116810178091, `48` = 0.305828541357877, `49` = -1.29139020792864,     `50` = -0.481966608607904, `51` = -0.0932115427474211, `52` = 0.377814709718246,     `53` = 0.22892317695226, `54` = 0.0504356201830826, `55` = 1.73578348499691,     `56` = 0.530168142170372, `57` = 0.0106277612235038, `58` = -0.354100835346124,     `59` = 0.135551126777619, `60` = -0.489375622734018, `61` = 1.23042492164685,     `62` = -0.173215425172332, `63` = -0.359578979918491, `64` = -0.722872811591577,     `65` = 0.73764136962739, `66` = -1.1385863309731, `67` = -0.139475272863786,     `68` = 0.371460448713481, `69` = 0.13414852369101, `70` = 0.381686042147202,     `71` = -1.0241396408799, `72` = -0.329088246091469, `73` = -1.51881930420155,     `74` = -0.783790363438565, `75` = 1.16906979089906, `76` = 0.228527858405343,     `77` = 0.283376177633853, `78` = -0.629946032627776, `79` = -0.424605490703813,     `80` = -0.836878042150449, `81` = -0.118693319928978, `82` = 0.512293570383862,     `83` = 0.269432758983938, `84` = -0.358413977796524, `85` = 0.281506758836292,     `86` = 0.429497311828247, `87` = 0.760174616952124, `88` = -0.402495717280049,     `89` = -0.957157719581665, `90` = 0.0726450167031363, `91` = 0.318374042085465,     `92` = 1.40252453247219, `93` = -0.194448505575478, `94` = 0.161640442164555,     `95` = 0.333206644200611, `96` = 1.93823527895377, `97` = 1.10622195064346,     `98` = -0.386897583575503, `99` = -0.148393829051458, `100` = 0.0323009598424345    ), effects = c(`(Intercept)` = 1.06350127789543, m = 5.69242035298894,     x = 1.17720390725505, 0.489496078659293, 0.545957731260984,     -1.41769447982014, 1.04946556739631, -0.182408651039698,     -0.171788712674814, 0.508702809975914, 1.16718992582451,     1.37648740406403, -0.964557463550521, -0.241967117089696,     0.335468637835564, 0.312480413783642, -0.209202496352955,     -1.68279251725809, 0.132356769649325, -0.671211249310167,     -0.416211333350101, -0.634989174249545, 0.122937914974237,     -0.763506684499378, -0.3690489076228, -0.180197587328145,     1.17663470297563, 0.331788333774602, 0.232602035481681, -1.04431830576181,     1.13926504340726, -1.09905585626184, -0.523767968688743,     -0.412841203825931, -0.62826922383482, -0.443230448574701,     1.26153099975997, -0.473983985767009, -0.575747919106172,     1.10971478329245, -0.166489293996507, -0.567938970630977,     -0.3723274936346, 0.709694846824366, 1.77963964861695, 1.75285039724872,     1.13662231820734, 0.547411381282484, -1.34374613801042, -0.329427009144845,     -0.071911032803341, 0.333090722153529, 0.337045304110409,     0.117389410505268, 1.89241129254779, 0.802456360932822, 0.191862635014657,     -0.367439328774171, 0.219001935178222, -0.262424417159502,     1.43576361154286, -0.293271990844034, -0.183037272004977,     -0.695089748782551, 0.735987827923474, -1.19769592145171,     -0.11719779902543, 0.517609528052182, 0.36319445086359, 0.460808437935443,     -0.968068380392796, -0.285455369934601, -1.33603746040127,     -0.839709773917381, 1.26086244214588, 0.417277951775817,     0.469242524573236, -0.518672774471981, -0.494330684458965,     -0.865954360790206, -0.128016296678259, 0.417474130570479,     0.342803506077512, -0.152358485849545, 0.0705573949564981,     0.584116877150865, 0.804280658664869, -0.423022311273044,     -0.800055068923717, 0.212346025786194, 0.396603752070141,     1.36152428464148, -0.203112511664049, 0.0485805754902222,     0.607867507875009, 1.98631892944997, 1.08861597356403, -0.564706647053167,     -0.128351494369844, 0.0348877610768138), rank = 3L, fitted.values = c(`1` = -1.67350425228443,     `2` = -0.336117425445844, `3` = -0.897765441765426, `4` = 0.226421382278624,     `5` = -0.372356302000572, `6` = 0.478564718142226, `7` = 0.227959654868031,     `8` = -0.0847730440606776, `9` = -0.0504428705370546, `10` = -0.28041581326394,     `11` = 0.0293052089032888, `12` = -0.738241807957093, `13` = 0.307949053753811,     `14` = -0.295981814849961, `15` = -0.481637540736545, `16` = -0.228003532242167,     `17` = 1.02951374099811, `18` = -1.03681953488597, `19` = -0.212684916426736,     `20` = 0.0463955176668406, `21` = -0.519717490826797, `22` = -0.317178939201714,     `23` = 0.175589061736952, `24` = -0.000666563863573333, `25` = -0.495000333152899,     `26` = 0.264165746121594, `27` = 0.00998927297051133, `28` = 0.227997845258878,     `29` = -0.765666393486537, `30` = -0.541647366980808, `31` = -0.156224045810555,     `32` = 0.490836487719243, `33` = -0.286582738287969, `34` = -0.6370004401204,     `35` = 0.398808572472944, `36` = 0.251392039358841, `37` = -0.776004208195675,     `38` = 0.994554498217264, `39` = 0.779551936865978, `40` = -0.778708122422187,     `41` = 1.06715864358497, `42` = -0.985512456825384, `43` = -0.0138738870347191,     `44` = -0.702748431834483, `45` = -0.29727629574838, `46` = -0.210369335389224,     `47` = 0.186058307191555, `48` = -0.617795701183233, `49` = -1.66333195207027,     `50` = -0.0827772576864876, `51` = -0.505923892958439, `52` = -0.000258364950676826,     `53` = -0.523716082557889, `54` = 0.375257700887577, `55` = -0.0110341244980972,     `56` = 0.362204805253838, `57` = -0.572640467605839, `58` = -0.222158412214203,     `59` = 0.132033689490901, `60` = -0.0456340563023477, `61` = 0.919553672014986,     `62` = -1.24976310395525, `63` = 0.4044525253556, `64` = -0.0773784090270301,     `65` = 0.430138138199266, `66` = -0.179868599695379, `67` = -1.62001414194215,     `68` = 0.202958172077058, `69` = -0.116827876554222, `70` = -0.61555152149834,     `71` = -0.439790840049885, `72` = -0.047168588788665, `73` = 1.35564663778403,     `74` = -0.0179479310999926, `75` = -0.604438185409048, `76` = 1.05163829624577,     `77` = -0.259398186579289, `78` = -0.511791507038441, `79` = -0.826860780362184,     `80` = -0.487873671064335, `81` = 0.979990264559121, `82` = 0.366243020129133,     `83` = 0.346981482062227, `84` = 0.0769208653857439, `85` = -0.0347429765127656,     `86` = 0.301266568545931, `87` = 0.0426218703232603, `88` = -0.0205133636483539,     `89` = 0.506244977575634, `90` = -0.127732899130217, `91` = 0.0799007750263667,     `92` = -0.618323290301126, `93` = 0.783895309025869, `94` = 0.629904956599758,     `95` = -0.987572688021464, `96` = -0.197257119640001, `97` = 0.201579939733166,     `98` = 0.0918236745499504, `99` = 0.336541113012785, `100` = -0.346015582918594    ), assign = 0:2, qr = structure(list(qr = structure(cdim = c(100L,     3L), dimnames = list(c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",     \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\",     \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\",     \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\",     \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\",     \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\",     \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\",     \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\",     \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\",     \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\",     \"98\", \"99\", \"100\"), c(\"(Intercept)\", \"m\", \"x\")), assign = 0:2),         qraux = c(1.1, 1.0264052388037, 1.04144675547782), pivot = 1:3,         tol = 1e-07, rank = 3L), class = \"qr\"), df.residual = 97L,         xlevels = structure(list(), names = character(0)), call = stats::lm(formula = y ~             m + x, data = structure(list(m = c(-2.70768557567576,         -0.576424186391143, -1.39468505766435, 0.352940010333777,         -0.751073663742573, 1.10112215068494, 0.64327302939098,         -0.14938407921516, 0.300648055349008, -0.402390064288113,         0.105217507177305, -1.34330869257752, 0.634499444507559,         -0.417056234145238, -0.689444327136714, -0.177541921664477,         2.06030020004644, -1.57880113086557, -0.0350236098318482,         0.421299816312967, -1.39203840499182, -0.501157870159741,         0.535716829619804, -0.123625729763123, -0.93091594519879,         0.623417442289001, 0.0387895076971012, 0.135281955102164,         -0.994372384112306, -0.984797486284789, -0.0679221207565718,         1.03860556835361, -0.0482831620584835, -0.926342120663365,         0.935881382705561, 0.786099292294036, -1.29113001718605,         1.45573724598723, 1.4725233179124, -0.927198688152777,         1.63230692596192, -1.34583275813779, 0.0793030738542954,         -1.05886647219432, -0.464410287779807, -0.0216609328844941,         0.735259680279112, -0.601296999843413, -2.92027803029758,         0.136387789921684, -0.825163111975978, -0.0939501666089703,         -0.692458238792383, 0.750387203782311, 0.265360417649642,         1.11331484146445, -0.638097303562536, -0.410304001023256,         0.370062000967495, 0.338711965605387, 1.93018245881115,         -2.34793004513222, 1.00522674280094, -0.0883997024919002,         0.714544663803622, -0.424617963014997, -2.70709761303748,         0.607543177964685, 0.222261024312942, -0.902112703574491,         -0.648147130507864, -0.00760114071435173, 2.62525924505497,         -0.144851885573487, -0.859565159915909, 2.12241524335178,         -0.0997657574931206, -0.66638718599577, -1.53849269361302,         -0.889098393887787, 1.62988543708224, 0.431822900600543,         0.714607860490375, 0.506755630638367, -0.463928148243183,         0.78965053201951, 0.145108781075116, -0.082828795105383,         1.14089526314909, 0.0363021530959265, 0.272123282993949,         -1.13202707172738, 1.29955264357712, 0.843436834835929,         -1.16451599782668, -0.253034129698682, 0.298175122998673,         -0.187784712338332, 0.596964924803611, -0.589869024170972        ), y = c(-2.39769214926222, -0.0271342381632562, -2.03028139257948,         0.726717192533257, 0.233237262702031, -1.0999819020536,         1.1347663421693, -0.269107905915993, -0.433218417307571,         0.184868219745804, 1.16165570068378, 0.683788110201355,         -0.722453643499035, -0.587583077061067, -0.217952081664757,         -0.0315967642682094, 0.644737605177446, -2.81772939060932,         -0.258598007143378, -0.812822059738883, -0.667331874948201,         -0.976063148516166, 0.166004231550086, -0.703990248958998,         -0.819096821470398, -0.0154503546527277, 1.16979407197972,         0.688093019469736, -0.698354530105951, -1.55434238955639,         0.873233537800358, -0.724662329791168, -1.04818971219779,         -1.1353841666862, -0.37410750829602, -0.389540758166342,         0.469186308533027, 0.635907462971676, 0.116299227257785,         0.11812914235915, 0.987309203667009, -1.72955113828203,         -0.446158508020385, -0.0672072158678249, 1.45681759391999,         1.3591725577366, 1.09317511736965, -0.311967159825356,         -2.95472215999891, -0.564743866294391, -0.59913543570586,         0.377556344767569, -0.294792905605629, 0.42569332107066,         1.72474936049882, 0.892372947424209, -0.562012706382335,         -0.576259247560327, 0.26758481626852, -0.535009679036365,         2.14997859366183, -1.42297852912758, 0.0448735454371089,         -0.800251220618607, 1.16777950782666, -1.31845493066848,         -1.75948941480594, 0.574418620790539, 0.0173206471367888,         -0.233865479351139, -1.46393048092979, -0.376256834880135,         -0.163172666417521, -0.801738294538558, 0.56463160549001,         1.28016615465111, 0.0239779910545641, -1.14173753966622,         -1.251466271066, -1.32475171321478, 0.861296944630143,         0.878536590512995, 0.616414241046165, -0.281493112410781,         0.246763782323527, 0.730763880374178, 0.802796487275384,         -0.423009080928403, -0.450912742006031, -0.0550878824270805,         0.398274817111832, 0.784201242171063, 0.589446803450392,         0.791545398764313, -0.654366043820853, 1.74097815931376,         1.30780189037663, -0.295073909025553, 0.188147283961327,         -0.313714623076159), x = c(0.113254084384586, -0.565095410492474,         0.0807003872444948, -0.695771406588942, -1.09620213295198,         0.804440557754521, 0.656644119934708, -0.568030677344538,         1.27278584148814, -0.192543915756971, -0.283665218588817,         -0.953671712939253, -0.0243506460341634, -0.136985964857522,         0.0675183911210883, 0.445168359831976, 0.906600388246007,         0.327410566460573, 0.992561626752092, 1.06540057402709,         -2.93048205538058, -0.362773742987749, 0.569932538092558,         -1.11963547230504, -0.960650358604092, 0.273736471912206,         -0.441423288640161, -1.73148781767851, 0.905854843976373,         -0.840839641506773, 0.386347854925968, 0.412430114457017,         1.52126864304235, 0.196564235460822, 0.665610352836782,         1.14059109224811, -0.40638112804759, -1.65556135368929,         0.1429300364911, 1.32591430830883, -1.40627766063955,         1.01213161499515, -0.0601308429578255, 0.0994814242802729,         -0.349221797505872, 1.03685327959033, 1.42415647914164,         1.57084879138618, -0.967400733067285, 0.759285844342793,         -0.376189654458143, -0.983409413915195, 0.389895101103217,         -0.0179507137482475, 0.791724605090037, 1.79239787563701,         1.03671688493632, -0.695685615560389, 0.139622664969318,         1.41324549389255, 1.17443759629564, -1.58478158266429,         0.946429920633797, -0.340514085118673, -0.625362690703707,         -1.10120222898271, -0.31179546007352, 0.688656505383638,         1.43527187786736, 0.138907098200222, -0.0730523864217389,         -0.202335938111801, 0.95379933574217, -1.08119344744204,         0.250018704551322, 1.02162198057182, 1.06185151113365,         0.417070210072757, -1.16236615136998, -0.821084729814662,         -0.720488257715399, -1.44327196869698, 0.0400203344434218,         1.22294668396681, -2.44669391662971, 0.758387891981524,         -0.202661654123509, -0.76913384719501, 0.770008811410607,         0.64838515883954, 0.0962173786188587, -0.919643353169371,         -0.704861777237915, -1.61723406227759, 1.88089390836698,         -0.155594360847613, -0.754513748781243, -2.16095244416957,         -0.429461680300403, -0.549127904639596)), class = \"data.frame\", row.names = c(NA,         -100L)), subset = 1:100), terms = y ~ m + x, model = structure(list(            y = c(-2.39769214926222, -0.0271342381632562, -2.03028139257948,             0.726717192533257, 0.233237262702031, -1.0999819020536,             1.1347663421693, -0.269107905915993, -0.433218417307571,             0.184868219745804, 1.16165570068378, 0.683788110201355,             -0.722453643499035, -0.587583077061067, -0.217952081664757,             -0.0315967642682094, 0.644737605177446, -2.81772939060932,             -0.258598007143378, -0.812822059738883, -0.667331874948201,             -0.976063148516166, 0.166004231550086, -0.703990248958998,             -0.819096821470398, -0.0154503546527277, 1.16979407197972,             0.688093019469736, -0.698354530105951, -1.55434238955639,             0.873233537800358, -0.724662329791168, -1.04818971219779,             -1.1353841666862, -0.37410750829602, -0.389540758166342,             0.469186308533027, 0.635907462971676, 0.116299227257785,             0.11812914235915, 0.987309203667009, -1.72955113828203,             -0.446158508020385, -0.0672072158678249, 1.45681759391999,             1.3591725577366, 1.09317511736965, -0.311967159825356,             -2.95472215999891, -0.564743866294391, -0.59913543570586,             0.377556344767569, -0.294792905605629, 0.42569332107066,             1.72474936049882, 0.892372947424209, -0.562012706382335,             -0.576259247560327, 0.26758481626852, -0.535009679036365,             2.14997859366183, -1.42297852912758, 0.0448735454371089,             -0.800251220618607, 1.16777950782666, -1.31845493066848,             -1.75948941480594, 0.574418620790539, 0.0173206471367888,             -0.233865479351139, -1.46393048092979, -0.376256834880135,             -0.163172666417521, -0.801738294538558, 0.56463160549001,             1.28016615465111, 0.0239779910545641, -1.14173753966622,             -1.251466271066, -1.32475171321478, 0.861296944630143,             0.878536590512995, 0.616414241046165, -0.281493112410781,             0.246763782323527, 0.730763880374178, 0.802796487275384,             -0.423009080928403, -0.450912742006031, -0.0550878824270805,             0.398274817111832, 0.784201242171063, 0.589446803450392,             0.791545398764313, -0.654366043820853, 1.74097815931376,             1.30780189037663, -0.295073909025553, 0.188147283961327,             -0.313714623076159), m = c(-2.70768557567576, -0.576424186391143,             -1.39468505766435, 0.352940010333777, -0.751073663742573,             1.10112215068494, 0.64327302939098, -0.14938407921516,             0.300648055349008, -0.402390064288113, 0.105217507177305,             -1.34330869257752, 0.634499444507559, -0.417056234145238,             -0.689444327136714, -0.177541921664477, 2.06030020004644,             -1.57880113086557, -0.0350236098318482, 0.421299816312967,             -1.39203840499182, -0.501157870159741, 0.535716829619804,             -0.123625729763123, -0.93091594519879, 0.623417442289001,             0.0387895076971012, 0.135281955102164, -0.994372384112306,             -0.984797486284789, -0.0679221207565718, 1.03860556835361,             -0.0482831620584835, -0.926342120663365, 0.935881382705561,             0.786099292294036, -1.29113001718605, 1.45573724598723,             1.4725233179124, -0.927198688152777, 1.63230692596192,             -1.34583275813779, 0.0793030738542954, -1.05886647219432,             -0.464410287779807, -0.0216609328844941, 0.735259680279112,             -0.601296999843413, -2.92027803029758, 0.136387789921684,             -0.825163111975978, -0.0939501666089703, -0.692458238792383,             0.750387203782311, 0.265360417649642, 1.11331484146445,             -0.638097303562536, -0.410304001023256, 0.370062000967495,             0.338711965605387, 1.93018245881115, -2.34793004513222,             1.00522674280094, -0.0883997024919002, 0.714544663803622,             -0.424617963014997, -2.70709761303748, 0.607543177964685,             0.222261024312942, -0.902112703574491, -0.648147130507864,             -0.00760114071435173, 2.62525924505497, -0.144851885573487,             -0.859565159915909, 2.12241524335178, -0.0997657574931206,             -0.66638718599577, -1.53849269361302, -0.889098393887787,             1.62988543708224, 0.431822900600543, 0.714607860490375,             0.506755630638367, -0.463928148243183, 0.78965053201951,             0.145108781075116, -0.082828795105383, 1.14089526314909,             0.0363021530959265, 0.272123282993949, -1.13202707172738,             1.29955264357712, 0.843436834835929, -1.16451599782668,             -0.253034129698682, 0.298175122998673, -0.187784712338332,             0.596964924803611, -0.589869024170972), x = c(0.113254084384586,             -0.565095410492474, 0.0807003872444948, -0.695771406588942,             -1.09620213295198, 0.804440557754521, 0.656644119934708,             -0.568030677344538, 1.27278584148814, -0.192543915756971,             -0.283665218588817, -0.953671712939253, -0.0243506460341634,             -0.136985964857522, 0.0675183911210883, 0.445168359831976,             0.906600388246007, 0.327410566460573, 0.992561626752092,             1.06540057402709, -2.93048205538058, -0.362773742987749,             0.569932538092558, -1.11963547230504, -0.960650358604092,             0.273736471912206, -0.441423288640161, -1.73148781767851,             0.905854843976373, -0.840839641506773, 0.386347854925968,             0.412430114457017, 1.52126864304235, 0.196564235460822,             0.665610352836782, 1.14059109224811, -0.40638112804759,             -1.65556135368929, 0.1429300364911, 1.32591430830883,             -1.40627766063955, 1.01213161499515, -0.0601308429578255,             0.0994814242802729, -0.349221797505872, 1.03685327959033,             1.42415647914164, 1.57084879138618, -0.967400733067285,             0.759285844342793, -0.376189654458143, -0.983409413915195,             0.389895101103217, -0.0179507137482475, 0.791724605090037,             1.79239787563701, 1.03671688493632, -0.695685615560389,             0.139622664969318, 1.41324549389255, 1.17443759629564,             -1.58478158266429, 0.946429920633797, -0.340514085118673,             -0.625362690703707, -1.10120222898271, -0.31179546007352,             0.688656505383638, 1.43527187786736, 0.138907098200222,             -0.0730523864217389, -0.202335938111801, 0.95379933574217,             -1.08119344744204, 0.250018704551322, 1.02162198057182,             1.06185151113365, 0.417070210072757, -1.16236615136998,             -0.821084729814662, -0.720488257715399, -1.44327196869698,             0.0400203344434218, 1.22294668396681, -2.44669391662971,             0.758387891981524, -0.202661654123509, -0.76913384719501,             0.770008811410607, 0.64838515883954, 0.0962173786188587,             -0.919643353169371, -0.704861777237915, -1.61723406227759,             1.88089390836698, -0.155594360847613, -0.754513748781243,             -2.16095244416957, -0.429461680300403, -0.549127904639596            )), terms = y ~ m + x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\")), class = c(\"lm_list_lmhelprs\", \"lm_list\", \"list\"), cases_removed = integer(0), call = (function (models,     data, na_omit_all = TRUE, ...) {    my_call <- match.call()    my_call$na_omit_all <- NULL    my_call[[1L]] <- quote(stats::lm)    my_mm <- my_call    my_mm[[1L]] <- quote(stats::model.frame)    my_mm$models <- NULL    if (is.null(my_call$data) && na_omit_all) {        stop(\"The argument 'data' must be set if na_omit_all is TRUE.\")    }    models1 <- parse_models(models)    data_full <- eval(my_call$data, envir = parent.frame())    if (na_omit_all) {        all_vars <- sapply(models1, function(x) {            all.vars(stats::as.formula(x))        }, USE.NAMES = FALSE)        all_vars <- unique(unlist(all_vars))        if (!is.null(my_call$subset)) {            all_ys <- sapply(models1, function(x) {                all.vars(stats::as.formula(x))[1]            }, USE.NAMES = FALSE)            ys1 <- all_ys[1]            f0 <- paste(ys1, \"~\", paste(setdiff(all_vars, ys1),                 collapse = \" + \"))            my_mm0 <- my_mm            my_mm0$formula <- f0            my_mm0$na.action <- \"na.pass\"            data_selected <- tryCatch(eval(my_mm0, envir = parent.frame()),                 error = function(e) e)            if (inherits(data_selected, \"error\")) {                subset_i <- eval(my_mm0$subset, envir = parent.frame())                if (is.logical(subset_i)) {                  subset_i <- sapply(subset_i, isTRUE)                  omitted_subset <- which(!subset_i)                }                else if (is.character(subset_i)) {                  omitted_subset <- !(row.names(data_full) %in%                     subset_i)                  omitted_subset[is.na(omitted_subset)] <- TRUE                  omitted_subset <- which(omitted_subset)                }                else {                  omitted_subset <- setdiff(seq_len(nrow(data_full)),                     subset_i)                }            }            else {                subset_i <- match(row.names(data_selected), row.names(data_full))                subset_i <- stats::na.omit(subset_i)                omitted_subset <- setdiff(seq_len(nrow(data_full)),                   subset_i)            }        }        else {            omitted_subset <- numeric(0)        }        data <- stats::na.omit(eval(my_call$data, envir = parent.frame())[,             all_vars])        data_omitted <- attr(data, \"na.action\")        if (!is.null(data_omitted)) {            omitted_listwise <- as.numeric(data_omitted)        }        else {            omitted_listwise <- numeric(0)        }        omitted <- c(omitted_subset, omitted_listwise)        omitted <- unique(sort(omitted))        selected <- !logical(nrow(data_full))        selected[omitted] <- FALSE        my_call$subset <- which(selected)    }    else {        selected <- !logical(nrow(data_full))    }    tmpfct <- function(x, env = parent.frame()) {        call0 <- my_call        call0$models <- NULL        call0$formula <- stats::as.formula(x, env = env)        outtmp <- eval(call0, envir = env)        outtmp    }    out1 <- lapply(models1, tmpfct, env = parent.frame())    out2 <- lm2list_free(out1)    attr(out2, \"cases_removed\") <- which(!selected)    attr(out2, \"call\") <- match.call()    out2})(models = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(m = c(-2.70768557567576, -0.576424186391143, -1.39468505766435, 0.352940010333777, -0.751073663742573, 1.10112215068494, 0.64327302939098, -0.14938407921516, 0.300648055349008, -0.402390064288113, 0.105217507177305, -1.34330869257752, 0.634499444507559, -0.417056234145238, -0.689444327136714, -0.177541921664477, 2.06030020004644, -1.57880113086557, -0.0350236098318482, 0.421299816312967, -1.39203840499182, -0.501157870159741, 0.535716829619804, -0.123625729763123, -0.93091594519879, 0.623417442289001, 0.0387895076971012, 0.135281955102164, -0.994372384112306, -0.984797486284789, -0.0679221207565718, 1.03860556835361, -0.0482831620584835, -0.926342120663365, 0.935881382705561, 0.786099292294036, -1.29113001718605, 1.45573724598723, 1.4725233179124, -0.927198688152777, 1.63230692596192, -1.34583275813779, 0.0793030738542954, -1.05886647219432, -0.464410287779807, -0.0216609328844941, 0.735259680279112, -0.601296999843413, -2.92027803029758, 0.136387789921684, -0.825163111975978, -0.0939501666089703, -0.692458238792383, 0.750387203782311, 0.265360417649642, 1.11331484146445, -0.638097303562536, -0.410304001023256, 0.370062000967495, 0.338711965605387, 1.93018245881115, -2.34793004513222, 1.00522674280094, -0.0883997024919002, 0.714544663803622, -0.424617963014997, -2.70709761303748, 0.607543177964685, 0.222261024312942, -0.902112703574491, -0.648147130507864, -0.00760114071435173, 2.62525924505497, -0.144851885573487, -0.859565159915909, 2.12241524335178, -0.0997657574931206, -0.66638718599577, -1.53849269361302, -0.889098393887787, 1.62988543708224, 0.431822900600543, 0.714607860490375, 0.506755630638367, -0.463928148243183, 0.78965053201951, 0.145108781075116, -0.082828795105383, 1.14089526314909, 0.0363021530959265, 0.272123282993949, -1.13202707172738, 1.29955264357712, 0.843436834835929, -1.16451599782668, -0.253034129698682, 0.298175122998673, -0.187784712338332, 0.596964924803611, -0.589869024170972), y = c(-2.39769214926222, -0.0271342381632562, -2.03028139257948, 0.726717192533257, 0.233237262702031, -1.0999819020536, 1.1347663421693, -0.269107905915993, -0.433218417307571, 0.184868219745804, 1.16165570068378, 0.683788110201355, -0.722453643499035, -0.587583077061067, -0.217952081664757, -0.0315967642682094, 0.644737605177446, -2.81772939060932, -0.258598007143378, -0.812822059738883, -0.667331874948201, -0.976063148516166, 0.166004231550086, -0.703990248958998, -0.819096821470398, -0.0154503546527277, 1.16979407197972, 0.688093019469736, -0.698354530105951, -1.55434238955639, 0.873233537800358, -0.724662329791168, -1.04818971219779, -1.1353841666862, -0.37410750829602, -0.389540758166342, 0.469186308533027, 0.635907462971676, 0.116299227257785, 0.11812914235915, 0.987309203667009, -1.72955113828203, -0.446158508020385, -0.0672072158678249, 1.45681759391999, 1.3591725577366, 1.09317511736965, -0.311967159825356, -2.95472215999891, -0.564743866294391, -0.59913543570586, 0.377556344767569, -0.294792905605629, 0.42569332107066, 1.72474936049882, 0.892372947424209, -0.562012706382335, -0.576259247560327, 0.26758481626852, -0.535009679036365, 2.14997859366183, -1.42297852912758, 0.0448735454371089, -0.800251220618607, 1.16777950782666, -1.31845493066848, -1.75948941480594, 0.574418620790539, 0.0173206471367888, -0.233865479351139, -1.46393048092979, -0.376256834880135, -0.163172666417521, -0.801738294538558, 0.56463160549001, 1.28016615465111, 0.0239779910545641, -1.14173753966622, -1.251466271066, -1.32475171321478, 0.861296944630143, 0.878536590512995, 0.616414241046165, -0.281493112410781, 0.246763782323527, 0.730763880374178, 0.802796487275384, -0.423009080928403, -0.450912742006031, -0.0550878824270805, 0.398274817111832, 0.784201242171063, 0.589446803450392, 0.791545398764313, -0.654366043820853, 1.74097815931376, 1.30780189037663, -0.295073909025553, 0.188147283961327, -0.313714623076159), x = c(0.113254084384586, -0.565095410492474, 0.0807003872444948, -0.695771406588942, -1.09620213295198, 0.804440557754521, 0.656644119934708, -0.568030677344538, 1.27278584148814, -0.192543915756971, -0.283665218588817, -0.953671712939253, -0.0243506460341634, -0.136985964857522, 0.0675183911210883, 0.445168359831976, 0.906600388246007, 0.327410566460573, 0.992561626752092, 1.06540057402709, -2.93048205538058, -0.362773742987749, 0.569932538092558, -1.11963547230504, -0.960650358604092, 0.273736471912206, -0.441423288640161, -1.73148781767851, 0.905854843976373, -0.840839641506773, 0.386347854925968, 0.412430114457017, 1.52126864304235, 0.196564235460822, 0.665610352836782, 1.14059109224811, -0.40638112804759, -1.65556135368929, 0.1429300364911, 1.32591430830883, -1.40627766063955, 1.01213161499515, -0.0601308429578255, 0.0994814242802729, -0.349221797505872, 1.03685327959033, 1.42415647914164, 1.57084879138618, -0.967400733067285, 0.759285844342793, -0.376189654458143, -0.983409413915195, 0.389895101103217, -0.0179507137482475, 0.791724605090037, 1.79239787563701, 1.03671688493632, -0.695685615560389, 0.139622664969318, 1.41324549389255, 1.17443759629564, -1.58478158266429, 0.946429920633797, -0.340514085118673, -0.625362690703707, -1.10120222898271, -0.31179546007352, 0.688656505383638, 1.43527187786736, 0.138907098200222, -0.0730523864217389, -0.202335938111801, 0.95379933574217, -1.08119344744204, 0.250018704551322, 1.02162198057182, 1.06185151113365, 0.417070210072757, -1.16236615136998, -0.821084729814662, -0.720488257715399, -1.44327196869698, 0.0400203344434218, 1.22294668396681, -2.44669391662971, 0.758387891981524, -0.202661654123509, -0.76913384719501, 0.770008811410607, 0.64838515883954, 0.0962173786188587, -0.919643353169371, -0.704861777237915, -1.61723406227759, 1.88089390836698, -0.155594360847613, -0.754513748781243, -2.16095244416957, -0.429461680300403, -0.549127904639596)), class = \"data.frame\", row.names = c(NA, -100L))))), class = c(\"fit_out\", \"list\"), args = list(model = NULL,     fit_function = \"lm\", arg_data_name = \"data\", arg_model_name = \"model\",     arg_group_name = \"group\", parallel = FALSE, progress = TRUE,     ncores = 1)), R = 50, parallel = FALSE, progress = TRUE,     ncores = 1): manymome 0.2.7.1 or later is required. If not available from CRAN, can be installed from GitHub: remotes::install_github('sfcheung/manymome')  test_out <- power4test(object = sim_only,                        test_fun = test_indirect_effect,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         boot_ci = TRUE,                                         mc_ci = FALSE)) #> Error: object 'sim_only' not found test_out <- power4test(object = test_out,                        test_fun = test_parameters) #> Error: object 'test_out' not found get_rejection_rates(test_out) #> Error: object 'test_out' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse YAML-Stye 'pop_es' — pop_es_yaml","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"Convert YAML string vector list pop_es specification.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"","code":"pop_es_yaml(text)"},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"text string parsed specification population values.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"Either named vector (single-group model) list named vector (multigroup model).","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"allows users specify population values model using one single string, 'lavaan' model syntax.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"single-group-model","dir":"Reference","previous_headings":"","what":"Single-Group Model","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"example string single-group model: string must follow format: line start tag:. tag can name parameter, lavaan model syntax format. example, m ~ x denotes path x m. tag lavaan model syntax can specify one parameter using +. example, y ~ m + x denotes two paths m x y. Alternatively, tag can either .beta. .cov.. Use .beta. set default values regression coefficients. Use .cov. set default values correlations exogenous variables (e.g., predictors). tag value population value: nil nil (zero), s small, m medium, l large. (Note: n used mode.) value label determined es1 es2 described ptable_pop(). value can also set numeric value, .30 -.30. another example: example, regression coefficients small, path m y large.","code":"y ~ m: l m ~ x: m y ~ x: nil .beta: s y ~ m: l"},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"multigroup-model","dir":"Reference","previous_headings":"","what":"Multigroup Model","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"example string multigroup model: format similar single-group model. parameter value groups, line can specified case single-group model: tag: value. parameter different values across groups, must format: line starts tag, followed two lines. line starts hyphen - adn value group. example: denotes model two group. values path x m 0 (nil) small (s), respectively. Another equivalent way specify values using [], line tag. example: number groups inferred number values parameter. Therefore, tag one value, tag must number value, one value. tag .beta. .cov. can also used multigroup models.","code":"y ~ m: l m ~ x:   - nil   - s y ~ x: nil m ~ x:   - nil   - s m ~ x: [nil, s]"},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"which-approach-to-use","dir":"Reference","previous_headings":"","what":"Which Approach To Use","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"Note using named vectors named lists reliable. However, using one single string user-friendly. method failed, please ues named vectors named list instead.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical Details","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"string parsed yaml::read_yaml(). Therefore, format requirement actually YAML. Users knowledgeable YAML can use equivalent way specify string.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/pop_es_yaml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse YAML-Stye 'pop_es' — pop_es_yaml","text":"","code":"mod_es <- c(\"y ~ m\" = \"l\",             \"m ~ x\" = \"m\",             \"y ~ x\" = \"nil\")  mod_es_yaml <- \" y ~ m: l m ~ x: m y ~ x: nil \"  pop_es_yaml(mod_es_yaml) #> y ~ m m ~ x y ~ x  #>   \"l\"   \"m\" \"nil\""},{"path":"https://sfcheung.github.io/power4mome/reference/power4mome-package.html","id":null,"dir":"Reference","previous_headings":"","what":"power4mome: Power Analysis for Moderation and Mediation — power4mome-package","title":"power4mome: Power Analysis for Moderation and Mediation — power4mome-package","text":"Power analysis sample size determination moderation, mediation, moderated mediation models fitted structural equation modeling.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/power4mome-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"power4mome: Power Analysis for Moderation and Mediation — power4mome-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) Authors: Sing-Hang Cheung (ORCID)","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Power of a Test — power4test","title":"Estimate the Power of a Test — power4test","text":"--one function receives model specification, generates datasets, fits model, target test, returns test results.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Power of a Test — power4test","text":"","code":"power4test(   object = NULL,   nrep = NULL,   ptable = NULL,   model = NULL,   pop_es = NULL,   n = NULL,   number_of_indicators = NULL,   reliability = NULL,   x_fun = list(),   fit_model_args = list(),   R = NULL,   ci_type = \"mc\",   gen_mc_args = list(),   gen_boot_args = list(),   test_fun = NULL,   test_args = list(),   map_names = c(fit = \"fit\"),   results_fun = NULL,   results_args = list(),   test_name = NULL,   test_note = NULL,   do_the_test = TRUE,   sim_all = NULL,   iseed = NULL,   parallel = FALSE,   progress = TRUE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1) )  # S3 method for class 'power4test' print(   x,   what = c(\"data\", \"test\"),   digits = 3,   digits_descriptive = 2,   data_long = FALSE,   test_long = FALSE,   fit_to_all_args = list(),   ... )"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Power of a Test — power4test","text":"object Optional. set power4test object, updated using value(s) n, pop_es, /nrep. Default NULL. nrep number replications generate simulated datasets. Default NULL. Must set called create power4test object. ptable output ptable_pop(), ptable_pop object, representing population model. NULL, default, ptable_pop() called generate ptable_pop object using model pop_es. model lavaan model syntax population model. Required. Ignored ptable specified. See 'Details' ptable_pop() use models latent factors indicators. Ignored ptable specified. pop_es character vector specify population effect sizes. See 'Details' ptable_pop() set effect sizes argument. Ignored ptable specified. n sample size dataset. Default 100. number_of_indicators named vector specify number indicators factors. See 'Details' sim_data() set argument. Default NULL variables model syntax observed variables. reliability named vector set reliability coefficient set indicators. Default NULL. See 'Details' sim_data() set argument. x_fun function(s) used generate exogenous variables. supplied, set list(), default, variables generated multivariate normal distribution. See 'Details' sim_data() use argument. fit_model_args list arguments passed fit_model() fitting model. named argument names names arguments. R number replications generate Monte Carlo bootstrapping estimates fit output. Monte Carlo bootstrapping estimates generated R set NULL. ci_type type simulation-based confidence intervals use. Can either \"mc\" Monte Carlo method (default) \"boot\" nonparametric bootstrapping method. See sim_data() details. gen_mc_args list arguments passed manymome::do_mc() generating Monte Carlo estimates. named argument names names arguments. Used ci_type \"mc\". gen_boot_args list arguments passed manymome::do_boot() generating bootstrap estimates. named argument names names arguments. Used ci_type `\"boot\". test_fun function test. See help page do_test() requirements function. test_args list arguments passed test_fun function. Default list(). map_names named character vector specifying content element extra replication sim_all map argument test_fun. Default c(fit = \"fit\"), indicating element fit element extra set argument fit test_fun. , first replication, fit = sim_out[[1]]$extra$fit calling test_fun. results_fun function used extract test results. See Details do_test() requirements function. Default NULL, assuming output test_fun can used directly. results_args list arguments passed results_fun function. Default list(). test_name String. name test. Default NULL, name created test_fun. Note sim_out power4test object already test name stored, replaced new results. test_note String. optional note test, stored attribute test_note output do_test(). Default NULL. do_the_test TRUE, do_test() called specified test fit output dataset. sim_all set either sim_out object (output sim_out() power4test object (output power4test()), stored datasets fit outputs used test. iseed seed random number generator. Default NULL seed changed. seed set , calling sim_data(). parallel TRUE, parallel processing used calling functions, appropriate. Default FALSE. progress TRUE, progress step displayed. Default `FALSE. ncores number CPU cores use parallel processing used. x object printed. string vector print, \"data\" simulated data \"test\" stored test(s). Default c(\"data\", \"test\"). digits numbers digits displayed decimal. digits_descriptive number digits displayed decimal descriptive statistics table. data_long TRUE, detailed results printed printing simulated data. test_long TRUE, detailed results printed printing test(s). fit_to_all_args named list arguments passed lavaan::sem() model fitted sample combined ... Optional arguments passed print methods.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Power of a Test — power4test","text":"object class power4test, list two elements: sim_all: output sim_out(). test_all: named list output do_test(). names values test_name. list can one test call power4test() can add new tests power4test object. print method power4test returns x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the Power of a Test — power4test","text":"--one function estimating power test model, given sample size effect sizes. workflow: object model data already generated supplied sim_all, output sim_out() power4test() do_the_test set FALSE, following steps skipped go directly test. Call sim_data() determine population model generate datasets. Call fit_model() fit model datasets. R NULL ci_type = \"mc\", call gen_mc() generate Monte Carlo estimates using manymome::do_mc(). R NULL ci_type = \"boot\", call gen_boot() generate bootstrap estimates using manymome::do_boot(). Merge results sim_out object calling sim_out(). do_the_test FALSE, skip remaining steps return power4test object, contains data generated optionally Monte Carlo bootstrap estimates. do_the_test TRUE, test. do_test() called test fit output datasets. Return power4test object include output sim_out , do_the_test TRUE, output do_test(). function used users interested power one several tests particular aspect model, parameter, given specific effect sizes sample sizes.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"updating-a-condition","dir":"Reference","previous_headings":"","what":"Updating a Condition","title":"Estimate the Power of a Test — power4test","text":"function can also used update condition selected aspects changed. example, without calling function arguments set just change sample size, can called supplying existing power4test object set n new sample size. data tests updated automatically.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"multiple-models","dir":"Reference","previous_headings":"","what":"Multiple Models","title":"Estimate the Power of a Test — power4test","text":"one model can fitted replication. done setting fit_model_args named list. names names used identify models, element list named list arguments model. example: Three models fitted. first model model ued generate data, named \"fit\". second first models named \"fit2\" \"fit3\", respectively, \"fit2\" fitted model = mod2 \"fit3\" fitted model = mod3. Monte Carlos bootstrap estimates generated, generated model, using values arguments.","code":"fit_model_args = list(fit = list(),                       fit2 = list(model = mod2),                       fit3 = list(model = mod3))"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the Power of a Test — power4test","text":"","code":"model_simple_med <- \" m ~ a * x y ~ b * m + x ab := a * b \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  out <- power4test(nrep = 50,                   model = model_simple_med,                   pop_es = model_simple_med_es,                   n = 100,                   test_fun = test_parameters,                   test_args = list(pars = \"a\"),                   iseed = 1234,                   parallel = FALSE,                   progress = TRUE) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Do the test: test_parameters: CIs (pars: a)   print(out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a * x #> y ~ b * m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a * x #> y ~ b * m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  50  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> =========== <test_parameters: CIs (pars: a)> =========== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label   est    se     z pvalue  cilo  cihi   sig #> 1          a   m  ~   x     a 0.307 0.095 3.247  0.040 0.121 0.494 0.860 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 50  #> - Proportion of valid replications for rejection rate(s): 1.000   # Add one more test  out <- power4test(out,                   test_fun = test_parameters,                   test_args = list(op = \":=\")) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs (op: :=)  print(out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a * x #> y ~ b * m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a * x #> y ~ b * m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  50  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> =========== <test_parameters: CIs (pars: a)> =========== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label   est    se     z pvalue  cilo  cihi   sig #> 1          a   m  ~   x     a 0.307 0.095 3.247  0.040 0.121 0.494 0.860 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 50  #> - Proportion of valid replications for rejection rate(s): 1.000  #>  #> =========== <test_parameters: CIs (op: :=)> =========== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label   est    se     z pvalue  cilo  cihi   sig #> 1         ab  ab := a*b    ab 0.147 0.054 2.635  0.046 0.040 0.254 0.820 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 50  #> - Proportion of valid replications for rejection rate(s): 1.000"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Power By Sample Sizes — power4test_by_n","title":"Power By Sample Sizes — power4test_by_n","text":"Estimate power range sample sizes. function get_rejection_rates_by_n() used extract rejection rates form get_rejection_rates_by_n object, sample sizes added output.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power By Sample Sizes — power4test_by_n","text":"","code":"power4test_by_n(object, n = NULL, progress = TRUE, ...)  get_rejection_rates_by_n(object_by_n)"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power By Sample Sizes — power4test_by_n","text":"object power4test object. n numeric vector sample sizes simulation conducted. progress Logical. Whether progress simulation displayed. ... Arguments passed power4test(). object_by_n power4test_by_n object, output power4test_by_n().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power By Sample Sizes — power4test_by_n","text":"function power4test_by_n() returns power4test_by_n object, list power4test objects, one sample size. function get_rejection_rates_by_n() returns data frame similar output get_rejection_rates(), column n added sample size test.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power By Sample Sizes — power4test_by_n","text":"function regenerates datasets set sample sizes stored tests . Optionally, can also run object stored tests. case, additional arguments must set instruct power4test() tests conducted. usually used examine power range sample sizes.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power By Sample Sizes — power4test_by_n","text":"","code":"model_simple_med <- \" m ~ x y ~ m + x \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 2,                        model = model_simple_med,                        pop_es = model_simple_med_es,                        n = 100,                        R = 40,                        ci_type = \"boot\",                        fit_model_args = list(fit_function = \"lm\"),                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate bootstrap estimates: #> Error in (function (fit_all, R = 100, ..., iseed = NULL, parallel = FALSE,     progress = FALSE, ncores = max(1, parallel::detectCores(logical = FALSE) -         1), compute_implied_stats = FALSE) {    manymome_implied <- (utils::packageVersion(\"manymome\") >=         \"0.2.7.1\")    if (isFALSE(manymome_implied)) {        stop(\"manymome 0.2.7.1 or later is required. \", \"If not available from CRAN, can be installed from \",             \"GitHub: remotes::install_github('sfcheung/manymome')\")    }    out <- do_FUN(X = fit_all, FUN = gen_boot_i, R = R, ...,         compute_implied_stats = compute_implied_stats, iseed = iseed,         parallel = parallel, progress = progress, ncores = ncores)    class(out) <- c(\"boot_list\", class(out))    return(out)})(fit_all = structure(list(structure(list(structure(list(coefficients = c(`(Intercept)` = -0.162163556101855, x = 0.381643498727352), residuals = c(`1` = -1.02891939623224, `2` = 0.369927544884584, `3` = 1.18150850103973, `4` = -2.13269977299452, `5` = 0.54607568938771, `6` = 0.582823301857471, `7` = -0.536528599212876, `8` = -0.450107194088952, `9` = -0.37895613292409, `10` = -0.595890907128218, `11` = -0.327180970112896, `12` = -0.757559806722447, `13` = -0.700269466468762, `14` = 0.354861059446031, `15` = 1.11140598308799, `16` = 0.0225036595731381, `17` = -0.312920142056316, `18` = -0.657573174165112, `19` = -0.611568833816399, `20` = 2.4153259072552, `21` = 0.216990593320716, `22` = -0.359823025499872, `23` = -0.443707478345026, `24` = 0.504775492856876, `25` = -0.52309301110588, `26` = -1.16546994078507, `27` = 0.472116755960512, `28` = -0.869648338336119, `29` = 0.203592845087206, `30` = -0.745900371211713, `31` = 1.24017300106319, `32` = -0.269095512262804, `33` = -0.438384627936607, `34` = -0.325545820700387, `35` = -1.41794992536253, `36` = -0.86369992141114, `37` = -1.65349587362388, `38` = -1.09625356029597, `39` = -0.120984831451399, `40` = -0.33079296165556, `41` = 1.54006686383876, `42` = -0.891007962456657, `43` = -0.564176338388539, `44` = -0.163596562496548, `45` = -0.845069013317451, `46` = -0.782285892583889, `47` = -1.00496331000191, `48` = -1.06517708094993, `49` = -0.359120245332755, `50` = -0.333685137504015, `51` = -1.5963529997563, `52` = -0.47965371138881, `53` = -0.932568132746879, `54` = -0.860194348037319, `55` = 0.100107651626744, `56` = 0.729533287991846, `57` = 1.61349627537539, `58` = -0.475644807250584, `59` = 1.67303409894382, `60` = -0.97538125130945, `61` = 0.708841034164776, `62` = 2.62222957991707, `63` = 0.116053521744209, `64` = -0.332667853341695, `65` = 0.127264915571469, `66` = 1.91181477655679, `67` = -0.904515053651882, `68` = 1.56396083664396, `69` = 1.39906006439994, `70` = 0.428716263726975, `71` = 0.193608648596948, `72` = -0.421326216738374, `73` = -0.242224804841652, `74` = 0.703139844307859, `75` = 1.96975565691792, `76` = 0.0689899901416316, `77` = -1.23049910097789, `78` = -0.60863735961429, `79` = 0.409033380643567, `80` = -0.166340113604968, `81` = 0.0751714260964351, `82` = -0.0383865814028183, `83` = -1.08969933863606, `84` = -0.0700507542105684, `85` = 1.03948148465988, `86` = 0.801563125080648, `87` = 0.755940661139373, `88` = -0.201953297139293, `89` = 0.1061755903921, `90` = -0.987829219240167, `91` = 0.0309982288928266, `92` = 0.390644056580291, `93` = 1.93375063135342, `94` = 1.16820885033987, `95` = -0.445798065334064, `96` = 0.353578078790682, `97` = -0.824249421994278, `98` = 1.0298553597236, `99` = 1.06139576797319, `100` = 2.15952328320349), effects = c(`(Intercept)` = 1.03160069776609, x = -3.64599888184533, 1.27500732436696, -2.06292416578536, 0.633765165223547, 0.649848702490068, -0.519323799026206, -0.399285002967382, -0.278419354151304, -0.442535470506302, -0.244389599216476, -0.637090243642917, -0.666996366181346, 0.530899668081812, 1.23259000364195, 0.105113127895999, -0.203892667718701, -0.527622242608082, -0.49549720757565, 2.48837978974518, 0.277813307975264, -0.288181639733472, -0.446348930325404, 0.552782743621529, -0.434299780019235, -1.03305013068298, 0.439746133535828, -0.798799056305882, 0.337143068112276, -0.652446587473343, 1.35715043251755, -0.154406007815099, -0.293360807870069, -0.228885162417906, -1.33060482872912, -0.712043855290592, -1.40258503897119, -0.982477105486927, -0.0203031896822697, -0.256115430190999, 1.63938477933101, -0.808002071872941, -0.411588782295118, -0.0943017438591665, -0.776129360471778, -0.691832345454908, -0.965418039820098, -0.981759990237675, -0.269252075798816, -0.243986396229167, -1.51443062227054, -0.426426185603601, -0.851348391565509, -0.788690451490272, 0.254472602963892, 0.848633581803617, 1.64753019855426, -0.317249539968302, 1.76319216152499, -0.891988763940383, 0.76595108971, 2.74033434784101, 0.210790421280995, -0.149438228370686, 0.213715093059015, 2.04454745854697, -0.79148581619093, 1.72069211309991, 1.4833765563138, 0.500064487196743, 0.309675339771844, -0.403317815712275, -0.17105983324784, 0.76150097325963, 1.97743196182253, 0.201011213593256, -1.16569107873004, -0.552023543014061, 0.511358300341947, -0.0789900496187106, 0.223801413661506, 0.0420054043067462, -0.95538246921071, -0.00547588425801425, 1.17888449052902, 0.888897297641519, 0.896959467332088, -0.0885963788844137, 0.279717557723794, -0.891702160511232, 0.0876644088421379, 0.484247235641394, 2.11711720051178, 1.29882202589105, -0.420009554576227, 0.372286623206826, -0.66810422824765, 1.14878094743175, 1.14715391870612, 2.24686856483505), rank = 2L, fitted.values = c(`1` = 0.0230201053765451, `2` = 0.103753718353641, `3` = -0.0913633762961261, `4` = 0.105266834446051, `5` = -0.0432125178365934, `6` = 0.128061960370017, `7` = 0.54100070848192, `8` = 0.2623624904919, `9` = -0.149697569078722, `10` = -0.587485758180196, `11` = -0.00261450609647368, `12` = -0.314910732395471, `13` = 0.407818376906248, `14` = -0.775495548724141, `15` = -0.320832523229562, `16` = -0.00110680405492035, `17` = -0.220072818789834, `18` = -0.393497188488777, `19` = -0.27845837099825, `20` = 0.0780948036332267, `21` = 0.179473010413194, `22` = 0.0898023026100778, `23` = 0.705496648940698, `24` = 0.285694163265626, `25` = -0.0523610087702852, `26` = -0.413960523063491, `27` = 0.951907296660635, `28` = 0.0963676655775686, `29` = -0.423329966488225, `30` = -0.0909900650298809, `31` = -0.28596615026215, `32` = -0.267002635060713, `33` = -0.518429037078242, `34` = -0.117570289831362, `35` = -0.0403581259695307, `36` = -0.573400501857861, `37` = -1.39607504802844, `38` = -0.259434810277849, `39` = -0.150898268063125, `40` = 0.0646371662515893, `41` = -0.139595003620268, `42` = -0.00439255554438833, `43` = -0.581121169610443, `44` = 0.109251857291161, `45` = 0.112195653955342, `46` = -0.0661225616591611, `47` = 0.355831408444302, `48` = -0.00780079359818342, `49` = -0.0612706512224019, `50` = -0.059866342711915, `51` = 0.00458815802045431, `52` = 0.242425840272847, `53` = 0.0104119689202729, `54` = 0.0909418839400932, `55` = -0.595853135108152, `56` = -0.303561524794687, `57` = 0.401512285660445, `58` = -0.629258465553452, `59` = -0.0636734338250793, `60` = -0.0075968684418144, `61` = 0.210245437703276, `62` = -0.295310094459526, `63` = -0.101625188387245, `64` = -0.835098388845349, `65` = -0.0329405760313956, `66` = -0.416553766112156, `67` = -0.253241488769728, `68` = -0.615466454165699, `69` = -0.0152554931183555, `70` = 0.0922321824325046, `71` = -0.278417466635451, `72` = 0.534340051612166, `73` = 0.0937510681859702, `74` = 0.199875898161973, `75` = 0.619977775758168, `76` = -0.410656832000261, `77` = 0.146440732325572, `78` = 0.214358521184343, `79` = -0.164518600311842, `80` = -0.0403992979435084, `81` = -0.548318807153218, `82` = 0.0172728318005036, `83` = -0.429684325968855, `84` = 0.148373218407242, `85` = -0.471840839479934, `86` = -0.0402675816404924, `87` = -0.48523342320718, `88` = -0.255957475642901, `89` = -0.754802102130438, `90` = -0.113147542420406, `91` = 0.213924506828359, `92` = -0.0922283302653705, `93` = -0.836233452669913, `94` = -0.39898620715658, `95` = 0.469854502581412, `96` = 0.528536903267979, `97` = -0.610608699379285, `98` = -0.302113470795557, `99` = -0.0272047025342144, `100` = -0.0403596593292304), assign = 0:1,     qr = structure(list(qr = structure(c(-10, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     -1.54603672070928, -9.55341540994009, 8.934957939301e-05,     0.0540197585329628, 0.0132958425103953, 0.0602718520367406,     0.173529908743249, 0.0971068962795162, -0.0159101596560765,     -0.135983753556878, 0.0244307915478926, -0.0612237125864962,     0.13700155646129, -0.187549811758407, -0.0628479014647698,     0.0248443139022357, -0.0352122088315533, -0.0827778761065715,     -0.0512258045841844, 0.0465671970557438, 0.0743725283422573,     0.0497782509688831, 0.218646746622124, 0.103506150237026,     0.0107866560761248, -0.0883904215948894, 0.286230598319638,     0.0515789544743565, -0.0909602093892271, 0.000191738877454484,     -0.0532849876797372, -0.048083802540635, -0.117043341521699,     -0.00709850603562899, 0.0140787258736557, -0.132120544384635,     -0.357758174244302, -0.0460081505648358, -0.0162394792810444,     0.0428761269765269, -0.0131392960914282, 0.0239431201290207,     -0.134238117100037, 0.0551127437406525, 0.055920148449096,     0.00701223009991309, 0.12274292113345, 0.0230083315664773,     0.00834297939358907, 0.00872814366708335, 0.0264062897173497,     0.0916388062265203, 0.0280036053196163, 0.0500908076555266,     -0.13827870130621, -0.0581109284171713, 0.135271964256201,     -0.147440890195416, 0.00768396037560704, 0.0230642627839509,     0.0828125822992972, -0.0558477817178545, -0.00272519107837195,     -0.203897277035479, 0.0161131614778655, -0.0891016788203313,     -0.0443094880833525, -0.143658110267416, 0.0209637068252873,     0.0504447020296681, -0.0512145856112433, 0.171703068668525,     0.0508612917771386, 0.0799684948825576, 0.195191206465939,     -0.0874843074762922, 0.0653126577394162, 0.083940691115114,     -0.0199751722118728, 0.0140674335021241, -0.125241306206715,     0.029885356549545, -0.092703040280446, 0.0658426869973222,     -0.104265444679688, 0.0141035597619734, -0.107938672281027,     -0.045054410657711, -0.18187415269643, -0.00588546468419628,     0.0838216525827256, -0.000147884165672395, -0.204208594691174,     -0.0842833671518745, 0.154016406900237, 0.170111420252755,     -0.142325758024907, -0.057713765925888, 0.0176863582020175,     0.0140783053140917), dim = c(100L, 2L), dimnames = list(c(\"1\",     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",     \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",     \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\",     \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\",     \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\",     \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\",     \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\",     \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",     \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\",     \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\",     \"x\")), assign = 0:1), qraux = c(1.1, 1.05360475124924), pivot = 1:2,         tol = 1e-07, rank = 2L), class = \"qr\"), df.residual = 98L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = m ~         x, data = structure(list(m = c(-1.0058992908557, 0.473681263238225,     1.0901451247436, -2.02743293854847, 0.502863171551116, 0.710885262227487,     0.00447210926904418, -0.187744703597052, -0.528653702002812,     -1.18337666530841, -0.32979547620937, -1.07247053911792,     -0.292451089562514, -0.42063448927811, 0.790573459858427,     0.0213968555182177, -0.532992960846149, -1.05107036265389,     -0.890027204814649, 2.49342071088843, 0.39646360373391, -0.270020722889794,     0.261789170595672, 0.790469656122502, -0.575454019876166,     -1.57943046384856, 1.42402405262115, -0.773280672758551,     -0.219737121401019, -0.836890436241594, 0.95420685080104,     -0.536098147323517, -0.956813665014848, -0.443116110531749,     -1.45830805133207, -1.437100423269, -3.04957092165232, -1.35568837057382,     -0.271883099514524, -0.26615579540397, 1.40047186021849,     -0.895400518001046, -1.14529750799898, -0.0543447052053874,     -0.732873359362109, -0.84840845424305, -0.64913190155761,     -1.07297787454812, -0.420390896555157, -0.39355148021593,     -1.59176484173585, -0.237227871115963, -0.922156163826606,     -0.769252464097226, -0.495745483481408, 0.425971763197159,     2.01500856103583, -1.10490327280404, 1.60936066511874, -0.982978119751264,     0.919086471868052, 2.32691948545754, 0.0144283333569641,     -1.16776624218704, 0.0943243395400734, 1.49526101044463,     -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479,     -0.0848088180385032, 0.113013834873792, -0.148473736655682,     0.903015742469832, 2.58973343267609, -0.341666841858629,     -1.08405836865232, -0.394278838429946, 0.244514780331725,     -0.206739411548476, -0.473147381056783, -0.0211137496023147,     -1.51938366460491, 0.0783224641966739, 0.567640645179946,     0.761295543440156, 0.270707237932193, -0.457910772782194,     -0.648626511738338, -1.10097676166057, 0.244922735721186,     0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475,     0.882114982058661, -1.43485812137356, 0.727741888928042,     1.03419106543897, 2.11916362387426), y = c(-0.1439617341926,     -0.174277626103084, 0.602224604404354, -1.44887499366459,     -0.463904174168501, 0.500059589539494, -0.773951880206804,     0.0517804664566934, 0.0430846805746435, -0.636812687531766,     -0.334582095393778, -1.0983461632776, -1.10731215946008,     0.525175789638999, 0.414653245603842, 0.730487316463909,     -1.34408136930753, -0.379154013094857, 0.137965520381119,     1.22395434592039, 0.0324813218120451, -0.812161380874894,     1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755,     0.165195533219977, -1.69718629157368, -0.660747173763155,     -0.222462342062906, 1.35498501787693, -0.0491610358843584,     -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034,     -1.79855196419749, -2.36507475508984, 0.660851637576232,     -0.67250052216282, 0.410951705416395, 0.760533257966452,     -0.0212725401002647, -0.121076956771822, 0.0784949379362682,     -0.0784246990073527, 1.11550997554267, -0.297558241032477,     0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841,     0.958116411077828, -1.14291155805925, -0.142425489752799,     1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468,     -0.829348978252946, -0.274283453294785, 0.937739407943759,     -0.351683826842485, -0.742409762101558, 0.399683091299982,     1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831,     1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296,     -1.12659429205047, 2.51705580505852, -0.896201086603481,     -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923,     -2.60274520612392, -0.0969780594504372, 0.0855764450401389,     0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257,     -0.669534565586153, 0.285524667523424, -0.722321914484456,     -0.343521604348032, -2.32395167916648, -0.135095644737079,     0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562,     -0.472625773108594, 0.657958641995046, -0.740224694435862    ), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057,     0.700733515544461, 0.311681028661359, 0.760462361967838,     1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736,     0.418057822385083, -0.400235237343163, 1.49349310261748,     -1.60708093984972, -0.415751788401515, 0.42200837321742,     -0.151736536534977, -0.60615111526422, -0.304721068966714,     0.629536099884472, 0.895171980275539, 0.660212631820405,     2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306,     2.91914013071762, 0.677415500438328, -0.684320344136007,     0.186492083080971, -0.324393300483657, -0.274704218225806,     -0.933503340589868, 0.116845344986082, 0.319160238648117,     -1.07754212275943, -3.23315213292314, -0.254874652654534,     0.0295178303214797, 0.594273774110513, 0.0591351681787969,     0.413398894737046, -1.09777217457042, 0.711175257270441,     0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607,     0.264364269837939, 0.268043904143697, 0.436930577039483,     1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084,     -0.370497517092117, 1.47696958979247, -1.22390375051376,     0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909,     0.158625439491262, -1.76325506654115, 0.338596047099905,     -0.666565029559273, -0.238646624327644, -1.18776528245719,     0.384935321768578, 0.66657951565448, -0.304613889457735,     1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091,     -0.651113609237535, 0.808619272846293, 0.986580613954563,     -0.00617079609070003, 0.319052357931912, -1.01182190274184,     0.470167547726389, -0.700970331629097, 0.813682862526491,     -0.811430783992772, 0.31939748709946, -0.846522653163624,     -0.245763179128733, -1.55285901110546, 0.128434032925753,     0.985443389404868, 0.183247523067191, -1.76622921343046,     -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214,     -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = m ~ x, model = structure(list(        m = c(-1.0058992908557, 0.473681263238225, 1.0901451247436,         -2.02743293854847, 0.502863171551116, 0.710885262227487,         0.00447210926904418, -0.187744703597052, -0.528653702002812,         -1.18337666530841, -0.32979547620937, -1.07247053911792,         -0.292451089562514, -0.42063448927811, 0.790573459858427,         0.0213968555182177, -0.532992960846149, -1.05107036265389,         -0.890027204814649, 2.49342071088843, 0.39646360373391,         -0.270020722889794, 0.261789170595672, 0.790469656122502,         -0.575454019876166, -1.57943046384856, 1.42402405262115,         -0.773280672758551, -0.219737121401019, -0.836890436241594,         0.95420685080104, -0.536098147323517, -0.956813665014848,         -0.443116110531749, -1.45830805133207, -1.437100423269,         -3.04957092165232, -1.35568837057382, -0.271883099514524,         -0.26615579540397, 1.40047186021849, -0.895400518001046,         -1.14529750799898, -0.0543447052053874, -0.732873359362109,         -0.84840845424305, -0.64913190155761, -1.07297787454812,         -0.420390896555157, -0.39355148021593, -1.59176484173585,         -0.237227871115963, -0.922156163826606, -0.769252464097226,         -0.495745483481408, 0.425971763197159, 2.01500856103583,         -1.10490327280404, 1.60936066511874, -0.982978119751264,         0.919086471868052, 2.32691948545754, 0.0144283333569641,         -1.16776624218704, 0.0943243395400734, 1.49526101044463,         -1.15775654242161, 0.948494382478262, 1.38380457128159,         0.520948446159479, -0.0848088180385032, 0.113013834873792,         -0.148473736655682, 0.903015742469832, 2.58973343267609,         -0.341666841858629, -1.08405836865232, -0.394278838429946,         0.244514780331725, -0.206739411548476, -0.473147381056783,         -0.0211137496023147, -1.51938366460491, 0.0783224641966739,         0.567640645179946, 0.761295543440156, 0.270707237932193,         -0.457910772782194, -0.648626511738338, -1.10097676166057,         0.244922735721186, 0.298415726314921, 1.09751717868351,         0.769222643183293, 0.0240564372473475, 0.882114982058661,         -1.43485812137356, 0.727741888928042, 1.03419106543897,         2.11916362387426), x = c(0.485226820569252, 0.696768778564913,         0.185513915583057, 0.700733515544461, 0.311681028661359,         0.760462361967838, 1.84246362620766, 1.1123628412626,         0.0326639575014441, -1.11444896479736, 0.418057822385083,         -0.400235237343163, 1.49349310261748, -1.60708093984972,         -0.415751788401515, 0.42200837321742, -0.151736536534977,         -0.60615111526422, -0.304721068966714, 0.629536099884472,         0.895171980275539, 0.660212631820405, 2.27348352044748,         1.17349757263239, 0.287709728313787, -0.659770093821306,         2.91914013071762, 0.677415500438328, -0.684320344136007,         0.186492083080971, -0.324393300483657, -0.274704218225806,         -0.933503340589868, 0.116845344986082, 0.319160238648117,         -1.07754212275943, -3.23315213292314, -0.254874652654534,         0.0295178303214797, 0.594273774110513, 0.0591351681787969,         0.413398894737046, -1.09777217457042, 0.711175257270441,         0.718888729854143, 0.251651069028968, 1.35727443615177,         0.404468471278607, 0.264364269837939, 0.268043904143697,         0.436930577039483, 1.06012390548736, 0.452190396528715,         0.663198615687065, -1.13637355399084, -0.370497517092117,         1.47696958979247, -1.22390375051376, 0.258068387396106,         0.405002805433516, 0.97580332180945, -0.348876736539909,         0.158625439491262, -1.76325506654115, 0.338596047099905,         -0.666565029559273, -0.238646624327644, -1.18776528245719,         0.384935321768578, 0.66657951565448, -0.304613889457735,         1.8250110640863, 0.670559370567588, 0.948632573255153,         2.04940300167091, -0.651113609237535, 0.808619272846293,         0.986580613954563, -0.00617079609070003, 0.319052357931912,         -1.01182190274184, 0.470167547726389, -0.700970331629097,         0.813682862526491, -0.811430783992772, 0.31939748709946,         -0.846522653163624, -0.245763179128733, -1.55285901110546,         0.128434032925753, 0.985443389404868, 0.183247523067191,         -1.76622921343046, -0.620533696615944, 1.65604303699874,         1.80980538558388, -1.17503676801214, -0.366703258827641,         0.353625448927287, 0.319156220867898)), terms = m ~ x, row.names = c(NA,     100L), class = \"data.frame\")), class = \"lm\"), structure(list(    coefficients = c(`(Intercept)` = 0.0173368017594537, m = 0.469027749026988,     x = 0.0982236710940749), residuals = c(`1` = 0.26283538455622,     `2` = -0.482223271849802, `3` = 0.0553576308460588, `4` = -0.584118106308919,     `5` = -0.747712212194643, `6` = 0.0746024684996695, `7` = -0.974359766533538,     `8` = 0.013240778559656, `9` = 0.2704927608621, `10` = 0.0103522728588377,     `11` = -0.238298841351725, `12` = -0.573351947863765, `13` = -1.13417766027431,     `14` = 0.862981625206129, `15` = 0.0673522204472366, `16` = 0.661663584074636,     `17` = -1.09652556273652, `18` = 0.156028739189242, `19` = 0.568006997122283,     `20` = -0.024701306061237, `21` = -0.258734989741068, `22` = -0.767699479186789,     `23` = 1.54988206709068, `24` = 0.54183390722267, `25` = 1.51639091784314,     `26` = 0.0678834052165448, `27` = -0.806776724577784, `28` = -1.4183712373322,     `29` = -0.507804711688819, `30` = 0.134407756640055, `31` = 0.921961825631964,     `32` = 0.211929526432042, `33` = -0.970216360478105, `34` = 0.536585512497517,     `35` = -1.52288230341222, `36` = -0.272844234652265, `37` = -0.06798330937485,     `38` = -1.72152136796443, `39` = 0.768136204323648, `40` = -0.623374622041528,     `41` = -0.269053733826263, `42` = 1.12255858857532, `43` = 0.606394183294495,     `44` = -0.182778828337633, `45` = 0.33428418808584, `46` = 0.277447514947504,     `47` = 1.26931757059142, `48` = 0.148632976372341, `49` = 0.382120869734528,     `50` = 0.245134606251191, `51` = -0.43625165321347, `52` = -0.0442726097766103,     `53` = 1.32888063830879, `54` = -0.86458941084701, `55` = 0.184374878902528,     `56` = 1.21188788442317, `57` = -0.303188647636594, `58` = -0.843598095372872,     `59` = -0.746094402012601, `60` = -0.425422627515763, `61` = -0.818544298649585,     `62` = -0.136719248424613, `63` = -0.391368690314309, `64` = -0.0388384061874185,     `65` = 0.304847410123495, `66` = 0.63539541882084, `67` = 1.42361442640392,     `68` = 0.0692164216761421, `69` = -0.29014253462797, `70` = 1.2072525772318,     `71` = 1.48594932766722, `72` = -0.155645360317152, `73` = -0.37588985978219,     `74` = -1.66064870870102, `75` = 1.08376227441573, `76` = -0.689331889610198,     `77` = -1.10354521089326, `78` = 2.50952450590145, `79` = 0.194376913004927,     `80` = -0.083881281819924, `81` = -2.2987778950076, `82` = -0.150593509327382,     `83` = 0.849724622699344, `84` = 0.263587098012147, `85` = 0.870040185597946,     `86` = 1.69283232125337, `87` = 1.0866738463285, `88` = -0.44795874665859,     `89` = 0.724939211286123, `90` = -0.235885326198613, `91` = -0.572527832891059,     `92` = -2.49925298174823, `93` = -0.493712940996171, `94` = 0.489898719108126,     `95` = 1.69831690912372, `96` = 0.265832811419256, `97` = 0.590756629481588,     `98` = -0.795274774620404, `99` = 0.120823142963001, `100` = -1.78285673618709    ), effects = c(`(Intercept)` = 0.158623933219053, m = -5.1094562155273,     x = 0.876084087117251, -0.682558552992273, -0.740659231358059,     0.0949934167127173, -0.973975511091415, -0.00176016106641896,     0.230293185505339, -0.0692518609718502, -0.266171258689074,     -0.641236374836041, -1.15000197946638, 0.811535608018228,     0.0797711168750406, 0.64899542708517, -1.13870184294982,     0.0870703687440155, 0.508928037548435, 0.071396405477279,     -0.250614913603245, -0.790640844334237, 1.56556070215087,     0.569669495752103, 1.4766451322183, -0.0244120113554683,     -0.734642930932198, -1.46287850598974, -0.541621210236563,     0.0823899147802988, 0.942333574526576, 0.168425942854134,     -1.03828078022056, 0.500896649908742, -1.60044817209318,     -0.363047078754715, -0.248736065806844, -1.8002258067372,     0.738994509328217, -0.646788917046678, -0.225688887198537,     1.07021581627094, 0.528596285899469, -0.195911905320262,     0.291924305787828, 0.225564543649497, 1.23676852114008, 0.0885350291346339,     0.348844815177458, 0.213053292946001, -0.518437957317708,     -0.0619173327082653, 1.2757588581328, -0.909060677509101,     0.134252738277095, 1.20900090478045, -0.219527722360395,     -0.92087551318629, -0.69177854417807, -0.481628831038727,     -0.787072821002821, -0.0573057066994652, -0.406893495358445,     -0.124064064440853, 0.29451917532158, 0.675811866759109,     1.35361496401876, 0.0809638105167902, -0.244336069973944,     1.21853028816934, 1.46164404326752, -0.150743177394335, -0.393481928256776,     -1.63013488065557, 1.19779674804118, -0.728091594650031,     -1.16020000910437, 2.48438405513989, 0.187189095950883, -0.107400326066066,     -2.34671557820162, -0.164630139416014, 0.759622489646881,     0.257177809655108, 0.868992483360778, 1.71112034884744, 1.0724628291245,     -0.487805051028562, 0.664173701572422, -0.299870862002188,     -0.570075970897387, -2.50227512672634, -0.481143222138844,     0.499408512096018, 1.69773797653045, 0.303800391565757, 0.499704584416232,     -0.785093264210686, 0.151228048102168, -1.7059327322752),     rank = 3L, fitted.values = c(`1` = -0.40679711874882, `2` = 0.307945645746718,     `3` = 0.546866973558295, `4` = -0.864756887355671, `5` = 0.283808038026142,     `6` = 0.425457121039825, `7` = 0.200407886326734, `8` = 0.0385396878970374,     `9` = -0.227408080287456, `10` = -0.647164960390603, `11` = -0.0962832540420531,     `12` = -0.524994215413838, `13` = 0.0268655008142267, `14` = -0.33780583556713,     `15` = 0.347301025156606, `16` = 0.0688237323892725, `17` = -0.247555806571011,     `18` = -0.535182752284099, `19` = -0.430041476741165, `20` = 1.24865565198162,     `21` = 0.291216311553113, `22` = -0.0444619016881054, `23` = 0.363433084713817,     `24` = 0.503354244848667, `25` = -0.224307196127137, `26` = -0.7882649541373,     `27` = 0.971972257797761, `28` = -0.278815054241482, `29` = -0.152942462074336,     `30` = -0.356870098702961, `31` = 0.433023192244968, `32` = -0.261090562316401,     `33` = -0.523127482872042, `34` = -0.17901997138606, `35` = -0.635301050637479,     `36` = -0.762543317948071, `37` = -1.73056865482264, `38` = -0.643553387125407,     `39` = -0.107284566747416, `40` = -0.0491259001212924, `41` = 0.680005439242658,     `42` = -0.36202533060887, `43` = -0.62766672339476, `44` = 0.0617018715658115,     `45` = -0.255789250149572, `46` = -0.355872213954857, `47` = -0.153807595048752,     `48` = -0.446191217404818, `49` = -0.153871365073662, `50` = -0.140921506853081,     `51` = -0.68632815365014, `52` = 0.0101996091750262, `53` = -0.370764227230966,     `54` = -0.27832214721224, `55` = -0.326800368655327, `56` = 0.180737752740847,     `57` = 1.10750510661593, `58` = -0.621109812617643, `59` = 0.797520036296048,     `60` = -0.403926350737183, `61` = 0.544260845354799, `62` = 1.07445865636837,     `63` = 0.0396848634718244, `64` = -0.70357135591414, `65` = 0.0948356811764866,     `66` = 0.653183243469876, `67` = -0.549123890789492, `68` = 0.34554032049694,     `69` = 0.704189305358801, `70` = 0.327149965924435, `71` = -0.0523611817515683,     `72` = 0.249602712841076, `73` = 0.0135633023298941, `74` = 0.534054416650553,     `75` = 1.43329353064279, `76` = -0.206869196993283, `77` = -0.41169110120703,     `78` = -0.0706853445854567, `79` = 0.13141490053667, `80` = -0.048291225206999,     `81` = -0.30396731111632, `82` = 0.0536154498769452, `83` = -0.764148177659205,     `84` = 0.133995128703554, `85` = 0.203874305381917, `86` = 0.405777930564599,     `87` = 0.061157445554076, `88` = -0.221575818927562, `89` = -0.439414543762699,     `90` = -0.486436588285842, `91` = 0.229006228543027, `92` = 0.17530130258175,     `93` = 0.358617296259092, `94` = 0.317172468873109, `95` = 0.191282564954983,     `96` = 0.608838935115286, `97` = -0.77106789810615, `98` = 0.32264900151181,     `99` = 0.537135499032045, `100` = 1.04263204175123), assign = 0:2,     qr = structure(list(qr = structure(cdim = c(100L, 3L), dimnames = list(c(\"1\", \"2\", \"3\", \"4\",     \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",     \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\",     \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\",     \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\",     \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\",     \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\",     \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\",     \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\",     \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\",     \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\", \"m\", \"x\"    )), assign = 0:2), qraux = c(1.1, 1.06474514597053, 1.05182700602575    ), pivot = 1:3, tol = 1e-07, rank = 3L), class = \"qr\"), df.residual = 97L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = y ~         m + x, data = structure(list(m = c(-1.0058992908557,     0.473681263238225, 1.0901451247436, -2.02743293854847, 0.502863171551116,     0.710885262227487, 0.00447210926904418, -0.187744703597052,     -0.528653702002812, -1.18337666530841, -0.32979547620937,     -1.07247053911792, -0.292451089562514, -0.42063448927811,     0.790573459858427, 0.0213968555182177, -0.532992960846149,     -1.05107036265389, -0.890027204814649, 2.49342071088843,     0.39646360373391, -0.270020722889794, 0.261789170595672,     0.790469656122502, -0.575454019876166, -1.57943046384856,     1.42402405262115, -0.773280672758551, -0.219737121401019,     -0.836890436241594, 0.95420685080104, -0.536098147323517,     -0.956813665014848, -0.443116110531749, -1.45830805133207,     -1.437100423269, -3.04957092165232, -1.35568837057382, -0.271883099514524,     -0.26615579540397, 1.40047186021849, -0.895400518001046,     -1.14529750799898, -0.0543447052053874, -0.732873359362109,     -0.84840845424305, -0.64913190155761, -1.07297787454812,     -0.420390896555157, -0.39355148021593, -1.59176484173585,     -0.237227871115963, -0.922156163826606, -0.769252464097226,     -0.495745483481408, 0.425971763197159, 2.01500856103583,     -1.10490327280404, 1.60936066511874, -0.982978119751264,     0.919086471868052, 2.32691948545754, 0.0144283333569641,     -1.16776624218704, 0.0943243395400734, 1.49526101044463,     -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479,     -0.0848088180385032, 0.113013834873792, -0.148473736655682,     0.903015742469832, 2.58973343267609, -0.341666841858629,     -1.08405836865232, -0.394278838429946, 0.244514780331725,     -0.206739411548476, -0.473147381056783, -0.0211137496023147,     -1.51938366460491, 0.0783224641966739, 0.567640645179946,     0.761295543440156, 0.270707237932193, -0.457910772782194,     -0.648626511738338, -1.10097676166057, 0.244922735721186,     0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475,     0.882114982058661, -1.43485812137356, 0.727741888928042,     1.03419106543897, 2.11916362387426), y = c(-0.1439617341926,     -0.174277626103084, 0.602224604404354, -1.44887499366459,     -0.463904174168501, 0.500059589539494, -0.773951880206804,     0.0517804664566934, 0.0430846805746435, -0.636812687531766,     -0.334582095393778, -1.0983461632776, -1.10731215946008,     0.525175789638999, 0.414653245603842, 0.730487316463909,     -1.34408136930753, -0.379154013094857, 0.137965520381119,     1.22395434592039, 0.0324813218120451, -0.812161380874894,     1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755,     0.165195533219977, -1.69718629157368, -0.660747173763155,     -0.222462342062906, 1.35498501787693, -0.0491610358843584,     -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034,     -1.79855196419749, -2.36507475508984, 0.660851637576232,     -0.67250052216282, 0.410951705416395, 0.760533257966452,     -0.0212725401002647, -0.121076956771822, 0.0784949379362682,     -0.0784246990073527, 1.11550997554267, -0.297558241032477,     0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841,     0.958116411077828, -1.14291155805925, -0.142425489752799,     1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468,     -0.829348978252946, -0.274283453294785, 0.937739407943759,     -0.351683826842485, -0.742409762101558, 0.399683091299982,     1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831,     1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296,     -1.12659429205047, 2.51705580505852, -0.896201086603481,     -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923,     -2.60274520612392, -0.0969780594504372, 0.0855764450401389,     0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257,     -0.669534565586153, 0.285524667523424, -0.722321914484456,     -0.343521604348032, -2.32395167916648, -0.135095644737079,     0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562,     -0.472625773108594, 0.657958641995046, -0.740224694435862    ), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057,     0.700733515544461, 0.311681028661359, 0.760462361967838,     1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736,     0.418057822385083, -0.400235237343163, 1.49349310261748,     -1.60708093984972, -0.415751788401515, 0.42200837321742,     -0.151736536534977, -0.60615111526422, -0.304721068966714,     0.629536099884472, 0.895171980275539, 0.660212631820405,     2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306,     2.91914013071762, 0.677415500438328, -0.684320344136007,     0.186492083080971, -0.324393300483657, -0.274704218225806,     -0.933503340589868, 0.116845344986082, 0.319160238648117,     -1.07754212275943, -3.23315213292314, -0.254874652654534,     0.0295178303214797, 0.594273774110513, 0.0591351681787969,     0.413398894737046, -1.09777217457042, 0.711175257270441,     0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607,     0.264364269837939, 0.268043904143697, 0.436930577039483,     1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084,     -0.370497517092117, 1.47696958979247, -1.22390375051376,     0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909,     0.158625439491262, -1.76325506654115, 0.338596047099905,     -0.666565029559273, -0.238646624327644, -1.18776528245719,     0.384935321768578, 0.66657951565448, -0.304613889457735,     1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091,     -0.651113609237535, 0.808619272846293, 0.986580613954563,     -0.00617079609070003, 0.319052357931912, -1.01182190274184,     0.470167547726389, -0.700970331629097, 0.813682862526491,     -0.811430783992772, 0.31939748709946, -0.846522653163624,     -0.245763179128733, -1.55285901110546, 0.128434032925753,     0.985443389404868, 0.183247523067191, -1.76622921343046,     -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214,     -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = y ~ m + x, model = structure(list(        y = c(-0.1439617341926, -0.174277626103084, 0.602224604404354,         -1.44887499366459, -0.463904174168501, 0.500059589539494,         -0.773951880206804, 0.0517804664566934, 0.0430846805746435,         -0.636812687531766, -0.334582095393778, -1.0983461632776,         -1.10731215946008, 0.525175789638999, 0.414653245603842,         0.730487316463909, -1.34408136930753, -0.379154013094857,         0.137965520381119, 1.22395434592039, 0.0324813218120451,         -0.812161380874894, 1.9133151518045, 1.04518815207134,         1.292083721716, -0.720381548920755, 0.165195533219977,         -1.69718629157368, -0.660747173763155, -0.222462342062906,         1.35498501787693, -0.0491610358843584, -1.49334384335015,         0.357565541111457, -2.1581833540497, -1.03538755260034,         -1.79855196419749, -2.36507475508984, 0.660851637576232,         -0.67250052216282, 0.410951705416395, 0.760533257966452,         -0.0212725401002647, -0.121076956771822, 0.0784949379362682,         -0.0784246990073527, 1.11550997554267, -0.297558241032477,         0.228249504660866, 0.10421309939811, -1.12257980686361,         -0.0340730006015841, 0.958116411077828, -1.14291155805925,         -0.142425489752799, 1.39262563716402, 0.804316458979331,         -1.46470790799051, 0.0514256342834468, -0.829348978252946,         -0.274283453294785, 0.937739407943759, -0.351683826842485,         -0.742409762101558, 0.399683091299982, 1.28857866229072,         0.874490535614432, 0.414756742173082, 0.414046770730831,         1.53440254315624, 1.43358814591565, 0.0939573525239246,         -0.362326557452296, -1.12659429205047, 2.51705580505852,         -0.896201086603481, -1.51523631210029, 2.438839161316,         0.325791813541597, -0.132172507026923, -2.60274520612392,         -0.0969780594504372, 0.0855764450401389, 0.397582226715701,         1.07391449097986, 2.09861025181797, 1.14783129188257,         -0.669534565586153, 0.285524667523424, -0.722321914484456,         -0.343521604348032, -2.32395167916648, -0.135095644737079,         0.807071187981235, 1.8895994740787, 0.874671746534542,         -0.180311268624562, -0.472625773108594, 0.657958641995046,         -0.740224694435862), m = c(-1.0058992908557, 0.473681263238225,         1.0901451247436, -2.02743293854847, 0.502863171551116,         0.710885262227487, 0.00447210926904418, -0.187744703597052,         -0.528653702002812, -1.18337666530841, -0.32979547620937,         -1.07247053911792, -0.292451089562514, -0.42063448927811,         0.790573459858427, 0.0213968555182177, -0.532992960846149,         -1.05107036265389, -0.890027204814649, 2.49342071088843,         0.39646360373391, -0.270020722889794, 0.261789170595672,         0.790469656122502, -0.575454019876166, -1.57943046384856,         1.42402405262115, -0.773280672758551, -0.219737121401019,         -0.836890436241594, 0.95420685080104, -0.536098147323517,         -0.956813665014848, -0.443116110531749, -1.45830805133207,         -1.437100423269, -3.04957092165232, -1.35568837057382,         -0.271883099514524, -0.26615579540397, 1.40047186021849,         -0.895400518001046, -1.14529750799898, -0.0543447052053874,         -0.732873359362109, -0.84840845424305, -0.64913190155761,         -1.07297787454812, -0.420390896555157, -0.39355148021593,         -1.59176484173585, -0.237227871115963, -0.922156163826606,         -0.769252464097226, -0.495745483481408, 0.425971763197159,         2.01500856103583, -1.10490327280404, 1.60936066511874,         -0.982978119751264, 0.919086471868052, 2.32691948545754,         0.0144283333569641, -1.16776624218704, 0.0943243395400734,         1.49526101044463, -1.15775654242161, 0.948494382478262,         1.38380457128159, 0.520948446159479, -0.0848088180385032,         0.113013834873792, -0.148473736655682, 0.903015742469832,         2.58973343267609, -0.341666841858629, -1.08405836865232,         -0.394278838429946, 0.244514780331725, -0.206739411548476,         -0.473147381056783, -0.0211137496023147, -1.51938366460491,         0.0783224641966739, 0.567640645179946, 0.761295543440156,         0.270707237932193, -0.457910772782194, -0.648626511738338,         -1.10097676166057, 0.244922735721186, 0.298415726314921,         1.09751717868351, 0.769222643183293, 0.0240564372473475,         0.882114982058661, -1.43485812137356, 0.727741888928042,         1.03419106543897, 2.11916362387426), x = c(0.485226820569252,         0.696768778564913, 0.185513915583057, 0.700733515544461,         0.311681028661359, 0.760462361967838, 1.84246362620766,         1.1123628412626, 0.0326639575014441, -1.11444896479736,         0.418057822385083, -0.400235237343163, 1.49349310261748,         -1.60708093984972, -0.415751788401515, 0.42200837321742,         -0.151736536534977, -0.60615111526422, -0.304721068966714,         0.629536099884472, 0.895171980275539, 0.660212631820405,         2.27348352044748, 1.17349757263239, 0.287709728313787,         -0.659770093821306, 2.91914013071762, 0.677415500438328,         -0.684320344136007, 0.186492083080971, -0.324393300483657,         -0.274704218225806, -0.933503340589868, 0.116845344986082,         0.319160238648117, -1.07754212275943, -3.23315213292314,         -0.254874652654534, 0.0295178303214797, 0.594273774110513,         0.0591351681787969, 0.413398894737046, -1.09777217457042,         0.711175257270441, 0.718888729854143, 0.251651069028968,         1.35727443615177, 0.404468471278607, 0.264364269837939,         0.268043904143697, 0.436930577039483, 1.06012390548736,         0.452190396528715, 0.663198615687065, -1.13637355399084,         -0.370497517092117, 1.47696958979247, -1.22390375051376,         0.258068387396106, 0.405002805433516, 0.97580332180945,         -0.348876736539909, 0.158625439491262, -1.76325506654115,         0.338596047099905, -0.666565029559273, -0.238646624327644,         -1.18776528245719, 0.384935321768578, 0.66657951565448,         -0.304613889457735, 1.8250110640863, 0.670559370567588,         0.948632573255153, 2.04940300167091, -0.651113609237535,         0.808619272846293, 0.986580613954563, -0.00617079609070003,         0.319052357931912, -1.01182190274184, 0.470167547726389,         -0.700970331629097, 0.813682862526491, -0.811430783992772,         0.31939748709946, -0.846522653163624, -0.245763179128733,         -1.55285901110546, 0.128434032925753, 0.985443389404868,         0.183247523067191, -1.76622921343046, -0.620533696615944,         1.65604303699874, 1.80980538558388, -1.17503676801214,         -0.366703258827641, 0.353625448927287, 0.319156220867898        )), terms = y ~ m + x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\")), class = c(\"lm_list_lmhelprs\", \"lm_list\", \"list\"), cases_removed = integer(0), call = (function (models,     data, na_omit_all = TRUE, ...) {    my_call <- match.call()    my_call$na_omit_all <- NULL    my_call[[1L]] <- quote(stats::lm)    my_mm <- my_call    my_mm[[1L]] <- quote(stats::model.frame)    my_mm$models <- NULL    if (is.null(my_call$data) && na_omit_all) {        stop(\"The argument 'data' must be set if na_omit_all is TRUE.\")    }    models1 <- parse_models(models)    data_full <- eval(my_call$data, envir = parent.frame())    if (na_omit_all) {        all_vars <- sapply(models1, function(x) {            all.vars(stats::as.formula(x))        }, USE.NAMES = FALSE)        all_vars <- unique(unlist(all_vars))        if (!is.null(my_call$subset)) {            all_ys <- sapply(models1, function(x) {                all.vars(stats::as.formula(x))[1]            }, USE.NAMES = FALSE)            ys1 <- all_ys[1]            f0 <- paste(ys1, \"~\", paste(setdiff(all_vars, ys1),                 collapse = \" + \"))            my_mm0 <- my_mm            my_mm0$formula <- f0            my_mm0$na.action <- \"na.pass\"            data_selected <- tryCatch(eval(my_mm0, envir = parent.frame()),                 error = function(e) e)            if (inherits(data_selected, \"error\")) {                subset_i <- eval(my_mm0$subset, envir = parent.frame())                if (is.logical(subset_i)) {                  subset_i <- sapply(subset_i, isTRUE)                  omitted_subset <- which(!subset_i)                }                else if (is.character(subset_i)) {                  omitted_subset <- !(row.names(data_full) %in%                     subset_i)                  omitted_subset[is.na(omitted_subset)] <- TRUE                  omitted_subset <- which(omitted_subset)                }                else {                  omitted_subset <- setdiff(seq_len(nrow(data_full)),                     subset_i)                }            }            else {                subset_i <- match(row.names(data_selected), row.names(data_full))                subset_i <- stats::na.omit(subset_i)                omitted_subset <- setdiff(seq_len(nrow(data_full)),                   subset_i)            }        }        else {            omitted_subset <- numeric(0)        }        data <- stats::na.omit(eval(my_call$data, envir = parent.frame())[,             all_vars])        data_omitted <- attr(data, \"na.action\")        if (!is.null(data_omitted)) {            omitted_listwise <- as.numeric(data_omitted)        }        else {            omitted_listwise <- numeric(0)        }        omitted <- c(omitted_subset, omitted_listwise)        omitted <- unique(sort(omitted))        selected <- !logical(nrow(data_full))        selected[omitted] <- FALSE        my_call$subset <- which(selected)    }    else {        selected <- !logical(nrow(data_full))    }    tmpfct <- function(x, env = parent.frame()) {        call0 <- my_call        call0$models <- NULL        call0$formula <- stats::as.formula(x, env = env)        outtmp <- eval(call0, envir = env)        outtmp    }    out1 <- lapply(models1, tmpfct, env = parent.frame())    out2 <- lm2list_free(out1)    attr(out2, \"cases_removed\") <- which(!selected)    attr(out2, \"call\") <- match.call()    out2})(models = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(m = c(-1.0058992908557, 0.473681263238225, 1.0901451247436, -2.02743293854847, 0.502863171551116, 0.710885262227487, 0.00447210926904418, -0.187744703597052, -0.528653702002812, -1.18337666530841, -0.32979547620937, -1.07247053911792, -0.292451089562514, -0.42063448927811, 0.790573459858427, 0.0213968555182177, -0.532992960846149, -1.05107036265389, -0.890027204814649, 2.49342071088843, 0.39646360373391, -0.270020722889794, 0.261789170595672, 0.790469656122502, -0.575454019876166, -1.57943046384856, 1.42402405262115, -0.773280672758551, -0.219737121401019, -0.836890436241594, 0.95420685080104, -0.536098147323517, -0.956813665014848, -0.443116110531749, -1.45830805133207, -1.437100423269, -3.04957092165232, -1.35568837057382, -0.271883099514524, -0.26615579540397, 1.40047186021849, -0.895400518001046, -1.14529750799898, -0.0543447052053874, -0.732873359362109, -0.84840845424305, -0.64913190155761, -1.07297787454812, -0.420390896555157, -0.39355148021593, -1.59176484173585, -0.237227871115963, -0.922156163826606, -0.769252464097226, -0.495745483481408, 0.425971763197159, 2.01500856103583, -1.10490327280404, 1.60936066511874, -0.982978119751264, 0.919086471868052, 2.32691948545754, 0.0144283333569641, -1.16776624218704, 0.0943243395400734, 1.49526101044463, -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479, -0.0848088180385032, 0.113013834873792, -0.148473736655682, 0.903015742469832, 2.58973343267609, -0.341666841858629, -1.08405836865232, -0.394278838429946, 0.244514780331725, -0.206739411548476, -0.473147381056783, -0.0211137496023147, -1.51938366460491, 0.0783224641966739, 0.567640645179946, 0.761295543440156, 0.270707237932193, -0.457910772782194, -0.648626511738338, -1.10097676166057, 0.244922735721186, 0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475, 0.882114982058661, -1.43485812137356, 0.727741888928042, 1.03419106543897, 2.11916362387426), y = c(-0.1439617341926, -0.174277626103084, 0.602224604404354, -1.44887499366459, -0.463904174168501, 0.500059589539494, -0.773951880206804, 0.0517804664566934, 0.0430846805746435, -0.636812687531766, -0.334582095393778, -1.0983461632776, -1.10731215946008, 0.525175789638999, 0.414653245603842, 0.730487316463909, -1.34408136930753, -0.379154013094857, 0.137965520381119, 1.22395434592039, 0.0324813218120451, -0.812161380874894, 1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755, 0.165195533219977, -1.69718629157368, -0.660747173763155, -0.222462342062906, 1.35498501787693, -0.0491610358843584, -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034, -1.79855196419749, -2.36507475508984, 0.660851637576232, -0.67250052216282, 0.410951705416395, 0.760533257966452, -0.0212725401002647, -0.121076956771822, 0.0784949379362682, -0.0784246990073527, 1.11550997554267, -0.297558241032477, 0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841, 0.958116411077828, -1.14291155805925, -0.142425489752799, 1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468, -0.829348978252946, -0.274283453294785, 0.937739407943759, -0.351683826842485, -0.742409762101558, 0.399683091299982, 1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831, 1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296, -1.12659429205047, 2.51705580505852, -0.896201086603481, -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923, -2.60274520612392, -0.0969780594504372, 0.0855764450401389, 0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257, -0.669534565586153, 0.285524667523424, -0.722321914484456, -0.343521604348032, -2.32395167916648, -0.135095644737079, 0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562, -0.472625773108594, 0.657958641995046, -0.740224694435862), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057, 0.700733515544461, 0.311681028661359, 0.760462361967838, 1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736, 0.418057822385083, -0.400235237343163, 1.49349310261748, -1.60708093984972, -0.415751788401515, 0.42200837321742, -0.151736536534977, -0.60615111526422, -0.304721068966714, 0.629536099884472, 0.895171980275539, 0.660212631820405, 2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306, 2.91914013071762, 0.677415500438328, -0.684320344136007, 0.186492083080971, -0.324393300483657, -0.274704218225806, -0.933503340589868, 0.116845344986082, 0.319160238648117, -1.07754212275943, -3.23315213292314, -0.254874652654534, 0.0295178303214797, 0.594273774110513, 0.0591351681787969, 0.413398894737046, -1.09777217457042, 0.711175257270441, 0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607, 0.264364269837939, 0.268043904143697, 0.436930577039483, 1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084, -0.370497517092117, 1.47696958979247, -1.22390375051376, 0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909, 0.158625439491262, -1.76325506654115, 0.338596047099905, -0.666565029559273, -0.238646624327644, -1.18776528245719, 0.384935321768578, 0.66657951565448, -0.304613889457735, 1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091, -0.651113609237535, 0.808619272846293, 0.986580613954563, -0.00617079609070003, 0.319052357931912, -1.01182190274184, 0.470167547726389, -0.700970331629097, 0.813682862526491, -0.811430783992772, 0.31939748709946, -0.846522653163624, -0.245763179128733, -1.55285901110546, 0.128434032925753, 0.985443389404868, 0.183247523067191, -1.76622921343046, -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214, -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA, -100L)))), structure(list(structure(list(coefficients = c(`(Intercept)` = 0.00359240575150906, x = 0.382732763516548), residuals = c(`1` = -0.638309680947255, `2` = -0.811636380352614, `3` = -0.233473980054519, `4` = 0.968739308213971, `5` = -0.128534129033088, `6` = -0.602585016131483, `7` = -0.358392964210803, `8` = 1.49574811145649, `9` = -0.459293958711428, `10` = 0.725890100735062, `11` = 1.48774907040203, `12` = 0.489042666848007, `13` = -0.404844869289696, `14` = -0.127637246323415, `15` = -0.44304497166009, `16` = 1.23967250380267, `17` = 0.0774687750552127, `18` = 1.43410685092965, `19` = -0.574691665308142, `20` = -0.729215896870353, `21` = 0.0116009542394814, `22` = 0.03131751749879, `23` = -0.592238119297328, `24` = -1.51225748915907, `25` = 0.0810504069622551, `26` = -0.616989361351339, `27` = 1.0578560205748, `28` = -0.931216410802673, `29` = 1.07327062301445, `30` = -0.639359158179586, `31` = 0.258947190260889, `32` = 0.794594573940522, `33` = -0.475839992151701, `34` = 0.390011449602914, `35` = -0.123725564189262, `36` = -0.987772001780167, `37` = -0.238343931360045, `38` = 1.4989082260653, `39` = -0.17385278300444, `40` = -0.812249549209319, `41` = -0.0910657608348354, `42` = 0.203502307013659, `43` = 0.961645797916102, `44` = 1.08907236691378, `45` = 0.139266616332848, `46` = 1.20059239124669, `47` = -0.579679506526092, `48` = -2.25629230981608, `49` = -0.503318869538649, `50` = -0.548566500342308, `51` = -2.09795213551185, `52` = 0.626432823606617, `53` = -0.656855396205137, `54` = -0.162258468534056, `55` = -1.53167309820087, `56` = 0.469529137333409, `57` = 1.86795308843342, `58` = -0.60424925356072, `59` = -0.189879216014634, `60` = 1.80445716981996, `61` = 0.945196570389133, `62` = 1.91017694110602, `63` = 0.0162337219466052, `64` = -0.157783189922451, `65` = -0.549582419566638, `66` = 1.24989727841953, `67` = -1.15997371898521, `68` = 0.26551436697819, `69` = -0.158157540682688, `70` = 2.21909829015737, `71` = -0.565189782493709, `72` = -1.29680311175277, `73` = 0.1945449216296, `74` = 0.0116327152413977, `75` = -0.727544055313591, `76` = 0.187134940829045, `77` = -0.303201255084669, `78` = -0.472179845352651, `79` = 0.509378315704507, `80` = -0.236110423435845, `81` = -1.67445323474589, `82` = -2.57246016896382, `83` = -0.58653410214976, `84` = 1.3924675463832, `85` = 0.75146177757971, `86` = 1.20530863863354, `87` = 1.10105105729179, `88` = 0.202118812350638, `89` = -1.42215265609739, `90` = 0.222713475576613, `91` = 1.50703418963112, `92` = -3.30659823135846, `93` = -0.784206332076243, `94` = 0.971376604185378, `95` = 0.496981353491917, `96` = 0.791162805995104, `97` = 0.457309741683089, `98` = 0.442339513241108, `99` = 0.0806385972197143, `100` = -0.79897252143844), effects = c(`(Intercept)` = 0.487949089166442, x = 3.53749365281527, -0.229235396268716, 1.0321354641656, -0.201796453642345, -0.529492977219647, -0.192574020057833, 1.51572637688684, -0.429395442947496, 0.782669878723765, 1.61957678096152, 0.605149201998609, -0.348426317952624, -0.147119873604507, -0.361211409536245, 1.35812923010767, 0.328316675750014, 1.4539106323126, -0.550054594258358, -0.768280368110209, -0.0388430162310263, 0.0971578632478397, -0.630531314828302, -1.45684585745609, 0.185418226054968, -0.500212334678304, 1.13842424889085, -0.892142146693421, 1.13075651402021, -0.598363291462474, 0.300082842627337, 0.798481140694903, -0.400599858117657, 0.327386661186858, -0.0998363952025164, -0.846048975520584, -0.162853280025263, 1.51714930601387, -0.0886531854505664, -0.781664167371644, -0.0669383549678521, 0.164850534046867, 1.06422835934757, 1.14579829386806, 0.235781086340547, 1.3375187176881, -0.390610377569037, -2.21491007071395, -0.49126714533155, -0.539230347331811, -1.9420378021374, 0.763542990025605, -0.518916222351825, -0.0570049306228198, -1.48846102648805, 0.482092423798378, 1.98233447725773, -0.341833170524159, -0.203273293936921, 1.81551784603442, 1.05133133236753, 2.04324068688861, 0.0934104670678553, -0.110085881119005, -0.546317185909023, 1.20498859163121, -1.04314708037387, 0.300020167314718, -0.1990268462214, 2.33971435065694, -0.493591679947433, -1.11333245414653, 0.229289144412566, 0.113456496780523, -0.605223546212071, 0.298984076124649, -0.279803977653396, -0.260464758430011, 0.595622128722423, -0.107376782199071, -1.54944688315464, -2.55123945916426, -0.556436980771129, 1.45570480893828, 0.768140084430457, 1.30430893318363, 1.30271293253266, 0.174234309282109, -1.34998175038448, 0.304592622673427, 1.55116220847892, -3.30641975646492, -0.759478723134583, 0.95990098148869, 0.549155282661439, 0.883097008068327, 0.53451958627147, 0.438401697474758, 0.197493075504715, -0.674580822908805), rank = 2L,     fitted.values = c(`1` = 0.380499964480278, `2` = -0.465154906099681,     `3` = 0.27522788253199, `4` = -0.0382096638391503, `5` = 0.685854851819903,     `6` = -0.0895818492363381, `7` = -0.580881485061524, `8` = 0.191833533935353,     `9` = 0.13927257157483, `10` = -0.0031537749877687, `11` = -0.400784018826715,     `12` = -0.317487722751189, `13` = -0.00123986961224809, `14` = 0.400911170766313,     `15` = -0.135897502276298, `16` = -0.329939859003044, `17` = -1.03139469128751,     `18` = 0.192758011558313, `19` = 0.167149549300479, `20` = 0.504662641611895,     `21` = 0.564955215955375, `22` = -0.0511598378392359, `23` = 0.500576152648316,     `24` = 0.00409514343759732, `25` = -0.25529189178607, `26` = -0.321040221779797,     `27` = -0.129193320384901, `28` = 0.0906562416244652, `29` = -0.00689500917680408,     `30` = 0.0804749176712171, `31` = 0.0797342843196133, `32` = 0.277092992112565,     `33` = -0.100963209894438, `34` = 0.629493457635481, `35` = 0.171112196498161,     `36` = -0.45321286876176, `37` = -0.102290538335955, `38` = 0.201037751334162,     `39` = -0.153731937456109, `40` = 0.135633314435676, `41` = 0.16984993402756,     `42` = 0.50247602155017, `43` = -0.245832971135794, `44` = -0.00286845333782448,     `45` = -0.213682096490501, `46` = -0.42779827234333, `47` = -0.704069111106093,     `48` = 0.0784277813890539, `49` = 0.233831126826071, `50` = 0.248219174572061,     `51` = -0.528403386543905, `52` = -0.42877232096279, `53` = -0.433164692837174,     `54` = -0.259984740445823, `55` = 0.0687326870373604, `56` = 0.231120690730526,     `57` = -0.308347293016671, `58` = -1.09268697486892, `59` = 0.368651902812687,     `60` = 0.239082046358038, `61` = -0.264653774337872, `62` = -0.407332966550108,     `63` = -0.111224054030291, `64` = 0.0449683292872122, `65` = 0.280385032576697,     `66` = 0.535627343422814, `67` = -0.321303083213176, `68` = 0.114861563499307,     `69` = 0.514225286147984, `70` = -0.34138076820476, `71` = -0.0816664508906588,     `72` = -0.674406448163988, `73` = 0.113598317833955, `74` = -0.2418126893868,     `75` = -0.350411534143083, `76` = -0.294930526510433, `77` = 0.173718410319711,     `78` = -0.824055331636924, `79` = -0.159264556881648, `80` = -0.384390555381373,     `81` = -0.36464206878304, `82` = 0.185250628310022, `83` = 0.138220289435998,     `84` = -0.0373677909474235, `85` = 0.209317870807993, `86` = -0.226852865958394,     `87` = -0.770789893463575, `88` = 0.445427252737147, `89` = -0.0847013627798738,     `90` = -0.136139027436236, `91` = 0.0638796781648836, `92` = 0.2967397621207,     `93` = 0.166669847824502, `94` = 0.358487254793509, `95` = 0.0212496259630596,     `96` = -0.189414232030471, `97` = -0.111399426605327, `98` = 0.318549312400568,     `99` = -0.32145058755933, `100` = -0.361385421485835), assign = 0:1,     qr = structure(list(qr = structure(cdim = c(100L, 2L), dimnames = list(c(\"1\",     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",     \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",     \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\",     \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\",     \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\",     \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\",     \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\",     \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",     \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\",     \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\",     \"x\")), assign = 0:1), qraux = c(1.1, 1.12873148295067), pivot = 1:2,         tol = 1e-07, rank = 2L), class = \"qr\"), df.residual = 98L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = m ~         x, data = structure(list(m = c(-0.257809716466977, -1.27679128645229,     0.0417539024774709, 0.930529644374821, 0.557320722786814,     -0.692166865367821, -0.939274449272328, 1.68758164539185,     -0.320021387136598, 0.722736325747294, 1.08696505157531,     0.171554944096819, -0.406084738901945, 0.273273924442898,     -0.578942473936388, 0.909732644799622, -0.953925916232302,     1.62686486248796, -0.407542116007663, -0.224553255258458,     0.576556170194857, -0.0198423203404459, -0.0916619666490127,     -1.50816234572148, -0.174241484823815, -0.938029583131136,     0.928662700189895, -0.840560169178208, 1.06637561383764,     -0.558884240508369, 0.338681474580503, 1.07168756605309,     -0.576803202046139, 1.01950490723839, 0.0473866323088989,     -1.44098487054193, -0.340634469696, 1.69994597739946, -0.327584720460549,     -0.676616234773644, 0.0787841731927249, 0.705978328563829,     0.715812826780308, 1.08620391357595, -0.0744154801576535,     0.772794118903362, -1.28374861763219, -2.17786452842703,     -0.269487742712578, -0.300347325770247, -2.62635552205575,     0.197660502643827, -1.09002008904231, -0.422243208979879,     -1.46294041116351, 0.700649828063935, 1.55960579541675, -1.69693622842964,     0.178772686798053, 2.043539216178, 0.680542796051261, 1.50284397455591,     -0.0949903320836854, -0.112814860635238, -0.26919738698994,     1.78552462184234, -1.48127680219839, 0.380375930477497, 0.356067745465296,     1.87771752195261, -0.646856233384368, -1.97120955991676,     0.308143239463555, -0.230179974145403, -1.07795558945667,     -0.107795585681388, -0.129482844764958, -1.29623517698958,     0.350113758822859, -0.620500978817218, -2.03909530352893,     -2.3872095406538, -0.448313812713761, 1.35509975543578, 0.960779648387702,     0.978455772675148, 0.33026116382822, 0.647546065087784, -1.50685401887726,     0.0865744481403767, 1.570913867796, -3.00985846923776, -0.61753648425174,     1.32986385897889, 0.518230979454976, 0.601748573964633, 0.345910315077762,     0.760888825641675, -0.240811990339615, -1.16035794292427),         y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909,         -0.31360760280103, 0.640175146926015, -0.213196392482659,         0.79760306542824, -0.127458830395686, -0.608428327270797,         0.296462080432809, -0.675699447934353, -0.160785042341766,         -0.816336600011713, -1.72327297092188, -0.535281428595674,         -0.00765373905760863, 0.504252652768121, 0.290293398421208,         0.279048146683646, 0.0112439636534965, -0.782874281888901,         0.314097024690366, -0.137704261235468, -0.610267273940993,         0.482754152828057, -0.370320007780895, 1.83711945518766,         -0.320207869670493, -0.552807217421982, 0.363031624793193,         -0.889723127628635, -1.12596728225233, -0.989827090143935,         -0.135156944128649, -0.502422245847366, 0.671002166714933,         1.24615343604938, 1.47878632390233, -1.26696576554576,         -0.318262612371445, 0.461251449812912, 0.234319865433172,         0.506642364182273, -0.275113574856366, -1.1523196355089,         1.60555795178744, -0.410322767817899, -1.44261499715763,         0.146949268211736, 1.63598725465829, -0.99909896430973,         1.32114252865484, 0.639318072702142, -0.563746491712262,         -0.0710896951888477, -0.213631541678839, -0.496420443744945,         -1.88914122076051, -0.0394093687246016, 2.57807132340186,         0.431038410226631, 0.0561439072327621, 0.152015405319829,         0.548056818220597, -1.25627629638571, -0.0206175507163967,         -2.42211981133594, -0.909283759946111, -0.590510681738354,         0.686052294710227, 0.89774915490782, -0.216018726494471,         0.390474315164319, -0.605815891489038, -0.573798023956782,         0.420348323013462, -0.501247083246725, 0.269064048092409,         1.12547954741865, -1.32047313229652, -1.66639182067291,         -0.148538371524439, -1.68533218467757, 1.04102930892646,         0.682605683525256, 3.25695951166719, -2.1988419377994,         -0.404377490884628, -0.169701059508333, 1.49329651567534,         1.51264727973354, -2.74193258577351, 1.63059880130779,         -0.856905261795034, -0.70478471721872, 0.263513612781986,         2.10036995898208, 0.818927439813178, 0.512135540197413,         0.916380125290656), x = c(0.984779968314556, -1.22473787596427,         0.709726218065825, -0.109219992578064, 1.78260789538833,         -0.243444679602975, -1.52710702225461, 0.491834371466622,         0.354503660926992, -0.0176263476303775, -1.05655032211723,         -0.838914666078269, -0.0126257164904259, 1.03811014600433,         -0.364457713905061, -0.871449472185395, -2.7042030254467,         0.494249836540647, 0.427340324999113, 1.30919086010968,         1.4667226423107, -0.143056066294616, 1.29851372621074,         0.00131354755592194, -0.676410075685581, -0.848196596885468,         -0.346941100407436, 0.227479443027071, -0.0274014036111113,         0.200877790585033, 0.198942671822796, 0.71459935608369,         -0.273181774889849, 1.63534745793173, 0.437693886479643,         -1.19353585074908, -0.276649804199181, 0.515883050535119,         -0.411055332086343, 0.344995049472574, 0.434395860831138,         1.30347768300503, -0.651695910733076, -0.0168808623279884,         -0.567692455293591, -1.12713286976328, -1.84897031117903,         0.19552905518189, 0.601565225195587, 0.639158159789933,         -1.38999281746208, -1.12967785339758, -1.14115419483757,         -0.688671499600886, 0.170197818152129, 0.59448342725741,         -0.815032650724957, -2.86434683706673, 0.95382348170826,         0.615284770613444, -0.700870700550263, -1.07366134146979,         -0.299991196799737, 0.108106562802571, 0.723200763587674,         1.39009509607427, -0.848883398378404, 0.290722844643498,         1.33417603370242, -0.901342155259083, -0.222763412932851,         -1.7714680282034, 0.287422250114445, -0.641191762323999,         -0.924937642238947, -0.779977469185323, 0.444503373594371,         -2.16246900261166, -0.425510899920945, -1.01371765920455,         -0.962119028303747, 0.474634627277364, 0.351754269604537,         -0.107020356246981, 0.537517256600346, -0.60210489844813,         -2.02329764533368, 1.15442128059814, -0.230692997694109,         -0.365088768214911, 0.157517929375723, 0.765932222984396,         0.426086966202313, 0.927265399965311, 0.0461345928404875,         -0.504285643091111, -0.300449408355562, 0.822915978645871,         -0.849268796129039, -0.953610095681196)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = m ~ x, model = structure(list(        m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709,         0.930529644374821, 0.557320722786814, -0.692166865367821,         -0.939274449272328, 1.68758164539185, -0.320021387136598,         0.722736325747294, 1.08696505157531, 0.171554944096819,         -0.406084738901945, 0.273273924442898, -0.578942473936388,         0.909732644799622, -0.953925916232302, 1.62686486248796,         -0.407542116007663, -0.224553255258458, 0.576556170194857,         -0.0198423203404459, -0.0916619666490127, -1.50816234572148,         -0.174241484823815, -0.938029583131136, 0.928662700189895,         -0.840560169178208, 1.06637561383764, -0.558884240508369,         0.338681474580503, 1.07168756605309, -0.576803202046139,         1.01950490723839, 0.0473866323088989, -1.44098487054193,         -0.340634469696, 1.69994597739946, -0.327584720460549,         -0.676616234773644, 0.0787841731927249, 0.705978328563829,         0.715812826780308, 1.08620391357595, -0.0744154801576535,         0.772794118903362, -1.28374861763219, -2.17786452842703,         -0.269487742712578, -0.300347325770247, -2.62635552205575,         0.197660502643827, -1.09002008904231, -0.422243208979879,         -1.46294041116351, 0.700649828063935, 1.55960579541675,         -1.69693622842964, 0.178772686798053, 2.043539216178,         0.680542796051261, 1.50284397455591, -0.0949903320836854,         -0.112814860635238, -0.26919738698994, 1.78552462184234,         -1.48127680219839, 0.380375930477497, 0.356067745465296,         1.87771752195261, -0.646856233384368, -1.97120955991676,         0.308143239463555, -0.230179974145403, -1.07795558945667,         -0.107795585681388, -0.129482844764958, -1.29623517698958,         0.350113758822859, -0.620500978817218, -2.03909530352893,         -2.3872095406538, -0.448313812713761, 1.35509975543578,         0.960779648387702, 0.978455772675148, 0.33026116382822,         0.647546065087784, -1.50685401887726, 0.0865744481403767,         1.570913867796, -3.00985846923776, -0.61753648425174,         1.32986385897889, 0.518230979454976, 0.601748573964633,         0.345910315077762, 0.760888825641675, -0.240811990339615,         -1.16035794292427), x = c(0.984779968314556, -1.22473787596427,         0.709726218065825, -0.109219992578064, 1.78260789538833,         -0.243444679602975, -1.52710702225461, 0.491834371466622,         0.354503660926992, -0.0176263476303775, -1.05655032211723,         -0.838914666078269, -0.0126257164904259, 1.03811014600433,         -0.364457713905061, -0.871449472185395, -2.7042030254467,         0.494249836540647, 0.427340324999113, 1.30919086010968,         1.4667226423107, -0.143056066294616, 1.29851372621074,         0.00131354755592194, -0.676410075685581, -0.848196596885468,         -0.346941100407436, 0.227479443027071, -0.0274014036111113,         0.200877790585033, 0.198942671822796, 0.71459935608369,         -0.273181774889849, 1.63534745793173, 0.437693886479643,         -1.19353585074908, -0.276649804199181, 0.515883050535119,         -0.411055332086343, 0.344995049472574, 0.434395860831138,         1.30347768300503, -0.651695910733076, -0.0168808623279884,         -0.567692455293591, -1.12713286976328, -1.84897031117903,         0.19552905518189, 0.601565225195587, 0.639158159789933,         -1.38999281746208, -1.12967785339758, -1.14115419483757,         -0.688671499600886, 0.170197818152129, 0.59448342725741,         -0.815032650724957, -2.86434683706673, 0.95382348170826,         0.615284770613444, -0.700870700550263, -1.07366134146979,         -0.299991196799737, 0.108106562802571, 0.723200763587674,         1.39009509607427, -0.848883398378404, 0.290722844643498,         1.33417603370242, -0.901342155259083, -0.222763412932851,         -1.7714680282034, 0.287422250114445, -0.641191762323999,         -0.924937642238947, -0.779977469185323, 0.444503373594371,         -2.16246900261166, -0.425510899920945, -1.01371765920455,         -0.962119028303747, 0.474634627277364, 0.351754269604537,         -0.107020356246981, 0.537517256600346, -0.60210489844813,         -2.02329764533368, 1.15442128059814, -0.230692997694109,         -0.365088768214911, 0.157517929375723, 0.765932222984396,         0.426086966202313, 0.927265399965311, 0.0461345928404875,         -0.504285643091111, -0.300449408355562, 0.822915978645871,         -0.849268796129039, -0.953610095681196)), terms = m ~         x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\"),     structure(list(coefficients = c(`(Intercept)` = -0.0443005999567679,     m = 0.416877762692203, x = -0.156180658350468), residuals = c(`1` = -0.885778571044836,     `2` = -0.221800213902656, `3` = -0.206320355599509, `4` = -0.674282169455884,     `5` = 0.730550005547906, `6` = 0.0816318313860099, `7` = 0.994961716244259,     `8` = -0.709858475195252, `9` = -0.375351312279639, `10` = 0.0367170833184352,     `11` = -1.24954313169158, `12` = -0.319024128506833, `13` = -0.604720195351676,     `14` = -1.63076146714573, `15` = -0.306553831075414, `16` = -0.478704000998051,     `17` = 0.523879545630328, `18` = -0.266417520838034, `19` = 0.559986285462599,     `20` = 0.353626112706008, `21` = -0.749853420335727, `22` = 0.344326856142359,     `23` = 0.147610902938621, `24` = 0.0629578211988278, `25` = 0.49404998221088,     `26` = -0.067447636781518, `27` = 1.4400957369231, `28` = 0.110031462194632,     `29` = -0.957334466807087, `30` = 0.671691862118579, `31` = -0.955540305600998,     `32` = -1.41682279924686, `33` = -0.74773577125612, `34` = -0.260455626343604,     `35` = -0.409516759802684, `36` = 1.12961010064166, `37` = 1.38924962307651,     `38` = 0.894988202567621, `39` = -1.15030127261496, `40` = 0.0619858036932616,     `41` = 0.540552911442867, `42` = 0.187891801945938, `43` = 0.150754218021884,     `44` = -0.686263696410565, `45` = -1.16565945808269, `46` = 1.151661514786,     `47` = -0.119629316753828, `48` = -0.459873248578536, `49` = 0.397546168335291,     `50` = 1.90532011799881, `51` = -0.0770191436176961, `52` = 1.10660902962925,     `53` = 0.959797595239295, `54` = -0.450979255678856, `55` = 0.609659837614588,     `56` = -0.368569461428536, `57` = -1.22957715443066, `58` = -1.58478121722181,     `59` = 0.0793336528526517, `60` = 1.86656144749199, `61` = 0.0821734045187589,     `62` = -0.693742861754995, `63` = 0.189062539777506, `64` = 0.656271579027927,     `65` = -0.9868033206413, `66` = -0.50355649307047, `67` = -1.89288702017237,     `68` = -0.978148141594825, `69` = -0.486274315578955, `70` = -0.193197996059949,     `71` = 1.17691839773312, `72` = 0.373366261706267, `73` = 0.351206647112239,     `74` = -0.565700130462644, `75` = -0.224579079483769, `76` = 0.387769110921287,     `77` = -0.333545135130347, `78` = 0.516000436065154, `79` = 0.957368934424638,     `80` = -1.17582256393817, `81` = -0.922302115916814, `82` = 0.965065549381675,     `83` = -1.39920231208825, `84` = 0.503704444916859, `85` = 0.410328412232536,     `86` = 2.7993265187822, `87` = -2.60821983121063, `88` = -0.449726170164188,     `89` = 0.466743688285034, `90` = 1.44448634920887, `91` = 0.926670075013261,     `92` = -1.32326512230318, `93` = 1.99888317209626, `94` = -1.22217441142241,     `95` = -0.869317757452373, `96` = -0.0218010502135053, `97` = 1.9535438542991,     `98` = 0.674553967790979, `99` = 0.524185944220473, `100` = 1.29547269586268    ), effects = c(`(Intercept)` = 0.43264571547434, m = 3.91423689559544,     x = 1.35997405209498, -0.611671161986632, 0.825031370326444,     0.169917225198442, 1.07009744735539, -0.651954214935359,     -0.285294634533966, 0.104084869048116, -1.20237539355107,     -0.25341105101726, -0.518163644540912, -1.54152280287865,     -0.221820600704936, -0.426034374749043, 0.583367156606705,     -0.20745215175142, 0.652509122887982, 0.454958388177569,     -0.659963815848788, 0.422579381127501, 0.246547925936717,     0.168370839867388, 0.567715118443301, 0.0168354744057434,     1.49952802165125, 0.207190186548235, -0.895919636500827,     0.763719997927833, -0.878742274469626, -1.34547746703503,     -0.661806126055278, -0.175791958843407, -0.32456019258772,     1.21774913517943, 1.47113194364177, 0.95300779162785, -1.07045510673119,     0.157954472885101, 0.624933093233273, 0.273384538537429,     0.209676376134324, -0.625042663484988, -1.09221708981001,     1.20319783680123, -0.0430051573031029, -0.340493247655624,     0.490083337707241, 1.99888770198302, 0.0285459360373079,     1.16785323862506, 1.04269899336611, -0.373278775575326, 0.716587564374003,     -0.292561204205755, -1.18715391510179, -1.51487035761087,     0.169034820429815, 1.92010325842155, 0.141028916116286, -0.653850824561076,     0.266468647318223, 0.739490847391649, -0.8926284208016, -0.435180578165653,     -1.79941105529538, -0.90081691604533, -0.394439830990295,     -0.157328870898471, 1.26471556326264, 0.462682046561476,     0.429716857267196, -0.490611833562809, -0.138962108313871,     0.458910067880335, -0.245500595046317, 0.588602407786369,     1.02554026803337, -1.09915341596189, -0.820906408422221,     1.091760901173, -1.30700960345868, 0.559153314575665, 0.481160989926078,     2.85446944773015, -2.56128980842809, -0.365256601358954,     0.56900137125227, 1.517937787749, 0.982035748458895, -1.1820887664937,     2.09494620268786, -1.15233037134392, -0.797624760538641,     0.0410439840009282, 2.02347530577092, 0.752626737688837,     0.596644324656369, 1.38209827795288), rank = 3L, fitted.values = c(`1` = -0.305579321539554,     `2` = -0.385286127103049, `3` = -0.1377398344944, `4` = 0.360674566654854,     `5` = -0.0903748586218912, `6` = -0.294828223868669, `7` = -0.197358650816019,     `8` = 0.582399644799567, `9` = -0.233077014991157, `10` = 0.259744997114374,     `11` = 0.57384368375723, `12` = 0.158239086165067, `13` = -0.211616404660037,     `14` = -0.0925115037761512, `15` = -0.22872759752026, `16` = 0.471050261940442,     `17` = -0.0196268928622071, `18` = 0.556710919259243, `19` = -0.280938138778953,     `20` = -0.342382149052512, `21` = -0.0330208615531739, `22` = -0.0302298314519936,     `23` = -0.285315164174089, `24` = -0.673225095139821, `25` = -0.0112958293828235,     `26` = -0.302872370999377, `27` = 0.397023718264565, `28` = -0.430239331865125,     `29` = 0.404527249385104, `30` = -0.308660237325386, `31` = 0.065817177972363,     `32` = 0.290855516994525, `33` = -0.242091318887815, `34` = 0.125298682214955,     `35` = -0.0929054860446819, `36` = -0.458607933926723, `37` = -0.143096187027125,     `38` = 0.583798121334709, `39` = -0.116664492930797, `40` = -0.380248416064706,     `41` = -0.0793014616299551, `42` = 0.0464280634872343, `43` = 0.355888146160388,     `44` = 0.411150121554199, `45` = 0.0133398225737902, `46` = 0.45389643700144,     `47` = -0.290693451064071, `48` = -0.98274174857909, `49` = -0.250596900123554,     `50` = -0.269332863340521, `51` = -0.922079820692034, `52` = 0.214533499025585,     `53` = -0.320479522537153, `54` = -0.112767236033406, `55` = -0.680749532803436,     `56` = 0.154937919749697, `57` = 0.733156710685713, `58` = -0.3043600035387,     `59` = -0.118743021577253, `60` = 0.71150987590987, `61` = 0.348865005707872,     `62` = 0.749886768987757, `63` = -0.0370471344576764, `64` = -0.108214760807331,     `65` = -0.269472975744406, `66` = 0.482938942354073, `67` = -0.529232791163572,     `68` = 0.0688643816487136, `69` = -0.104236366159399, `70` = 0.879250290770177,     `71` = -0.279169242825299, `72` = -0.589384988200737, `73` = 0.0392676680520799,     `74` = -0.0401157610263937, `75` = -0.349218944473013, `76` = 0.0325792120921751,     `77` = -0.167701948116379, `78` = -0.246936387972745, `79` = 0.168110612994017,     `80` = -0.144650568358351, `81` = -0.744089704756098, `82` = -1.11360392090611,     `83` = -0.286129872589317, `84` = 0.537324864009605, `85` = 0.27227727129272,     `86` = 0.45763299288499, `87` = 0.40937789341123, `88` = 0.0453486792795598,     `89` = -0.636444747793368, `90` = 0.0488101664664706, `91` = 0.585977204720283,     `92` = -1.41866746347033, `93` = -0.368284370788474, `94` = 0.365269149627378,     `95` = 0.164533040233654, `96` = 0.285314662995491, `97` = 0.146826104682985,     `98` = 0.1443734720222, `99` = -0.0120504040230603, `100` = -0.379092570572025    ), assign = 0:2, qr = structure(list(qr = structure(cdim = c(100L, 3L), dimnames = list(        c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",         \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",         \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\",         \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\",         \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\",         \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\",         \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\",         \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\",         \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",         \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\",         \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"        ), c(\"(Intercept)\", \"m\", \"x\")), assign = 0:2), qraux = c(1.1,     1.11459188539618, 1.08092606017996), pivot = 1:3, tol = 1e-07,         rank = 3L), class = \"qr\"), df.residual = 97L, xlevels = structure(list(), names = character(0)),         call = stats::lm(formula = y ~ m + x, data = structure(list(            m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709,             0.930529644374821, 0.557320722786814, -0.692166865367821,             -0.939274449272328, 1.68758164539185, -0.320021387136598,             0.722736325747294, 1.08696505157531, 0.171554944096819,             -0.406084738901945, 0.273273924442898, -0.578942473936388,             0.909732644799622, -0.953925916232302, 1.62686486248796,             -0.407542116007663, -0.224553255258458, 0.576556170194857,             -0.0198423203404459, -0.0916619666490127, -1.50816234572148,             -0.174241484823815, -0.938029583131136, 0.928662700189895,             -0.840560169178208, 1.06637561383764, -0.558884240508369,             0.338681474580503, 1.07168756605309, -0.576803202046139,             1.01950490723839, 0.0473866323088989, -1.44098487054193,             -0.340634469696, 1.69994597739946, -0.327584720460549,             -0.676616234773644, 0.0787841731927249, 0.705978328563829,             0.715812826780308, 1.08620391357595, -0.0744154801576535,             0.772794118903362, -1.28374861763219, -2.17786452842703,             -0.269487742712578, -0.300347325770247, -2.62635552205575,             0.197660502643827, -1.09002008904231, -0.422243208979879,             -1.46294041116351, 0.700649828063935, 1.55960579541675,             -1.69693622842964, 0.178772686798053, 2.043539216178,             0.680542796051261, 1.50284397455591, -0.0949903320836854,             -0.112814860635238, -0.26919738698994, 1.78552462184234,             -1.48127680219839, 0.380375930477497, 0.356067745465296,             1.87771752195261, -0.646856233384368, -1.97120955991676,             0.308143239463555, -0.230179974145403, -1.07795558945667,             -0.107795585681388, -0.129482844764958, -1.29623517698958,             0.350113758822859, -0.620500978817218, -2.03909530352893,             -2.3872095406538, -0.448313812713761, 1.35509975543578,             0.960779648387702, 0.978455772675148, 0.33026116382822,             0.647546065087784, -1.50685401887726, 0.0865744481403767,             1.570913867796, -3.00985846923776, -0.61753648425174,             1.32986385897889, 0.518230979454976, 0.601748573964633,             0.345910315077762, 0.760888825641675, -0.240811990339615,             -1.16035794292427), y = c(-1.19135789258439, -0.607086341005705,             -0.344060190093909, -0.31360760280103, 0.640175146926015,             -0.213196392482659, 0.79760306542824, -0.127458830395686,             -0.608428327270797, 0.296462080432809, -0.675699447934353,             -0.160785042341766, -0.816336600011713, -1.72327297092188,             -0.535281428595674, -0.00765373905760863, 0.504252652768121,             0.290293398421208, 0.279048146683646, 0.0112439636534965,             -0.782874281888901, 0.314097024690366, -0.137704261235468,             -0.610267273940993, 0.482754152828057, -0.370320007780895,             1.83711945518766, -0.320207869670493, -0.552807217421982,             0.363031624793193, -0.889723127628635, -1.12596728225233,             -0.989827090143935, -0.135156944128649, -0.502422245847366,             0.671002166714933, 1.24615343604938, 1.47878632390233,             -1.26696576554576, -0.318262612371445, 0.461251449812912,             0.234319865433172, 0.506642364182273, -0.275113574856366,             -1.1523196355089, 1.60555795178744, -0.410322767817899,             -1.44261499715763, 0.146949268211736, 1.63598725465829,             -0.99909896430973, 1.32114252865484, 0.639318072702142,             -0.563746491712262, -0.0710896951888477, -0.213631541678839,             -0.496420443744945, -1.88914122076051, -0.0394093687246016,             2.57807132340186, 0.431038410226631, 0.0561439072327621,             0.152015405319829, 0.548056818220597, -1.25627629638571,             -0.0206175507163967, -2.42211981133594, -0.909283759946111,             -0.590510681738354, 0.686052294710227, 0.89774915490782,             -0.216018726494471, 0.390474315164319, -0.605815891489038,             -0.573798023956782, 0.420348323013462, -0.501247083246725,             0.269064048092409, 1.12547954741865, -1.32047313229652,             -1.66639182067291, -0.148538371524439, -1.68533218467757,             1.04102930892646, 0.682605683525256, 3.25695951166719,             -2.1988419377994, -0.404377490884628, -0.169701059508333,             1.49329651567534, 1.51264727973354, -2.74193258577351,             1.63059880130779, -0.856905261795034, -0.70478471721872,             0.263513612781986, 2.10036995898208, 0.818927439813178,             0.512135540197413, 0.916380125290656), x = c(0.984779968314556,             -1.22473787596427, 0.709726218065825, -0.109219992578064,             1.78260789538833, -0.243444679602975, -1.52710702225461,             0.491834371466622, 0.354503660926992, -0.0176263476303775,             -1.05655032211723, -0.838914666078269, -0.0126257164904259,             1.03811014600433, -0.364457713905061, -0.871449472185395,             -2.7042030254467, 0.494249836540647, 0.427340324999113,             1.30919086010968, 1.4667226423107, -0.143056066294616,             1.29851372621074, 0.00131354755592194, -0.676410075685581,             -0.848196596885468, -0.346941100407436, 0.227479443027071,             -0.0274014036111113, 0.200877790585033, 0.198942671822796,             0.71459935608369, -0.273181774889849, 1.63534745793173,             0.437693886479643, -1.19353585074908, -0.276649804199181,             0.515883050535119, -0.411055332086343, 0.344995049472574,             0.434395860831138, 1.30347768300503, -0.651695910733076,             -0.0168808623279884, -0.567692455293591, -1.12713286976328,             -1.84897031117903, 0.19552905518189, 0.601565225195587,             0.639158159789933, -1.38999281746208, -1.12967785339758,             -1.14115419483757, -0.688671499600886, 0.170197818152129,             0.59448342725741, -0.815032650724957, -2.86434683706673,             0.95382348170826, 0.615284770613444, -0.700870700550263,             -1.07366134146979, -0.299991196799737, 0.108106562802571,             0.723200763587674, 1.39009509607427, -0.848883398378404,             0.290722844643498, 1.33417603370242, -0.901342155259083,             -0.222763412932851, -1.7714680282034, 0.287422250114445,             -0.641191762323999, -0.924937642238947, -0.779977469185323,             0.444503373594371, -2.16246900261166, -0.425510899920945,             -1.01371765920455, -0.962119028303747, 0.474634627277364,             0.351754269604537, -0.107020356246981, 0.537517256600346,             -0.60210489844813, -2.02329764533368, 1.15442128059814,             -0.230692997694109, -0.365088768214911, 0.157517929375723,             0.765932222984396, 0.426086966202313, 0.927265399965311,             0.0461345928404875, -0.504285643091111, -0.300449408355562,             0.822915978645871, -0.849268796129039, -0.953610095681196            )), class = \"data.frame\", row.names = c(NA, -100L        )), subset = 1:100), terms = y ~ m + x, model = structure(list(            y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909,             -0.31360760280103, 0.640175146926015, -0.213196392482659,             0.79760306542824, -0.127458830395686, -0.608428327270797,             0.296462080432809, -0.675699447934353, -0.160785042341766,             -0.816336600011713, -1.72327297092188, -0.535281428595674,             -0.00765373905760863, 0.504252652768121, 0.290293398421208,             0.279048146683646, 0.0112439636534965, -0.782874281888901,             0.314097024690366, -0.137704261235468, -0.610267273940993,             0.482754152828057, -0.370320007780895, 1.83711945518766,             -0.320207869670493, -0.552807217421982, 0.363031624793193,             -0.889723127628635, -1.12596728225233, -0.989827090143935,             -0.135156944128649, -0.502422245847366, 0.671002166714933,             1.24615343604938, 1.47878632390233, -1.26696576554576,             -0.318262612371445, 0.461251449812912, 0.234319865433172,             0.506642364182273, -0.275113574856366, -1.1523196355089,             1.60555795178744, -0.410322767817899, -1.44261499715763,             0.146949268211736, 1.63598725465829, -0.99909896430973,             1.32114252865484, 0.639318072702142, -0.563746491712262,             -0.0710896951888477, -0.213631541678839, -0.496420443744945,             -1.88914122076051, -0.0394093687246016, 2.57807132340186,             0.431038410226631, 0.0561439072327621, 0.152015405319829,             0.548056818220597, -1.25627629638571, -0.0206175507163967,             -2.42211981133594, -0.909283759946111, -0.590510681738354,             0.686052294710227, 0.89774915490782, -0.216018726494471,             0.390474315164319, -0.605815891489038, -0.573798023956782,             0.420348323013462, -0.501247083246725, 0.269064048092409,             1.12547954741865, -1.32047313229652, -1.66639182067291,             -0.148538371524439, -1.68533218467757, 1.04102930892646,             0.682605683525256, 3.25695951166719, -2.1988419377994,             -0.404377490884628, -0.169701059508333, 1.49329651567534,             1.51264727973354, -2.74193258577351, 1.63059880130779,             -0.856905261795034, -0.70478471721872, 0.263513612781986,             2.10036995898208, 0.818927439813178, 0.512135540197413,             0.916380125290656), m = c(-0.257809716466977, -1.27679128645229,             0.0417539024774709, 0.930529644374821, 0.557320722786814,             -0.692166865367821, -0.939274449272328, 1.68758164539185,             -0.320021387136598, 0.722736325747294, 1.08696505157531,             0.171554944096819, -0.406084738901945, 0.273273924442898,             -0.578942473936388, 0.909732644799622, -0.953925916232302,             1.62686486248796, -0.407542116007663, -0.224553255258458,             0.576556170194857, -0.0198423203404459, -0.0916619666490127,             -1.50816234572148, -0.174241484823815, -0.938029583131136,             0.928662700189895, -0.840560169178208, 1.06637561383764,             -0.558884240508369, 0.338681474580503, 1.07168756605309,             -0.576803202046139, 1.01950490723839, 0.0473866323088989,             -1.44098487054193, -0.340634469696, 1.69994597739946,             -0.327584720460549, -0.676616234773644, 0.0787841731927249,             0.705978328563829, 0.715812826780308, 1.08620391357595,             -0.0744154801576535, 0.772794118903362, -1.28374861763219,             -2.17786452842703, -0.269487742712578, -0.300347325770247,             -2.62635552205575, 0.197660502643827, -1.09002008904231,             -0.422243208979879, -1.46294041116351, 0.700649828063935,             1.55960579541675, -1.69693622842964, 0.178772686798053,             2.043539216178, 0.680542796051261, 1.50284397455591,             -0.0949903320836854, -0.112814860635238, -0.26919738698994,             1.78552462184234, -1.48127680219839, 0.380375930477497,             0.356067745465296, 1.87771752195261, -0.646856233384368,             -1.97120955991676, 0.308143239463555, -0.230179974145403,             -1.07795558945667, -0.107795585681388, -0.129482844764958,             -1.29623517698958, 0.350113758822859, -0.620500978817218,             -2.03909530352893, -2.3872095406538, -0.448313812713761,             1.35509975543578, 0.960779648387702, 0.978455772675148,             0.33026116382822, 0.647546065087784, -1.50685401887726,             0.0865744481403767, 1.570913867796, -3.00985846923776,             -0.61753648425174, 1.32986385897889, 0.518230979454976,             0.601748573964633, 0.345910315077762, 0.760888825641675,             -0.240811990339615, -1.16035794292427), x = c(0.984779968314556,             -1.22473787596427, 0.709726218065825, -0.109219992578064,             1.78260789538833, -0.243444679602975, -1.52710702225461,             0.491834371466622, 0.354503660926992, -0.0176263476303775,             -1.05655032211723, -0.838914666078269, -0.0126257164904259,             1.03811014600433, -0.364457713905061, -0.871449472185395,             -2.7042030254467, 0.494249836540647, 0.427340324999113,             1.30919086010968, 1.4667226423107, -0.143056066294616,             1.29851372621074, 0.00131354755592194, -0.676410075685581,             -0.848196596885468, -0.346941100407436, 0.227479443027071,             -0.0274014036111113, 0.200877790585033, 0.198942671822796,             0.71459935608369, -0.273181774889849, 1.63534745793173,             0.437693886479643, -1.19353585074908, -0.276649804199181,             0.515883050535119, -0.411055332086343, 0.344995049472574,             0.434395860831138, 1.30347768300503, -0.651695910733076,             -0.0168808623279884, -0.567692455293591, -1.12713286976328,             -1.84897031117903, 0.19552905518189, 0.601565225195587,             0.639158159789933, -1.38999281746208, -1.12967785339758,             -1.14115419483757, -0.688671499600886, 0.170197818152129,             0.59448342725741, -0.815032650724957, -2.86434683706673,             0.95382348170826, 0.615284770613444, -0.700870700550263,             -1.07366134146979, -0.299991196799737, 0.108106562802571,             0.723200763587674, 1.39009509607427, -0.848883398378404,             0.290722844643498, 1.33417603370242, -0.901342155259083,             -0.222763412932851, -1.7714680282034, 0.287422250114445,             -0.641191762323999, -0.924937642238947, -0.779977469185323,             0.444503373594371, -2.16246900261166, -0.425510899920945,             -1.01371765920455, -0.962119028303747, 0.474634627277364,             0.351754269604537, -0.107020356246981, 0.537517256600346,             -0.60210489844813, -2.02329764533368, 1.15442128059814,             -0.230692997694109, -0.365088768214911, 0.157517929375723,             0.765932222984396, 0.426086966202313, 0.927265399965311,             0.0461345928404875, -0.504285643091111, -0.300449408355562,             0.822915978645871, -0.849268796129039, -0.953610095681196            )), terms = y ~ m + x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\")), class = c(\"lm_list_lmhelprs\", \"lm_list\", \"list\"), cases_removed = integer(0), call = (function (models,     data, na_omit_all = TRUE, ...) {    my_call <- match.call()    my_call$na_omit_all <- NULL    my_call[[1L]] <- quote(stats::lm)    my_mm <- my_call    my_mm[[1L]] <- quote(stats::model.frame)    my_mm$models <- NULL    if (is.null(my_call$data) && na_omit_all) {        stop(\"The argument 'data' must be set if na_omit_all is TRUE.\")    }    models1 <- parse_models(models)    data_full <- eval(my_call$data, envir = parent.frame())    if (na_omit_all) {        all_vars <- sapply(models1, function(x) {            all.vars(stats::as.formula(x))        }, USE.NAMES = FALSE)        all_vars <- unique(unlist(all_vars))        if (!is.null(my_call$subset)) {            all_ys <- sapply(models1, function(x) {                all.vars(stats::as.formula(x))[1]            }, USE.NAMES = FALSE)            ys1 <- all_ys[1]            f0 <- paste(ys1, \"~\", paste(setdiff(all_vars, ys1),                 collapse = \" + \"))            my_mm0 <- my_mm            my_mm0$formula <- f0            my_mm0$na.action <- \"na.pass\"            data_selected <- tryCatch(eval(my_mm0, envir = parent.frame()),                 error = function(e) e)            if (inherits(data_selected, \"error\")) {                subset_i <- eval(my_mm0$subset, envir = parent.frame())                if (is.logical(subset_i)) {                  subset_i <- sapply(subset_i, isTRUE)                  omitted_subset <- which(!subset_i)                }                else if (is.character(subset_i)) {                  omitted_subset <- !(row.names(data_full) %in%                     subset_i)                  omitted_subset[is.na(omitted_subset)] <- TRUE                  omitted_subset <- which(omitted_subset)                }                else {                  omitted_subset <- setdiff(seq_len(nrow(data_full)),                     subset_i)                }            }            else {                subset_i <- match(row.names(data_selected), row.names(data_full))                subset_i <- stats::na.omit(subset_i)                omitted_subset <- setdiff(seq_len(nrow(data_full)),                   subset_i)            }        }        else {            omitted_subset <- numeric(0)        }        data <- stats::na.omit(eval(my_call$data, envir = parent.frame())[,             all_vars])        data_omitted <- attr(data, \"na.action\")        if (!is.null(data_omitted)) {            omitted_listwise <- as.numeric(data_omitted)        }        else {            omitted_listwise <- numeric(0)        }        omitted <- c(omitted_subset, omitted_listwise)        omitted <- unique(sort(omitted))        selected <- !logical(nrow(data_full))        selected[omitted] <- FALSE        my_call$subset <- which(selected)    }    else {        selected <- !logical(nrow(data_full))    }    tmpfct <- function(x, env = parent.frame()) {        call0 <- my_call        call0$models <- NULL        call0$formula <- stats::as.formula(x, env = env)        outtmp <- eval(call0, envir = env)        outtmp    }    out1 <- lapply(models1, tmpfct, env = parent.frame())    out2 <- lm2list_free(out1)    attr(out2, \"cases_removed\") <- which(!selected)    attr(out2, \"call\") <- match.call()    out2})(models = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709, 0.930529644374821, 0.557320722786814, -0.692166865367821, -0.939274449272328, 1.68758164539185, -0.320021387136598, 0.722736325747294, 1.08696505157531, 0.171554944096819, -0.406084738901945, 0.273273924442898, -0.578942473936388, 0.909732644799622, -0.953925916232302, 1.62686486248796, -0.407542116007663, -0.224553255258458, 0.576556170194857, -0.0198423203404459, -0.0916619666490127, -1.50816234572148, -0.174241484823815, -0.938029583131136, 0.928662700189895, -0.840560169178208, 1.06637561383764, -0.558884240508369, 0.338681474580503, 1.07168756605309, -0.576803202046139, 1.01950490723839, 0.0473866323088989, -1.44098487054193, -0.340634469696, 1.69994597739946, -0.327584720460549, -0.676616234773644, 0.0787841731927249, 0.705978328563829, 0.715812826780308, 1.08620391357595, -0.0744154801576535, 0.772794118903362, -1.28374861763219, -2.17786452842703, -0.269487742712578, -0.300347325770247, -2.62635552205575, 0.197660502643827, -1.09002008904231, -0.422243208979879, -1.46294041116351, 0.700649828063935, 1.55960579541675, -1.69693622842964, 0.178772686798053, 2.043539216178, 0.680542796051261, 1.50284397455591, -0.0949903320836854, -0.112814860635238, -0.26919738698994, 1.78552462184234, -1.48127680219839, 0.380375930477497, 0.356067745465296, 1.87771752195261, -0.646856233384368, -1.97120955991676, 0.308143239463555, -0.230179974145403, -1.07795558945667, -0.107795585681388, -0.129482844764958, -1.29623517698958, 0.350113758822859, -0.620500978817218, -2.03909530352893, -2.3872095406538, -0.448313812713761, 1.35509975543578, 0.960779648387702, 0.978455772675148, 0.33026116382822, 0.647546065087784, -1.50685401887726, 0.0865744481403767, 1.570913867796, -3.00985846923776, -0.61753648425174, 1.32986385897889, 0.518230979454976, 0.601748573964633, 0.345910315077762, 0.760888825641675, -0.240811990339615, -1.16035794292427), y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909, -0.31360760280103, 0.640175146926015, -0.213196392482659, 0.79760306542824, -0.127458830395686, -0.608428327270797, 0.296462080432809, -0.675699447934353, -0.160785042341766, -0.816336600011713, -1.72327297092188, -0.535281428595674, -0.00765373905760863, 0.504252652768121, 0.290293398421208, 0.279048146683646, 0.0112439636534965, -0.782874281888901, 0.314097024690366, -0.137704261235468, -0.610267273940993, 0.482754152828057, -0.370320007780895, 1.83711945518766, -0.320207869670493, -0.552807217421982, 0.363031624793193, -0.889723127628635, -1.12596728225233, -0.989827090143935, -0.135156944128649, -0.502422245847366, 0.671002166714933, 1.24615343604938, 1.47878632390233, -1.26696576554576, -0.318262612371445, 0.461251449812912, 0.234319865433172, 0.506642364182273, -0.275113574856366, -1.1523196355089, 1.60555795178744, -0.410322767817899, -1.44261499715763, 0.146949268211736, 1.63598725465829, -0.99909896430973, 1.32114252865484, 0.639318072702142, -0.563746491712262, -0.0710896951888477, -0.213631541678839, -0.496420443744945, -1.88914122076051, -0.0394093687246016, 2.57807132340186, 0.431038410226631, 0.0561439072327621, 0.152015405319829, 0.548056818220597, -1.25627629638571, -0.0206175507163967, -2.42211981133594, -0.909283759946111, -0.590510681738354, 0.686052294710227, 0.89774915490782, -0.216018726494471, 0.390474315164319, -0.605815891489038, -0.573798023956782, 0.420348323013462, -0.501247083246725, 0.269064048092409, 1.12547954741865, -1.32047313229652, -1.66639182067291, -0.148538371524439, -1.68533218467757, 1.04102930892646, 0.682605683525256, 3.25695951166719, -2.1988419377994, -0.404377490884628, -0.169701059508333, 1.49329651567534, 1.51264727973354, -2.74193258577351, 1.63059880130779, -0.856905261795034, -0.70478471721872, 0.263513612781986, 2.10036995898208, 0.818927439813178, 0.512135540197413, 0.916380125290656), x = c(0.984779968314556, -1.22473787596427, 0.709726218065825, -0.109219992578064, 1.78260789538833, -0.243444679602975, -1.52710702225461, 0.491834371466622, 0.354503660926992, -0.0176263476303775, -1.05655032211723, -0.838914666078269, -0.0126257164904259, 1.03811014600433, -0.364457713905061, -0.871449472185395, -2.7042030254467, 0.494249836540647, 0.427340324999113, 1.30919086010968, 1.4667226423107, -0.143056066294616, 1.29851372621074, 0.00131354755592194, -0.676410075685581, -0.848196596885468, -0.346941100407436, 0.227479443027071, -0.0274014036111113, 0.200877790585033, 0.198942671822796, 0.71459935608369, -0.273181774889849, 1.63534745793173, 0.437693886479643, -1.19353585074908, -0.276649804199181, 0.515883050535119, -0.411055332086343, 0.344995049472574, 0.434395860831138, 1.30347768300503, -0.651695910733076, -0.0168808623279884, -0.567692455293591, -1.12713286976328, -1.84897031117903, 0.19552905518189, 0.601565225195587, 0.639158159789933, -1.38999281746208, -1.12967785339758, -1.14115419483757, -0.688671499600886, 0.170197818152129, 0.59448342725741, -0.815032650724957, -2.86434683706673, 0.95382348170826, 0.615284770613444, -0.700870700550263, -1.07366134146979, -0.299991196799737, 0.108106562802571, 0.723200763587674, 1.39009509607427, -0.848883398378404, 0.290722844643498, 1.33417603370242, -0.901342155259083, -0.222763412932851, -1.7714680282034, 0.287422250114445, -0.641191762323999, -0.924937642238947, -0.779977469185323, 0.444503373594371, -2.16246900261166, -0.425510899920945, -1.01371765920455, -0.962119028303747, 0.474634627277364, 0.351754269604537, -0.107020356246981, 0.537517256600346, -0.60210489844813, -2.02329764533368, 1.15442128059814, -0.230692997694109, -0.365088768214911, 0.157517929375723, 0.765932222984396, 0.426086966202313, 0.927265399965311, 0.0461345928404875, -0.504285643091111, -0.300449408355562, 0.822915978645871, -0.849268796129039, -0.953610095681196)), class = \"data.frame\", row.names = c(NA, -100L))))), class = c(\"fit_out\", \"list\"), args = list(model = NULL,     fit_function = \"lm\", arg_data_name = \"data\", arg_model_name = \"model\",     arg_group_name = \"group\", parallel = FALSE, progress = TRUE,     ncores = 1)), R = 40, parallel = FALSE, progress = TRUE,     ncores = 1): manymome 0.2.7.1 or later is required. If not available from CRAN, can be installed from GitHub: remotes::install_github('sfcheung/manymome')  test_out <- power4test(object = sim_only,                        test_fun = test_indirect_effect,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         boot_ci = TRUE,                                         mc_ci = FALSE)) #> Error: object 'sim_only' not found  out <- power4test_by_n(test_out,                        n = c(100, 110, 120)) #> Error: object 'test_out' not found out_reject <- get_rejection_rates_by_n(out) #> Error: object 'out' not found out_reject #> Error: object 'out_reject' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":null,"dir":"Reference","previous_headings":"","what":"Power By Effect Sizes — power4test_by_pop_es","title":"Power By Effect Sizes — power4test_by_pop_es","text":"Estimate power range effect sizes. function get_rejection_rates_by_pop_es() used extract rejection rates form get_rejection_rates_by_pop_es object, effect sizes added output.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power By Effect Sizes — power4test_by_pop_es","text":"","code":"power4test_by_pop_es(   object,   pop_es_name = NULL,   pop_es_values = NULL,   progress = TRUE,   ... )  get_rejection_rates_by_pop_es(object_by_es)"},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power By Effect Sizes — power4test_by_pop_es","text":"object power4test object. pop_es_name name parameter. See help page ptable_pop() names argument pop_es. pop_es_values numeric vector population values parameter specified pop_es_names. progress Logical. Whether progress simulation displayed. ... Arguments passed power4test(). object_by_es power4test_by_pop_es object, output power4test_by_pop_es().","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power By Effect Sizes — power4test_by_pop_es","text":"function power4test_by_pop_es() returns power4test_by_pop_es object, list power4test objects, one effect size. function get_rejection_rates_by_pop_es() returns data frame similar output get_rejection_rates(), column added effect size (pop_es_name pop_es_values) test.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power By Effect Sizes — power4test_by_pop_es","text":"function regenerates datasets set effect sizes stored tests . Optionally, can also run object stored tests. case, additional arguments must set instruct power4test() tests conducted. usually used examine power range effect sizes.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/power4test_by_pop_es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power By Effect Sizes — power4test_by_pop_es","text":"","code":"model_simple_med <- \" m ~ x y ~ m + x \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 2,                        model = model_simple_med,                        pop_es = model_simple_med_es,                        n = 100,                        R = 40,                        ci_type = \"boot\",                        fit_model_args = list(fit_function = \"lm\"),                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate bootstrap estimates: #> Error in (function (fit_all, R = 100, ..., iseed = NULL, parallel = FALSE,     progress = FALSE, ncores = max(1, parallel::detectCores(logical = FALSE) -         1), compute_implied_stats = FALSE) {    manymome_implied <- (utils::packageVersion(\"manymome\") >=         \"0.2.7.1\")    if (isFALSE(manymome_implied)) {        stop(\"manymome 0.2.7.1 or later is required. \", \"If not available from CRAN, can be installed from \",             \"GitHub: remotes::install_github('sfcheung/manymome')\")    }    out <- do_FUN(X = fit_all, FUN = gen_boot_i, R = R, ...,         compute_implied_stats = compute_implied_stats, iseed = iseed,         parallel = parallel, progress = progress, ncores = ncores)    class(out) <- c(\"boot_list\", class(out))    return(out)})(fit_all = structure(list(structure(list(structure(list(coefficients = c(`(Intercept)` = -0.162163556101855, x = 0.381643498727352), residuals = c(`1` = -1.02891939623224, `2` = 0.369927544884584, `3` = 1.18150850103973, `4` = -2.13269977299452, `5` = 0.54607568938771, `6` = 0.582823301857471, `7` = -0.536528599212876, `8` = -0.450107194088952, `9` = -0.37895613292409, `10` = -0.595890907128218, `11` = -0.327180970112896, `12` = -0.757559806722447, `13` = -0.700269466468762, `14` = 0.354861059446031, `15` = 1.11140598308799, `16` = 0.0225036595731381, `17` = -0.312920142056316, `18` = -0.657573174165112, `19` = -0.611568833816399, `20` = 2.4153259072552, `21` = 0.216990593320716, `22` = -0.359823025499872, `23` = -0.443707478345026, `24` = 0.504775492856876, `25` = -0.52309301110588, `26` = -1.16546994078507, `27` = 0.472116755960512, `28` = -0.869648338336119, `29` = 0.203592845087206, `30` = -0.745900371211713, `31` = 1.24017300106319, `32` = -0.269095512262804, `33` = -0.438384627936607, `34` = -0.325545820700387, `35` = -1.41794992536253, `36` = -0.86369992141114, `37` = -1.65349587362388, `38` = -1.09625356029597, `39` = -0.120984831451399, `40` = -0.33079296165556, `41` = 1.54006686383876, `42` = -0.891007962456657, `43` = -0.564176338388539, `44` = -0.163596562496548, `45` = -0.845069013317451, `46` = -0.782285892583889, `47` = -1.00496331000191, `48` = -1.06517708094993, `49` = -0.359120245332755, `50` = -0.333685137504015, `51` = -1.5963529997563, `52` = -0.47965371138881, `53` = -0.932568132746879, `54` = -0.860194348037319, `55` = 0.100107651626744, `56` = 0.729533287991846, `57` = 1.61349627537539, `58` = -0.475644807250584, `59` = 1.67303409894382, `60` = -0.97538125130945, `61` = 0.708841034164776, `62` = 2.62222957991707, `63` = 0.116053521744209, `64` = -0.332667853341695, `65` = 0.127264915571469, `66` = 1.91181477655679, `67` = -0.904515053651882, `68` = 1.56396083664396, `69` = 1.39906006439994, `70` = 0.428716263726975, `71` = 0.193608648596948, `72` = -0.421326216738374, `73` = -0.242224804841652, `74` = 0.703139844307859, `75` = 1.96975565691792, `76` = 0.0689899901416316, `77` = -1.23049910097789, `78` = -0.60863735961429, `79` = 0.409033380643567, `80` = -0.166340113604968, `81` = 0.0751714260964351, `82` = -0.0383865814028183, `83` = -1.08969933863606, `84` = -0.0700507542105684, `85` = 1.03948148465988, `86` = 0.801563125080648, `87` = 0.755940661139373, `88` = -0.201953297139293, `89` = 0.1061755903921, `90` = -0.987829219240167, `91` = 0.0309982288928266, `92` = 0.390644056580291, `93` = 1.93375063135342, `94` = 1.16820885033987, `95` = -0.445798065334064, `96` = 0.353578078790682, `97` = -0.824249421994278, `98` = 1.0298553597236, `99` = 1.06139576797319, `100` = 2.15952328320349), effects = c(`(Intercept)` = 1.03160069776609, x = -3.64599888184533, 1.27500732436696, -2.06292416578536, 0.633765165223547, 0.649848702490068, -0.519323799026206, -0.399285002967382, -0.278419354151304, -0.442535470506302, -0.244389599216476, -0.637090243642917, -0.666996366181346, 0.530899668081812, 1.23259000364195, 0.105113127895999, -0.203892667718701, -0.527622242608082, -0.49549720757565, 2.48837978974518, 0.277813307975264, -0.288181639733472, -0.446348930325404, 0.552782743621529, -0.434299780019235, -1.03305013068298, 0.439746133535828, -0.798799056305882, 0.337143068112276, -0.652446587473343, 1.35715043251755, -0.154406007815099, -0.293360807870069, -0.228885162417906, -1.33060482872912, -0.712043855290592, -1.40258503897119, -0.982477105486927, -0.0203031896822697, -0.256115430190999, 1.63938477933101, -0.808002071872941, -0.411588782295118, -0.0943017438591665, -0.776129360471778, -0.691832345454908, -0.965418039820098, -0.981759990237675, -0.269252075798816, -0.243986396229167, -1.51443062227054, -0.426426185603601, -0.851348391565509, -0.788690451490272, 0.254472602963892, 0.848633581803617, 1.64753019855426, -0.317249539968302, 1.76319216152499, -0.891988763940383, 0.76595108971, 2.74033434784101, 0.210790421280995, -0.149438228370686, 0.213715093059015, 2.04454745854697, -0.79148581619093, 1.72069211309991, 1.4833765563138, 0.500064487196743, 0.309675339771844, -0.403317815712275, -0.17105983324784, 0.76150097325963, 1.97743196182253, 0.201011213593256, -1.16569107873004, -0.552023543014061, 0.511358300341947, -0.0789900496187106, 0.223801413661506, 0.0420054043067462, -0.95538246921071, -0.00547588425801425, 1.17888449052902, 0.888897297641519, 0.896959467332088, -0.0885963788844137, 0.279717557723794, -0.891702160511232, 0.0876644088421379, 0.484247235641394, 2.11711720051178, 1.29882202589105, -0.420009554576227, 0.372286623206826, -0.66810422824765, 1.14878094743175, 1.14715391870612, 2.24686856483505), rank = 2L, fitted.values = c(`1` = 0.0230201053765451, `2` = 0.103753718353641, `3` = -0.0913633762961261, `4` = 0.105266834446051, `5` = -0.0432125178365934, `6` = 0.128061960370017, `7` = 0.54100070848192, `8` = 0.2623624904919, `9` = -0.149697569078722, `10` = -0.587485758180196, `11` = -0.00261450609647368, `12` = -0.314910732395471, `13` = 0.407818376906248, `14` = -0.775495548724141, `15` = -0.320832523229562, `16` = -0.00110680405492035, `17` = -0.220072818789834, `18` = -0.393497188488777, `19` = -0.27845837099825, `20` = 0.0780948036332267, `21` = 0.179473010413194, `22` = 0.0898023026100778, `23` = 0.705496648940698, `24` = 0.285694163265626, `25` = -0.0523610087702852, `26` = -0.413960523063491, `27` = 0.951907296660635, `28` = 0.0963676655775686, `29` = -0.423329966488225, `30` = -0.0909900650298809, `31` = -0.28596615026215, `32` = -0.267002635060713, `33` = -0.518429037078242, `34` = -0.117570289831362, `35` = -0.0403581259695307, `36` = -0.573400501857861, `37` = -1.39607504802844, `38` = -0.259434810277849, `39` = -0.150898268063125, `40` = 0.0646371662515893, `41` = -0.139595003620268, `42` = -0.00439255554438833, `43` = -0.581121169610443, `44` = 0.109251857291161, `45` = 0.112195653955342, `46` = -0.0661225616591611, `47` = 0.355831408444302, `48` = -0.00780079359818342, `49` = -0.0612706512224019, `50` = -0.059866342711915, `51` = 0.00458815802045431, `52` = 0.242425840272847, `53` = 0.0104119689202729, `54` = 0.0909418839400932, `55` = -0.595853135108152, `56` = -0.303561524794687, `57` = 0.401512285660445, `58` = -0.629258465553452, `59` = -0.0636734338250793, `60` = -0.0075968684418144, `61` = 0.210245437703276, `62` = -0.295310094459526, `63` = -0.101625188387245, `64` = -0.835098388845349, `65` = -0.0329405760313956, `66` = -0.416553766112156, `67` = -0.253241488769728, `68` = -0.615466454165699, `69` = -0.0152554931183555, `70` = 0.0922321824325046, `71` = -0.278417466635451, `72` = 0.534340051612166, `73` = 0.0937510681859702, `74` = 0.199875898161973, `75` = 0.619977775758168, `76` = -0.410656832000261, `77` = 0.146440732325572, `78` = 0.214358521184343, `79` = -0.164518600311842, `80` = -0.0403992979435084, `81` = -0.548318807153218, `82` = 0.0172728318005036, `83` = -0.429684325968855, `84` = 0.148373218407242, `85` = -0.471840839479934, `86` = -0.0402675816404924, `87` = -0.48523342320718, `88` = -0.255957475642901, `89` = -0.754802102130438, `90` = -0.113147542420406, `91` = 0.213924506828359, `92` = -0.0922283302653705, `93` = -0.836233452669913, `94` = -0.39898620715658, `95` = 0.469854502581412, `96` = 0.528536903267979, `97` = -0.610608699379285, `98` = -0.302113470795557, `99` = -0.0272047025342144, `100` = -0.0403596593292304), assign = 0:1,     qr = structure(list(qr = structure(c(-10, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,     -1.54603672070928, -9.55341540994009, 8.934957939301e-05,     0.0540197585329628, 0.0132958425103953, 0.0602718520367406,     0.173529908743249, 0.0971068962795162, -0.0159101596560765,     -0.135983753556878, 0.0244307915478926, -0.0612237125864962,     0.13700155646129, -0.187549811758407, -0.0628479014647698,     0.0248443139022357, -0.0352122088315533, -0.0827778761065715,     -0.0512258045841844, 0.0465671970557438, 0.0743725283422573,     0.0497782509688831, 0.218646746622124, 0.103506150237026,     0.0107866560761248, -0.0883904215948894, 0.286230598319638,     0.0515789544743565, -0.0909602093892271, 0.000191738877454484,     -0.0532849876797372, -0.048083802540635, -0.117043341521699,     -0.00709850603562899, 0.0140787258736557, -0.132120544384635,     -0.357758174244302, -0.0460081505648358, -0.0162394792810444,     0.0428761269765269, -0.0131392960914282, 0.0239431201290207,     -0.134238117100037, 0.0551127437406525, 0.055920148449096,     0.00701223009991309, 0.12274292113345, 0.0230083315664773,     0.00834297939358907, 0.00872814366708335, 0.0264062897173497,     0.0916388062265203, 0.0280036053196163, 0.0500908076555266,     -0.13827870130621, -0.0581109284171713, 0.135271964256201,     -0.147440890195416, 0.00768396037560704, 0.0230642627839509,     0.0828125822992972, -0.0558477817178545, -0.00272519107837195,     -0.203897277035479, 0.0161131614778655, -0.0891016788203313,     -0.0443094880833525, -0.143658110267416, 0.0209637068252873,     0.0504447020296681, -0.0512145856112433, 0.171703068668525,     0.0508612917771386, 0.0799684948825576, 0.195191206465939,     -0.0874843074762922, 0.0653126577394162, 0.083940691115114,     -0.0199751722118728, 0.0140674335021241, -0.125241306206715,     0.029885356549545, -0.092703040280446, 0.0658426869973222,     -0.104265444679688, 0.0141035597619734, -0.107938672281027,     -0.045054410657711, -0.18187415269643, -0.00588546468419628,     0.0838216525827256, -0.000147884165672395, -0.204208594691174,     -0.0842833671518745, 0.154016406900237, 0.170111420252755,     -0.142325758024907, -0.057713765925888, 0.0176863582020175,     0.0140783053140917), dim = c(100L, 2L), dimnames = list(c(\"1\",     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",     \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",     \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\",     \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\",     \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\",     \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\",     \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\",     \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",     \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\",     \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\",     \"x\")), assign = 0:1), qraux = c(1.1, 1.05360475124924), pivot = 1:2,         tol = 1e-07, rank = 2L), class = \"qr\"), df.residual = 98L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = m ~         x, data = structure(list(m = c(-1.0058992908557, 0.473681263238225,     1.0901451247436, -2.02743293854847, 0.502863171551116, 0.710885262227487,     0.00447210926904418, -0.187744703597052, -0.528653702002812,     -1.18337666530841, -0.32979547620937, -1.07247053911792,     -0.292451089562514, -0.42063448927811, 0.790573459858427,     0.0213968555182177, -0.532992960846149, -1.05107036265389,     -0.890027204814649, 2.49342071088843, 0.39646360373391, -0.270020722889794,     0.261789170595672, 0.790469656122502, -0.575454019876166,     -1.57943046384856, 1.42402405262115, -0.773280672758551,     -0.219737121401019, -0.836890436241594, 0.95420685080104,     -0.536098147323517, -0.956813665014848, -0.443116110531749,     -1.45830805133207, -1.437100423269, -3.04957092165232, -1.35568837057382,     -0.271883099514524, -0.26615579540397, 1.40047186021849,     -0.895400518001046, -1.14529750799898, -0.0543447052053874,     -0.732873359362109, -0.84840845424305, -0.64913190155761,     -1.07297787454812, -0.420390896555157, -0.39355148021593,     -1.59176484173585, -0.237227871115963, -0.922156163826606,     -0.769252464097226, -0.495745483481408, 0.425971763197159,     2.01500856103583, -1.10490327280404, 1.60936066511874, -0.982978119751264,     0.919086471868052, 2.32691948545754, 0.0144283333569641,     -1.16776624218704, 0.0943243395400734, 1.49526101044463,     -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479,     -0.0848088180385032, 0.113013834873792, -0.148473736655682,     0.903015742469832, 2.58973343267609, -0.341666841858629,     -1.08405836865232, -0.394278838429946, 0.244514780331725,     -0.206739411548476, -0.473147381056783, -0.0211137496023147,     -1.51938366460491, 0.0783224641966739, 0.567640645179946,     0.761295543440156, 0.270707237932193, -0.457910772782194,     -0.648626511738338, -1.10097676166057, 0.244922735721186,     0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475,     0.882114982058661, -1.43485812137356, 0.727741888928042,     1.03419106543897, 2.11916362387426), y = c(-0.1439617341926,     -0.174277626103084, 0.602224604404354, -1.44887499366459,     -0.463904174168501, 0.500059589539494, -0.773951880206804,     0.0517804664566934, 0.0430846805746435, -0.636812687531766,     -0.334582095393778, -1.0983461632776, -1.10731215946008,     0.525175789638999, 0.414653245603842, 0.730487316463909,     -1.34408136930753, -0.379154013094857, 0.137965520381119,     1.22395434592039, 0.0324813218120451, -0.812161380874894,     1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755,     0.165195533219977, -1.69718629157368, -0.660747173763155,     -0.222462342062906, 1.35498501787693, -0.0491610358843584,     -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034,     -1.79855196419749, -2.36507475508984, 0.660851637576232,     -0.67250052216282, 0.410951705416395, 0.760533257966452,     -0.0212725401002647, -0.121076956771822, 0.0784949379362682,     -0.0784246990073527, 1.11550997554267, -0.297558241032477,     0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841,     0.958116411077828, -1.14291155805925, -0.142425489752799,     1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468,     -0.829348978252946, -0.274283453294785, 0.937739407943759,     -0.351683826842485, -0.742409762101558, 0.399683091299982,     1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831,     1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296,     -1.12659429205047, 2.51705580505852, -0.896201086603481,     -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923,     -2.60274520612392, -0.0969780594504372, 0.0855764450401389,     0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257,     -0.669534565586153, 0.285524667523424, -0.722321914484456,     -0.343521604348032, -2.32395167916648, -0.135095644737079,     0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562,     -0.472625773108594, 0.657958641995046, -0.740224694435862    ), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057,     0.700733515544461, 0.311681028661359, 0.760462361967838,     1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736,     0.418057822385083, -0.400235237343163, 1.49349310261748,     -1.60708093984972, -0.415751788401515, 0.42200837321742,     -0.151736536534977, -0.60615111526422, -0.304721068966714,     0.629536099884472, 0.895171980275539, 0.660212631820405,     2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306,     2.91914013071762, 0.677415500438328, -0.684320344136007,     0.186492083080971, -0.324393300483657, -0.274704218225806,     -0.933503340589868, 0.116845344986082, 0.319160238648117,     -1.07754212275943, -3.23315213292314, -0.254874652654534,     0.0295178303214797, 0.594273774110513, 0.0591351681787969,     0.413398894737046, -1.09777217457042, 0.711175257270441,     0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607,     0.264364269837939, 0.268043904143697, 0.436930577039483,     1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084,     -0.370497517092117, 1.47696958979247, -1.22390375051376,     0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909,     0.158625439491262, -1.76325506654115, 0.338596047099905,     -0.666565029559273, -0.238646624327644, -1.18776528245719,     0.384935321768578, 0.66657951565448, -0.304613889457735,     1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091,     -0.651113609237535, 0.808619272846293, 0.986580613954563,     -0.00617079609070003, 0.319052357931912, -1.01182190274184,     0.470167547726389, -0.700970331629097, 0.813682862526491,     -0.811430783992772, 0.31939748709946, -0.846522653163624,     -0.245763179128733, -1.55285901110546, 0.128434032925753,     0.985443389404868, 0.183247523067191, -1.76622921343046,     -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214,     -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = m ~ x, model = structure(list(        m = c(-1.0058992908557, 0.473681263238225, 1.0901451247436,         -2.02743293854847, 0.502863171551116, 0.710885262227487,         0.00447210926904418, -0.187744703597052, -0.528653702002812,         -1.18337666530841, -0.32979547620937, -1.07247053911792,         -0.292451089562514, -0.42063448927811, 0.790573459858427,         0.0213968555182177, -0.532992960846149, -1.05107036265389,         -0.890027204814649, 2.49342071088843, 0.39646360373391,         -0.270020722889794, 0.261789170595672, 0.790469656122502,         -0.575454019876166, -1.57943046384856, 1.42402405262115,         -0.773280672758551, -0.219737121401019, -0.836890436241594,         0.95420685080104, -0.536098147323517, -0.956813665014848,         -0.443116110531749, -1.45830805133207, -1.437100423269,         -3.04957092165232, -1.35568837057382, -0.271883099514524,         -0.26615579540397, 1.40047186021849, -0.895400518001046,         -1.14529750799898, -0.0543447052053874, -0.732873359362109,         -0.84840845424305, -0.64913190155761, -1.07297787454812,         -0.420390896555157, -0.39355148021593, -1.59176484173585,         -0.237227871115963, -0.922156163826606, -0.769252464097226,         -0.495745483481408, 0.425971763197159, 2.01500856103583,         -1.10490327280404, 1.60936066511874, -0.982978119751264,         0.919086471868052, 2.32691948545754, 0.0144283333569641,         -1.16776624218704, 0.0943243395400734, 1.49526101044463,         -1.15775654242161, 0.948494382478262, 1.38380457128159,         0.520948446159479, -0.0848088180385032, 0.113013834873792,         -0.148473736655682, 0.903015742469832, 2.58973343267609,         -0.341666841858629, -1.08405836865232, -0.394278838429946,         0.244514780331725, -0.206739411548476, -0.473147381056783,         -0.0211137496023147, -1.51938366460491, 0.0783224641966739,         0.567640645179946, 0.761295543440156, 0.270707237932193,         -0.457910772782194, -0.648626511738338, -1.10097676166057,         0.244922735721186, 0.298415726314921, 1.09751717868351,         0.769222643183293, 0.0240564372473475, 0.882114982058661,         -1.43485812137356, 0.727741888928042, 1.03419106543897,         2.11916362387426), x = c(0.485226820569252, 0.696768778564913,         0.185513915583057, 0.700733515544461, 0.311681028661359,         0.760462361967838, 1.84246362620766, 1.1123628412626,         0.0326639575014441, -1.11444896479736, 0.418057822385083,         -0.400235237343163, 1.49349310261748, -1.60708093984972,         -0.415751788401515, 0.42200837321742, -0.151736536534977,         -0.60615111526422, -0.304721068966714, 0.629536099884472,         0.895171980275539, 0.660212631820405, 2.27348352044748,         1.17349757263239, 0.287709728313787, -0.659770093821306,         2.91914013071762, 0.677415500438328, -0.684320344136007,         0.186492083080971, -0.324393300483657, -0.274704218225806,         -0.933503340589868, 0.116845344986082, 0.319160238648117,         -1.07754212275943, -3.23315213292314, -0.254874652654534,         0.0295178303214797, 0.594273774110513, 0.0591351681787969,         0.413398894737046, -1.09777217457042, 0.711175257270441,         0.718888729854143, 0.251651069028968, 1.35727443615177,         0.404468471278607, 0.264364269837939, 0.268043904143697,         0.436930577039483, 1.06012390548736, 0.452190396528715,         0.663198615687065, -1.13637355399084, -0.370497517092117,         1.47696958979247, -1.22390375051376, 0.258068387396106,         0.405002805433516, 0.97580332180945, -0.348876736539909,         0.158625439491262, -1.76325506654115, 0.338596047099905,         -0.666565029559273, -0.238646624327644, -1.18776528245719,         0.384935321768578, 0.66657951565448, -0.304613889457735,         1.8250110640863, 0.670559370567588, 0.948632573255153,         2.04940300167091, -0.651113609237535, 0.808619272846293,         0.986580613954563, -0.00617079609070003, 0.319052357931912,         -1.01182190274184, 0.470167547726389, -0.700970331629097,         0.813682862526491, -0.811430783992772, 0.31939748709946,         -0.846522653163624, -0.245763179128733, -1.55285901110546,         0.128434032925753, 0.985443389404868, 0.183247523067191,         -1.76622921343046, -0.620533696615944, 1.65604303699874,         1.80980538558388, -1.17503676801214, -0.366703258827641,         0.353625448927287, 0.319156220867898)), terms = m ~ x, row.names = c(NA,     100L), class = \"data.frame\")), class = \"lm\"), structure(list(    coefficients = c(`(Intercept)` = 0.0173368017594537, m = 0.469027749026988,     x = 0.0982236710940749), residuals = c(`1` = 0.26283538455622,     `2` = -0.482223271849802, `3` = 0.0553576308460588, `4` = -0.584118106308919,     `5` = -0.747712212194643, `6` = 0.0746024684996695, `7` = -0.974359766533538,     `8` = 0.013240778559656, `9` = 0.2704927608621, `10` = 0.0103522728588377,     `11` = -0.238298841351725, `12` = -0.573351947863765, `13` = -1.13417766027431,     `14` = 0.862981625206129, `15` = 0.0673522204472366, `16` = 0.661663584074636,     `17` = -1.09652556273652, `18` = 0.156028739189242, `19` = 0.568006997122283,     `20` = -0.024701306061237, `21` = -0.258734989741068, `22` = -0.767699479186789,     `23` = 1.54988206709068, `24` = 0.54183390722267, `25` = 1.51639091784314,     `26` = 0.0678834052165448, `27` = -0.806776724577784, `28` = -1.4183712373322,     `29` = -0.507804711688819, `30` = 0.134407756640055, `31` = 0.921961825631964,     `32` = 0.211929526432042, `33` = -0.970216360478105, `34` = 0.536585512497517,     `35` = -1.52288230341222, `36` = -0.272844234652265, `37` = -0.06798330937485,     `38` = -1.72152136796443, `39` = 0.768136204323648, `40` = -0.623374622041528,     `41` = -0.269053733826263, `42` = 1.12255858857532, `43` = 0.606394183294495,     `44` = -0.182778828337633, `45` = 0.33428418808584, `46` = 0.277447514947504,     `47` = 1.26931757059142, `48` = 0.148632976372341, `49` = 0.382120869734528,     `50` = 0.245134606251191, `51` = -0.43625165321347, `52` = -0.0442726097766103,     `53` = 1.32888063830879, `54` = -0.86458941084701, `55` = 0.184374878902528,     `56` = 1.21188788442317, `57` = -0.303188647636594, `58` = -0.843598095372872,     `59` = -0.746094402012601, `60` = -0.425422627515763, `61` = -0.818544298649585,     `62` = -0.136719248424613, `63` = -0.391368690314309, `64` = -0.0388384061874185,     `65` = 0.304847410123495, `66` = 0.63539541882084, `67` = 1.42361442640392,     `68` = 0.0692164216761421, `69` = -0.29014253462797, `70` = 1.2072525772318,     `71` = 1.48594932766722, `72` = -0.155645360317152, `73` = -0.37588985978219,     `74` = -1.66064870870102, `75` = 1.08376227441573, `76` = -0.689331889610198,     `77` = -1.10354521089326, `78` = 2.50952450590145, `79` = 0.194376913004927,     `80` = -0.083881281819924, `81` = -2.2987778950076, `82` = -0.150593509327382,     `83` = 0.849724622699344, `84` = 0.263587098012147, `85` = 0.870040185597946,     `86` = 1.69283232125337, `87` = 1.0866738463285, `88` = -0.44795874665859,     `89` = 0.724939211286123, `90` = -0.235885326198613, `91` = -0.572527832891059,     `92` = -2.49925298174823, `93` = -0.493712940996171, `94` = 0.489898719108126,     `95` = 1.69831690912372, `96` = 0.265832811419256, `97` = 0.590756629481588,     `98` = -0.795274774620404, `99` = 0.120823142963001, `100` = -1.78285673618709    ), effects = c(`(Intercept)` = 0.158623933219053, m = -5.1094562155273,     x = 0.876084087117251, -0.682558552992273, -0.740659231358059,     0.0949934167127173, -0.973975511091415, -0.00176016106641896,     0.230293185505339, -0.0692518609718502, -0.266171258689074,     -0.641236374836041, -1.15000197946638, 0.811535608018228,     0.0797711168750406, 0.64899542708517, -1.13870184294982,     0.0870703687440155, 0.508928037548435, 0.071396405477279,     -0.250614913603245, -0.790640844334237, 1.56556070215087,     0.569669495752103, 1.4766451322183, -0.0244120113554683,     -0.734642930932198, -1.46287850598974, -0.541621210236563,     0.0823899147802988, 0.942333574526576, 0.168425942854134,     -1.03828078022056, 0.500896649908742, -1.60044817209318,     -0.363047078754715, -0.248736065806844, -1.8002258067372,     0.738994509328217, -0.646788917046678, -0.225688887198537,     1.07021581627094, 0.528596285899469, -0.195911905320262,     0.291924305787828, 0.225564543649497, 1.23676852114008, 0.0885350291346339,     0.348844815177458, 0.213053292946001, -0.518437957317708,     -0.0619173327082653, 1.2757588581328, -0.909060677509101,     0.134252738277095, 1.20900090478045, -0.219527722360395,     -0.92087551318629, -0.69177854417807, -0.481628831038727,     -0.787072821002821, -0.0573057066994652, -0.406893495358445,     -0.124064064440853, 0.29451917532158, 0.675811866759109,     1.35361496401876, 0.0809638105167902, -0.244336069973944,     1.21853028816934, 1.46164404326752, -0.150743177394335, -0.393481928256776,     -1.63013488065557, 1.19779674804118, -0.728091594650031,     -1.16020000910437, 2.48438405513989, 0.187189095950883, -0.107400326066066,     -2.34671557820162, -0.164630139416014, 0.759622489646881,     0.257177809655108, 0.868992483360778, 1.71112034884744, 1.0724628291245,     -0.487805051028562, 0.664173701572422, -0.299870862002188,     -0.570075970897387, -2.50227512672634, -0.481143222138844,     0.499408512096018, 1.69773797653045, 0.303800391565757, 0.499704584416232,     -0.785093264210686, 0.151228048102168, -1.7059327322752),     rank = 3L, fitted.values = c(`1` = -0.40679711874882, `2` = 0.307945645746718,     `3` = 0.546866973558295, `4` = -0.864756887355671, `5` = 0.283808038026142,     `6` = 0.425457121039825, `7` = 0.200407886326734, `8` = 0.0385396878970374,     `9` = -0.227408080287456, `10` = -0.647164960390603, `11` = -0.0962832540420531,     `12` = -0.524994215413838, `13` = 0.0268655008142267, `14` = -0.33780583556713,     `15` = 0.347301025156606, `16` = 0.0688237323892725, `17` = -0.247555806571011,     `18` = -0.535182752284099, `19` = -0.430041476741165, `20` = 1.24865565198162,     `21` = 0.291216311553113, `22` = -0.0444619016881054, `23` = 0.363433084713817,     `24` = 0.503354244848667, `25` = -0.224307196127137, `26` = -0.7882649541373,     `27` = 0.971972257797761, `28` = -0.278815054241482, `29` = -0.152942462074336,     `30` = -0.356870098702961, `31` = 0.433023192244968, `32` = -0.261090562316401,     `33` = -0.523127482872042, `34` = -0.17901997138606, `35` = -0.635301050637479,     `36` = -0.762543317948071, `37` = -1.73056865482264, `38` = -0.643553387125407,     `39` = -0.107284566747416, `40` = -0.0491259001212924, `41` = 0.680005439242658,     `42` = -0.36202533060887, `43` = -0.62766672339476, `44` = 0.0617018715658115,     `45` = -0.255789250149572, `46` = -0.355872213954857, `47` = -0.153807595048752,     `48` = -0.446191217404818, `49` = -0.153871365073662, `50` = -0.140921506853081,     `51` = -0.68632815365014, `52` = 0.0101996091750262, `53` = -0.370764227230966,     `54` = -0.27832214721224, `55` = -0.326800368655327, `56` = 0.180737752740847,     `57` = 1.10750510661593, `58` = -0.621109812617643, `59` = 0.797520036296048,     `60` = -0.403926350737183, `61` = 0.544260845354799, `62` = 1.07445865636837,     `63` = 0.0396848634718244, `64` = -0.70357135591414, `65` = 0.0948356811764866,     `66` = 0.653183243469876, `67` = -0.549123890789492, `68` = 0.34554032049694,     `69` = 0.704189305358801, `70` = 0.327149965924435, `71` = -0.0523611817515683,     `72` = 0.249602712841076, `73` = 0.0135633023298941, `74` = 0.534054416650553,     `75` = 1.43329353064279, `76` = -0.206869196993283, `77` = -0.41169110120703,     `78` = -0.0706853445854567, `79` = 0.13141490053667, `80` = -0.048291225206999,     `81` = -0.30396731111632, `82` = 0.0536154498769452, `83` = -0.764148177659205,     `84` = 0.133995128703554, `85` = 0.203874305381917, `86` = 0.405777930564599,     `87` = 0.061157445554076, `88` = -0.221575818927562, `89` = -0.439414543762699,     `90` = -0.486436588285842, `91` = 0.229006228543027, `92` = 0.17530130258175,     `93` = 0.358617296259092, `94` = 0.317172468873109, `95` = 0.191282564954983,     `96` = 0.608838935115286, `97` = -0.77106789810615, `98` = 0.32264900151181,     `99` = 0.537135499032045, `100` = 1.04263204175123), assign = 0:2,     qr = structure(list(qr = structure(cdim = c(100L, 3L), dimnames = list(c(\"1\", \"2\", \"3\", \"4\",     \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",     \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\",     \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\",     \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\",     \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\",     \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\",     \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\",     \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\",     \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\",     \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\", \"m\", \"x\"    )), assign = 0:2), qraux = c(1.1, 1.06474514597053, 1.05182700602575    ), pivot = 1:3, tol = 1e-07, rank = 3L), class = \"qr\"), df.residual = 97L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = y ~         m + x, data = structure(list(m = c(-1.0058992908557,     0.473681263238225, 1.0901451247436, -2.02743293854847, 0.502863171551116,     0.710885262227487, 0.00447210926904418, -0.187744703597052,     -0.528653702002812, -1.18337666530841, -0.32979547620937,     -1.07247053911792, -0.292451089562514, -0.42063448927811,     0.790573459858427, 0.0213968555182177, -0.532992960846149,     -1.05107036265389, -0.890027204814649, 2.49342071088843,     0.39646360373391, -0.270020722889794, 0.261789170595672,     0.790469656122502, -0.575454019876166, -1.57943046384856,     1.42402405262115, -0.773280672758551, -0.219737121401019,     -0.836890436241594, 0.95420685080104, -0.536098147323517,     -0.956813665014848, -0.443116110531749, -1.45830805133207,     -1.437100423269, -3.04957092165232, -1.35568837057382, -0.271883099514524,     -0.26615579540397, 1.40047186021849, -0.895400518001046,     -1.14529750799898, -0.0543447052053874, -0.732873359362109,     -0.84840845424305, -0.64913190155761, -1.07297787454812,     -0.420390896555157, -0.39355148021593, -1.59176484173585,     -0.237227871115963, -0.922156163826606, -0.769252464097226,     -0.495745483481408, 0.425971763197159, 2.01500856103583,     -1.10490327280404, 1.60936066511874, -0.982978119751264,     0.919086471868052, 2.32691948545754, 0.0144283333569641,     -1.16776624218704, 0.0943243395400734, 1.49526101044463,     -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479,     -0.0848088180385032, 0.113013834873792, -0.148473736655682,     0.903015742469832, 2.58973343267609, -0.341666841858629,     -1.08405836865232, -0.394278838429946, 0.244514780331725,     -0.206739411548476, -0.473147381056783, -0.0211137496023147,     -1.51938366460491, 0.0783224641966739, 0.567640645179946,     0.761295543440156, 0.270707237932193, -0.457910772782194,     -0.648626511738338, -1.10097676166057, 0.244922735721186,     0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475,     0.882114982058661, -1.43485812137356, 0.727741888928042,     1.03419106543897, 2.11916362387426), y = c(-0.1439617341926,     -0.174277626103084, 0.602224604404354, -1.44887499366459,     -0.463904174168501, 0.500059589539494, -0.773951880206804,     0.0517804664566934, 0.0430846805746435, -0.636812687531766,     -0.334582095393778, -1.0983461632776, -1.10731215946008,     0.525175789638999, 0.414653245603842, 0.730487316463909,     -1.34408136930753, -0.379154013094857, 0.137965520381119,     1.22395434592039, 0.0324813218120451, -0.812161380874894,     1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755,     0.165195533219977, -1.69718629157368, -0.660747173763155,     -0.222462342062906, 1.35498501787693, -0.0491610358843584,     -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034,     -1.79855196419749, -2.36507475508984, 0.660851637576232,     -0.67250052216282, 0.410951705416395, 0.760533257966452,     -0.0212725401002647, -0.121076956771822, 0.0784949379362682,     -0.0784246990073527, 1.11550997554267, -0.297558241032477,     0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841,     0.958116411077828, -1.14291155805925, -0.142425489752799,     1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468,     -0.829348978252946, -0.274283453294785, 0.937739407943759,     -0.351683826842485, -0.742409762101558, 0.399683091299982,     1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831,     1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296,     -1.12659429205047, 2.51705580505852, -0.896201086603481,     -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923,     -2.60274520612392, -0.0969780594504372, 0.0855764450401389,     0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257,     -0.669534565586153, 0.285524667523424, -0.722321914484456,     -0.343521604348032, -2.32395167916648, -0.135095644737079,     0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562,     -0.472625773108594, 0.657958641995046, -0.740224694435862    ), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057,     0.700733515544461, 0.311681028661359, 0.760462361967838,     1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736,     0.418057822385083, -0.400235237343163, 1.49349310261748,     -1.60708093984972, -0.415751788401515, 0.42200837321742,     -0.151736536534977, -0.60615111526422, -0.304721068966714,     0.629536099884472, 0.895171980275539, 0.660212631820405,     2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306,     2.91914013071762, 0.677415500438328, -0.684320344136007,     0.186492083080971, -0.324393300483657, -0.274704218225806,     -0.933503340589868, 0.116845344986082, 0.319160238648117,     -1.07754212275943, -3.23315213292314, -0.254874652654534,     0.0295178303214797, 0.594273774110513, 0.0591351681787969,     0.413398894737046, -1.09777217457042, 0.711175257270441,     0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607,     0.264364269837939, 0.268043904143697, 0.436930577039483,     1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084,     -0.370497517092117, 1.47696958979247, -1.22390375051376,     0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909,     0.158625439491262, -1.76325506654115, 0.338596047099905,     -0.666565029559273, -0.238646624327644, -1.18776528245719,     0.384935321768578, 0.66657951565448, -0.304613889457735,     1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091,     -0.651113609237535, 0.808619272846293, 0.986580613954563,     -0.00617079609070003, 0.319052357931912, -1.01182190274184,     0.470167547726389, -0.700970331629097, 0.813682862526491,     -0.811430783992772, 0.31939748709946, -0.846522653163624,     -0.245763179128733, -1.55285901110546, 0.128434032925753,     0.985443389404868, 0.183247523067191, -1.76622921343046,     -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214,     -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = y ~ m + x, model = structure(list(        y = c(-0.1439617341926, -0.174277626103084, 0.602224604404354,         -1.44887499366459, -0.463904174168501, 0.500059589539494,         -0.773951880206804, 0.0517804664566934, 0.0430846805746435,         -0.636812687531766, -0.334582095393778, -1.0983461632776,         -1.10731215946008, 0.525175789638999, 0.414653245603842,         0.730487316463909, -1.34408136930753, -0.379154013094857,         0.137965520381119, 1.22395434592039, 0.0324813218120451,         -0.812161380874894, 1.9133151518045, 1.04518815207134,         1.292083721716, -0.720381548920755, 0.165195533219977,         -1.69718629157368, -0.660747173763155, -0.222462342062906,         1.35498501787693, -0.0491610358843584, -1.49334384335015,         0.357565541111457, -2.1581833540497, -1.03538755260034,         -1.79855196419749, -2.36507475508984, 0.660851637576232,         -0.67250052216282, 0.410951705416395, 0.760533257966452,         -0.0212725401002647, -0.121076956771822, 0.0784949379362682,         -0.0784246990073527, 1.11550997554267, -0.297558241032477,         0.228249504660866, 0.10421309939811, -1.12257980686361,         -0.0340730006015841, 0.958116411077828, -1.14291155805925,         -0.142425489752799, 1.39262563716402, 0.804316458979331,         -1.46470790799051, 0.0514256342834468, -0.829348978252946,         -0.274283453294785, 0.937739407943759, -0.351683826842485,         -0.742409762101558, 0.399683091299982, 1.28857866229072,         0.874490535614432, 0.414756742173082, 0.414046770730831,         1.53440254315624, 1.43358814591565, 0.0939573525239246,         -0.362326557452296, -1.12659429205047, 2.51705580505852,         -0.896201086603481, -1.51523631210029, 2.438839161316,         0.325791813541597, -0.132172507026923, -2.60274520612392,         -0.0969780594504372, 0.0855764450401389, 0.397582226715701,         1.07391449097986, 2.09861025181797, 1.14783129188257,         -0.669534565586153, 0.285524667523424, -0.722321914484456,         -0.343521604348032, -2.32395167916648, -0.135095644737079,         0.807071187981235, 1.8895994740787, 0.874671746534542,         -0.180311268624562, -0.472625773108594, 0.657958641995046,         -0.740224694435862), m = c(-1.0058992908557, 0.473681263238225,         1.0901451247436, -2.02743293854847, 0.502863171551116,         0.710885262227487, 0.00447210926904418, -0.187744703597052,         -0.528653702002812, -1.18337666530841, -0.32979547620937,         -1.07247053911792, -0.292451089562514, -0.42063448927811,         0.790573459858427, 0.0213968555182177, -0.532992960846149,         -1.05107036265389, -0.890027204814649, 2.49342071088843,         0.39646360373391, -0.270020722889794, 0.261789170595672,         0.790469656122502, -0.575454019876166, -1.57943046384856,         1.42402405262115, -0.773280672758551, -0.219737121401019,         -0.836890436241594, 0.95420685080104, -0.536098147323517,         -0.956813665014848, -0.443116110531749, -1.45830805133207,         -1.437100423269, -3.04957092165232, -1.35568837057382,         -0.271883099514524, -0.26615579540397, 1.40047186021849,         -0.895400518001046, -1.14529750799898, -0.0543447052053874,         -0.732873359362109, -0.84840845424305, -0.64913190155761,         -1.07297787454812, -0.420390896555157, -0.39355148021593,         -1.59176484173585, -0.237227871115963, -0.922156163826606,         -0.769252464097226, -0.495745483481408, 0.425971763197159,         2.01500856103583, -1.10490327280404, 1.60936066511874,         -0.982978119751264, 0.919086471868052, 2.32691948545754,         0.0144283333569641, -1.16776624218704, 0.0943243395400734,         1.49526101044463, -1.15775654242161, 0.948494382478262,         1.38380457128159, 0.520948446159479, -0.0848088180385032,         0.113013834873792, -0.148473736655682, 0.903015742469832,         2.58973343267609, -0.341666841858629, -1.08405836865232,         -0.394278838429946, 0.244514780331725, -0.206739411548476,         -0.473147381056783, -0.0211137496023147, -1.51938366460491,         0.0783224641966739, 0.567640645179946, 0.761295543440156,         0.270707237932193, -0.457910772782194, -0.648626511738338,         -1.10097676166057, 0.244922735721186, 0.298415726314921,         1.09751717868351, 0.769222643183293, 0.0240564372473475,         0.882114982058661, -1.43485812137356, 0.727741888928042,         1.03419106543897, 2.11916362387426), x = c(0.485226820569252,         0.696768778564913, 0.185513915583057, 0.700733515544461,         0.311681028661359, 0.760462361967838, 1.84246362620766,         1.1123628412626, 0.0326639575014441, -1.11444896479736,         0.418057822385083, -0.400235237343163, 1.49349310261748,         -1.60708093984972, -0.415751788401515, 0.42200837321742,         -0.151736536534977, -0.60615111526422, -0.304721068966714,         0.629536099884472, 0.895171980275539, 0.660212631820405,         2.27348352044748, 1.17349757263239, 0.287709728313787,         -0.659770093821306, 2.91914013071762, 0.677415500438328,         -0.684320344136007, 0.186492083080971, -0.324393300483657,         -0.274704218225806, -0.933503340589868, 0.116845344986082,         0.319160238648117, -1.07754212275943, -3.23315213292314,         -0.254874652654534, 0.0295178303214797, 0.594273774110513,         0.0591351681787969, 0.413398894737046, -1.09777217457042,         0.711175257270441, 0.718888729854143, 0.251651069028968,         1.35727443615177, 0.404468471278607, 0.264364269837939,         0.268043904143697, 0.436930577039483, 1.06012390548736,         0.452190396528715, 0.663198615687065, -1.13637355399084,         -0.370497517092117, 1.47696958979247, -1.22390375051376,         0.258068387396106, 0.405002805433516, 0.97580332180945,         -0.348876736539909, 0.158625439491262, -1.76325506654115,         0.338596047099905, -0.666565029559273, -0.238646624327644,         -1.18776528245719, 0.384935321768578, 0.66657951565448,         -0.304613889457735, 1.8250110640863, 0.670559370567588,         0.948632573255153, 2.04940300167091, -0.651113609237535,         0.808619272846293, 0.986580613954563, -0.00617079609070003,         0.319052357931912, -1.01182190274184, 0.470167547726389,         -0.700970331629097, 0.813682862526491, -0.811430783992772,         0.31939748709946, -0.846522653163624, -0.245763179128733,         -1.55285901110546, 0.128434032925753, 0.985443389404868,         0.183247523067191, -1.76622921343046, -0.620533696615944,         1.65604303699874, 1.80980538558388, -1.17503676801214,         -0.366703258827641, 0.353625448927287, 0.319156220867898        )), terms = y ~ m + x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\")), class = c(\"lm_list_lmhelprs\", \"lm_list\", \"list\"), cases_removed = integer(0), call = (function (models,     data, na_omit_all = TRUE, ...) {    my_call <- match.call()    my_call$na_omit_all <- NULL    my_call[[1L]] <- quote(stats::lm)    my_mm <- my_call    my_mm[[1L]] <- quote(stats::model.frame)    my_mm$models <- NULL    if (is.null(my_call$data) && na_omit_all) {        stop(\"The argument 'data' must be set if na_omit_all is TRUE.\")    }    models1 <- parse_models(models)    data_full <- eval(my_call$data, envir = parent.frame())    if (na_omit_all) {        all_vars <- sapply(models1, function(x) {            all.vars(stats::as.formula(x))        }, USE.NAMES = FALSE)        all_vars <- unique(unlist(all_vars))        if (!is.null(my_call$subset)) {            all_ys <- sapply(models1, function(x) {                all.vars(stats::as.formula(x))[1]            }, USE.NAMES = FALSE)            ys1 <- all_ys[1]            f0 <- paste(ys1, \"~\", paste(setdiff(all_vars, ys1),                 collapse = \" + \"))            my_mm0 <- my_mm            my_mm0$formula <- f0            my_mm0$na.action <- \"na.pass\"            data_selected <- tryCatch(eval(my_mm0, envir = parent.frame()),                 error = function(e) e)            if (inherits(data_selected, \"error\")) {                subset_i <- eval(my_mm0$subset, envir = parent.frame())                if (is.logical(subset_i)) {                  subset_i <- sapply(subset_i, isTRUE)                  omitted_subset <- which(!subset_i)                }                else if (is.character(subset_i)) {                  omitted_subset <- !(row.names(data_full) %in%                     subset_i)                  omitted_subset[is.na(omitted_subset)] <- TRUE                  omitted_subset <- which(omitted_subset)                }                else {                  omitted_subset <- setdiff(seq_len(nrow(data_full)),                     subset_i)                }            }            else {                subset_i <- match(row.names(data_selected), row.names(data_full))                subset_i <- stats::na.omit(subset_i)                omitted_subset <- setdiff(seq_len(nrow(data_full)),                   subset_i)            }        }        else {            omitted_subset <- numeric(0)        }        data <- stats::na.omit(eval(my_call$data, envir = parent.frame())[,             all_vars])        data_omitted <- attr(data, \"na.action\")        if (!is.null(data_omitted)) {            omitted_listwise <- as.numeric(data_omitted)        }        else {            omitted_listwise <- numeric(0)        }        omitted <- c(omitted_subset, omitted_listwise)        omitted <- unique(sort(omitted))        selected <- !logical(nrow(data_full))        selected[omitted] <- FALSE        my_call$subset <- which(selected)    }    else {        selected <- !logical(nrow(data_full))    }    tmpfct <- function(x, env = parent.frame()) {        call0 <- my_call        call0$models <- NULL        call0$formula <- stats::as.formula(x, env = env)        outtmp <- eval(call0, envir = env)        outtmp    }    out1 <- lapply(models1, tmpfct, env = parent.frame())    out2 <- lm2list_free(out1)    attr(out2, \"cases_removed\") <- which(!selected)    attr(out2, \"call\") <- match.call()    out2})(models = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(m = c(-1.0058992908557, 0.473681263238225, 1.0901451247436, -2.02743293854847, 0.502863171551116, 0.710885262227487, 0.00447210926904418, -0.187744703597052, -0.528653702002812, -1.18337666530841, -0.32979547620937, -1.07247053911792, -0.292451089562514, -0.42063448927811, 0.790573459858427, 0.0213968555182177, -0.532992960846149, -1.05107036265389, -0.890027204814649, 2.49342071088843, 0.39646360373391, -0.270020722889794, 0.261789170595672, 0.790469656122502, -0.575454019876166, -1.57943046384856, 1.42402405262115, -0.773280672758551, -0.219737121401019, -0.836890436241594, 0.95420685080104, -0.536098147323517, -0.956813665014848, -0.443116110531749, -1.45830805133207, -1.437100423269, -3.04957092165232, -1.35568837057382, -0.271883099514524, -0.26615579540397, 1.40047186021849, -0.895400518001046, -1.14529750799898, -0.0543447052053874, -0.732873359362109, -0.84840845424305, -0.64913190155761, -1.07297787454812, -0.420390896555157, -0.39355148021593, -1.59176484173585, -0.237227871115963, -0.922156163826606, -0.769252464097226, -0.495745483481408, 0.425971763197159, 2.01500856103583, -1.10490327280404, 1.60936066511874, -0.982978119751264, 0.919086471868052, 2.32691948545754, 0.0144283333569641, -1.16776624218704, 0.0943243395400734, 1.49526101044463, -1.15775654242161, 0.948494382478262, 1.38380457128159, 0.520948446159479, -0.0848088180385032, 0.113013834873792, -0.148473736655682, 0.903015742469832, 2.58973343267609, -0.341666841858629, -1.08405836865232, -0.394278838429946, 0.244514780331725, -0.206739411548476, -0.473147381056783, -0.0211137496023147, -1.51938366460491, 0.0783224641966739, 0.567640645179946, 0.761295543440156, 0.270707237932193, -0.457910772782194, -0.648626511738338, -1.10097676166057, 0.244922735721186, 0.298415726314921, 1.09751717868351, 0.769222643183293, 0.0240564372473475, 0.882114982058661, -1.43485812137356, 0.727741888928042, 1.03419106543897, 2.11916362387426), y = c(-0.1439617341926, -0.174277626103084, 0.602224604404354, -1.44887499366459, -0.463904174168501, 0.500059589539494, -0.773951880206804, 0.0517804664566934, 0.0430846805746435, -0.636812687531766, -0.334582095393778, -1.0983461632776, -1.10731215946008, 0.525175789638999, 0.414653245603842, 0.730487316463909, -1.34408136930753, -0.379154013094857, 0.137965520381119, 1.22395434592039, 0.0324813218120451, -0.812161380874894, 1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755, 0.165195533219977, -1.69718629157368, -0.660747173763155, -0.222462342062906, 1.35498501787693, -0.0491610358843584, -1.49334384335015, 0.357565541111457, -2.1581833540497, -1.03538755260034, -1.79855196419749, -2.36507475508984, 0.660851637576232, -0.67250052216282, 0.410951705416395, 0.760533257966452, -0.0212725401002647, -0.121076956771822, 0.0784949379362682, -0.0784246990073527, 1.11550997554267, -0.297558241032477, 0.228249504660866, 0.10421309939811, -1.12257980686361, -0.0340730006015841, 0.958116411077828, -1.14291155805925, -0.142425489752799, 1.39262563716402, 0.804316458979331, -1.46470790799051, 0.0514256342834468, -0.829348978252946, -0.274283453294785, 0.937739407943759, -0.351683826842485, -0.742409762101558, 0.399683091299982, 1.28857866229072, 0.874490535614432, 0.414756742173082, 0.414046770730831, 1.53440254315624, 1.43358814591565, 0.0939573525239246, -0.362326557452296, -1.12659429205047, 2.51705580505852, -0.896201086603481, -1.51523631210029, 2.438839161316, 0.325791813541597, -0.132172507026923, -2.60274520612392, -0.0969780594504372, 0.0855764450401389, 0.397582226715701, 1.07391449097986, 2.09861025181797, 1.14783129188257, -0.669534565586153, 0.285524667523424, -0.722321914484456, -0.343521604348032, -2.32395167916648, -0.135095644737079, 0.807071187981235, 1.8895994740787, 0.874671746534542, -0.180311268624562, -0.472625773108594, 0.657958641995046, -0.740224694435862), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057, 0.700733515544461, 0.311681028661359, 0.760462361967838, 1.84246362620766, 1.1123628412626, 0.0326639575014441, -1.11444896479736, 0.418057822385083, -0.400235237343163, 1.49349310261748, -1.60708093984972, -0.415751788401515, 0.42200837321742, -0.151736536534977, -0.60615111526422, -0.304721068966714, 0.629536099884472, 0.895171980275539, 0.660212631820405, 2.27348352044748, 1.17349757263239, 0.287709728313787, -0.659770093821306, 2.91914013071762, 0.677415500438328, -0.684320344136007, 0.186492083080971, -0.324393300483657, -0.274704218225806, -0.933503340589868, 0.116845344986082, 0.319160238648117, -1.07754212275943, -3.23315213292314, -0.254874652654534, 0.0295178303214797, 0.594273774110513, 0.0591351681787969, 0.413398894737046, -1.09777217457042, 0.711175257270441, 0.718888729854143, 0.251651069028968, 1.35727443615177, 0.404468471278607, 0.264364269837939, 0.268043904143697, 0.436930577039483, 1.06012390548736, 0.452190396528715, 0.663198615687065, -1.13637355399084, -0.370497517092117, 1.47696958979247, -1.22390375051376, 0.258068387396106, 0.405002805433516, 0.97580332180945, -0.348876736539909, 0.158625439491262, -1.76325506654115, 0.338596047099905, -0.666565029559273, -0.238646624327644, -1.18776528245719, 0.384935321768578, 0.66657951565448, -0.304613889457735, 1.8250110640863, 0.670559370567588, 0.948632573255153, 2.04940300167091, -0.651113609237535, 0.808619272846293, 0.986580613954563, -0.00617079609070003, 0.319052357931912, -1.01182190274184, 0.470167547726389, -0.700970331629097, 0.813682862526491, -0.811430783992772, 0.31939748709946, -0.846522653163624, -0.245763179128733, -1.55285901110546, 0.128434032925753, 0.985443389404868, 0.183247523067191, -1.76622921343046, -0.620533696615944, 1.65604303699874, 1.80980538558388, -1.17503676801214, -0.366703258827641, 0.353625448927287, 0.319156220867898)), class = \"data.frame\", row.names = c(NA, -100L)))), structure(list(structure(list(coefficients = c(`(Intercept)` = 0.00359240575150906, x = 0.382732763516548), residuals = c(`1` = -0.638309680947255, `2` = -0.811636380352614, `3` = -0.233473980054519, `4` = 0.968739308213971, `5` = -0.128534129033088, `6` = -0.602585016131483, `7` = -0.358392964210803, `8` = 1.49574811145649, `9` = -0.459293958711428, `10` = 0.725890100735062, `11` = 1.48774907040203, `12` = 0.489042666848007, `13` = -0.404844869289696, `14` = -0.127637246323415, `15` = -0.44304497166009, `16` = 1.23967250380267, `17` = 0.0774687750552127, `18` = 1.43410685092965, `19` = -0.574691665308142, `20` = -0.729215896870353, `21` = 0.0116009542394814, `22` = 0.03131751749879, `23` = -0.592238119297328, `24` = -1.51225748915907, `25` = 0.0810504069622551, `26` = -0.616989361351339, `27` = 1.0578560205748, `28` = -0.931216410802673, `29` = 1.07327062301445, `30` = -0.639359158179586, `31` = 0.258947190260889, `32` = 0.794594573940522, `33` = -0.475839992151701, `34` = 0.390011449602914, `35` = -0.123725564189262, `36` = -0.987772001780167, `37` = -0.238343931360045, `38` = 1.4989082260653, `39` = -0.17385278300444, `40` = -0.812249549209319, `41` = -0.0910657608348354, `42` = 0.203502307013659, `43` = 0.961645797916102, `44` = 1.08907236691378, `45` = 0.139266616332848, `46` = 1.20059239124669, `47` = -0.579679506526092, `48` = -2.25629230981608, `49` = -0.503318869538649, `50` = -0.548566500342308, `51` = -2.09795213551185, `52` = 0.626432823606617, `53` = -0.656855396205137, `54` = -0.162258468534056, `55` = -1.53167309820087, `56` = 0.469529137333409, `57` = 1.86795308843342, `58` = -0.60424925356072, `59` = -0.189879216014634, `60` = 1.80445716981996, `61` = 0.945196570389133, `62` = 1.91017694110602, `63` = 0.0162337219466052, `64` = -0.157783189922451, `65` = -0.549582419566638, `66` = 1.24989727841953, `67` = -1.15997371898521, `68` = 0.26551436697819, `69` = -0.158157540682688, `70` = 2.21909829015737, `71` = -0.565189782493709, `72` = -1.29680311175277, `73` = 0.1945449216296, `74` = 0.0116327152413977, `75` = -0.727544055313591, `76` = 0.187134940829045, `77` = -0.303201255084669, `78` = -0.472179845352651, `79` = 0.509378315704507, `80` = -0.236110423435845, `81` = -1.67445323474589, `82` = -2.57246016896382, `83` = -0.58653410214976, `84` = 1.3924675463832, `85` = 0.75146177757971, `86` = 1.20530863863354, `87` = 1.10105105729179, `88` = 0.202118812350638, `89` = -1.42215265609739, `90` = 0.222713475576613, `91` = 1.50703418963112, `92` = -3.30659823135846, `93` = -0.784206332076243, `94` = 0.971376604185378, `95` = 0.496981353491917, `96` = 0.791162805995104, `97` = 0.457309741683089, `98` = 0.442339513241108, `99` = 0.0806385972197143, `100` = -0.79897252143844), effects = c(`(Intercept)` = 0.487949089166442, x = 3.53749365281527, -0.229235396268716, 1.0321354641656, -0.201796453642345, -0.529492977219647, -0.192574020057833, 1.51572637688684, -0.429395442947496, 0.782669878723765, 1.61957678096152, 0.605149201998609, -0.348426317952624, -0.147119873604507, -0.361211409536245, 1.35812923010767, 0.328316675750014, 1.4539106323126, -0.550054594258358, -0.768280368110209, -0.0388430162310263, 0.0971578632478397, -0.630531314828302, -1.45684585745609, 0.185418226054968, -0.500212334678304, 1.13842424889085, -0.892142146693421, 1.13075651402021, -0.598363291462474, 0.300082842627337, 0.798481140694903, -0.400599858117657, 0.327386661186858, -0.0998363952025164, -0.846048975520584, -0.162853280025263, 1.51714930601387, -0.0886531854505664, -0.781664167371644, -0.0669383549678521, 0.164850534046867, 1.06422835934757, 1.14579829386806, 0.235781086340547, 1.3375187176881, -0.390610377569037, -2.21491007071395, -0.49126714533155, -0.539230347331811, -1.9420378021374, 0.763542990025605, -0.518916222351825, -0.0570049306228198, -1.48846102648805, 0.482092423798378, 1.98233447725773, -0.341833170524159, -0.203273293936921, 1.81551784603442, 1.05133133236753, 2.04324068688861, 0.0934104670678553, -0.110085881119005, -0.546317185909023, 1.20498859163121, -1.04314708037387, 0.300020167314718, -0.1990268462214, 2.33971435065694, -0.493591679947433, -1.11333245414653, 0.229289144412566, 0.113456496780523, -0.605223546212071, 0.298984076124649, -0.279803977653396, -0.260464758430011, 0.595622128722423, -0.107376782199071, -1.54944688315464, -2.55123945916426, -0.556436980771129, 1.45570480893828, 0.768140084430457, 1.30430893318363, 1.30271293253266, 0.174234309282109, -1.34998175038448, 0.304592622673427, 1.55116220847892, -3.30641975646492, -0.759478723134583, 0.95990098148869, 0.549155282661439, 0.883097008068327, 0.53451958627147, 0.438401697474758, 0.197493075504715, -0.674580822908805), rank = 2L,     fitted.values = c(`1` = 0.380499964480278, `2` = -0.465154906099681,     `3` = 0.27522788253199, `4` = -0.0382096638391503, `5` = 0.685854851819903,     `6` = -0.0895818492363381, `7` = -0.580881485061524, `8` = 0.191833533935353,     `9` = 0.13927257157483, `10` = -0.0031537749877687, `11` = -0.400784018826715,     `12` = -0.317487722751189, `13` = -0.00123986961224809, `14` = 0.400911170766313,     `15` = -0.135897502276298, `16` = -0.329939859003044, `17` = -1.03139469128751,     `18` = 0.192758011558313, `19` = 0.167149549300479, `20` = 0.504662641611895,     `21` = 0.564955215955375, `22` = -0.0511598378392359, `23` = 0.500576152648316,     `24` = 0.00409514343759732, `25` = -0.25529189178607, `26` = -0.321040221779797,     `27` = -0.129193320384901, `28` = 0.0906562416244652, `29` = -0.00689500917680408,     `30` = 0.0804749176712171, `31` = 0.0797342843196133, `32` = 0.277092992112565,     `33` = -0.100963209894438, `34` = 0.629493457635481, `35` = 0.171112196498161,     `36` = -0.45321286876176, `37` = -0.102290538335955, `38` = 0.201037751334162,     `39` = -0.153731937456109, `40` = 0.135633314435676, `41` = 0.16984993402756,     `42` = 0.50247602155017, `43` = -0.245832971135794, `44` = -0.00286845333782448,     `45` = -0.213682096490501, `46` = -0.42779827234333, `47` = -0.704069111106093,     `48` = 0.0784277813890539, `49` = 0.233831126826071, `50` = 0.248219174572061,     `51` = -0.528403386543905, `52` = -0.42877232096279, `53` = -0.433164692837174,     `54` = -0.259984740445823, `55` = 0.0687326870373604, `56` = 0.231120690730526,     `57` = -0.308347293016671, `58` = -1.09268697486892, `59` = 0.368651902812687,     `60` = 0.239082046358038, `61` = -0.264653774337872, `62` = -0.407332966550108,     `63` = -0.111224054030291, `64` = 0.0449683292872122, `65` = 0.280385032576697,     `66` = 0.535627343422814, `67` = -0.321303083213176, `68` = 0.114861563499307,     `69` = 0.514225286147984, `70` = -0.34138076820476, `71` = -0.0816664508906588,     `72` = -0.674406448163988, `73` = 0.113598317833955, `74` = -0.2418126893868,     `75` = -0.350411534143083, `76` = -0.294930526510433, `77` = 0.173718410319711,     `78` = -0.824055331636924, `79` = -0.159264556881648, `80` = -0.384390555381373,     `81` = -0.36464206878304, `82` = 0.185250628310022, `83` = 0.138220289435998,     `84` = -0.0373677909474235, `85` = 0.209317870807993, `86` = -0.226852865958394,     `87` = -0.770789893463575, `88` = 0.445427252737147, `89` = -0.0847013627798738,     `90` = -0.136139027436236, `91` = 0.0638796781648836, `92` = 0.2967397621207,     `93` = 0.166669847824502, `94` = 0.358487254793509, `95` = 0.0212496259630596,     `96` = -0.189414232030471, `97` = -0.111399426605327, `98` = 0.318549312400568,     `99` = -0.32145058755933, `100` = -0.361385421485835), assign = 0:1,     qr = structure(list(qr = structure(cdim = c(100L, 2L), dimnames = list(c(\"1\",     \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",     \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",     \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\",     \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\",     \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\",     \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\",     \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\",     \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",     \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\",     \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"), c(\"(Intercept)\",     \"x\")), assign = 0:1), qraux = c(1.1, 1.12873148295067), pivot = 1:2,         tol = 1e-07, rank = 2L), class = \"qr\"), df.residual = 98L,     xlevels = structure(list(), names = character(0)), call = stats::lm(formula = m ~         x, data = structure(list(m = c(-0.257809716466977, -1.27679128645229,     0.0417539024774709, 0.930529644374821, 0.557320722786814,     -0.692166865367821, -0.939274449272328, 1.68758164539185,     -0.320021387136598, 0.722736325747294, 1.08696505157531,     0.171554944096819, -0.406084738901945, 0.273273924442898,     -0.578942473936388, 0.909732644799622, -0.953925916232302,     1.62686486248796, -0.407542116007663, -0.224553255258458,     0.576556170194857, -0.0198423203404459, -0.0916619666490127,     -1.50816234572148, -0.174241484823815, -0.938029583131136,     0.928662700189895, -0.840560169178208, 1.06637561383764,     -0.558884240508369, 0.338681474580503, 1.07168756605309,     -0.576803202046139, 1.01950490723839, 0.0473866323088989,     -1.44098487054193, -0.340634469696, 1.69994597739946, -0.327584720460549,     -0.676616234773644, 0.0787841731927249, 0.705978328563829,     0.715812826780308, 1.08620391357595, -0.0744154801576535,     0.772794118903362, -1.28374861763219, -2.17786452842703,     -0.269487742712578, -0.300347325770247, -2.62635552205575,     0.197660502643827, -1.09002008904231, -0.422243208979879,     -1.46294041116351, 0.700649828063935, 1.55960579541675, -1.69693622842964,     0.178772686798053, 2.043539216178, 0.680542796051261, 1.50284397455591,     -0.0949903320836854, -0.112814860635238, -0.26919738698994,     1.78552462184234, -1.48127680219839, 0.380375930477497, 0.356067745465296,     1.87771752195261, -0.646856233384368, -1.97120955991676,     0.308143239463555, -0.230179974145403, -1.07795558945667,     -0.107795585681388, -0.129482844764958, -1.29623517698958,     0.350113758822859, -0.620500978817218, -2.03909530352893,     -2.3872095406538, -0.448313812713761, 1.35509975543578, 0.960779648387702,     0.978455772675148, 0.33026116382822, 0.647546065087784, -1.50685401887726,     0.0865744481403767, 1.570913867796, -3.00985846923776, -0.61753648425174,     1.32986385897889, 0.518230979454976, 0.601748573964633, 0.345910315077762,     0.760888825641675, -0.240811990339615, -1.16035794292427),         y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909,         -0.31360760280103, 0.640175146926015, -0.213196392482659,         0.79760306542824, -0.127458830395686, -0.608428327270797,         0.296462080432809, -0.675699447934353, -0.160785042341766,         -0.816336600011713, -1.72327297092188, -0.535281428595674,         -0.00765373905760863, 0.504252652768121, 0.290293398421208,         0.279048146683646, 0.0112439636534965, -0.782874281888901,         0.314097024690366, -0.137704261235468, -0.610267273940993,         0.482754152828057, -0.370320007780895, 1.83711945518766,         -0.320207869670493, -0.552807217421982, 0.363031624793193,         -0.889723127628635, -1.12596728225233, -0.989827090143935,         -0.135156944128649, -0.502422245847366, 0.671002166714933,         1.24615343604938, 1.47878632390233, -1.26696576554576,         -0.318262612371445, 0.461251449812912, 0.234319865433172,         0.506642364182273, -0.275113574856366, -1.1523196355089,         1.60555795178744, -0.410322767817899, -1.44261499715763,         0.146949268211736, 1.63598725465829, -0.99909896430973,         1.32114252865484, 0.639318072702142, -0.563746491712262,         -0.0710896951888477, -0.213631541678839, -0.496420443744945,         -1.88914122076051, -0.0394093687246016, 2.57807132340186,         0.431038410226631, 0.0561439072327621, 0.152015405319829,         0.548056818220597, -1.25627629638571, -0.0206175507163967,         -2.42211981133594, -0.909283759946111, -0.590510681738354,         0.686052294710227, 0.89774915490782, -0.216018726494471,         0.390474315164319, -0.605815891489038, -0.573798023956782,         0.420348323013462, -0.501247083246725, 0.269064048092409,         1.12547954741865, -1.32047313229652, -1.66639182067291,         -0.148538371524439, -1.68533218467757, 1.04102930892646,         0.682605683525256, 3.25695951166719, -2.1988419377994,         -0.404377490884628, -0.169701059508333, 1.49329651567534,         1.51264727973354, -2.74193258577351, 1.63059880130779,         -0.856905261795034, -0.70478471721872, 0.263513612781986,         2.10036995898208, 0.818927439813178, 0.512135540197413,         0.916380125290656), x = c(0.984779968314556, -1.22473787596427,         0.709726218065825, -0.109219992578064, 1.78260789538833,         -0.243444679602975, -1.52710702225461, 0.491834371466622,         0.354503660926992, -0.0176263476303775, -1.05655032211723,         -0.838914666078269, -0.0126257164904259, 1.03811014600433,         -0.364457713905061, -0.871449472185395, -2.7042030254467,         0.494249836540647, 0.427340324999113, 1.30919086010968,         1.4667226423107, -0.143056066294616, 1.29851372621074,         0.00131354755592194, -0.676410075685581, -0.848196596885468,         -0.346941100407436, 0.227479443027071, -0.0274014036111113,         0.200877790585033, 0.198942671822796, 0.71459935608369,         -0.273181774889849, 1.63534745793173, 0.437693886479643,         -1.19353585074908, -0.276649804199181, 0.515883050535119,         -0.411055332086343, 0.344995049472574, 0.434395860831138,         1.30347768300503, -0.651695910733076, -0.0168808623279884,         -0.567692455293591, -1.12713286976328, -1.84897031117903,         0.19552905518189, 0.601565225195587, 0.639158159789933,         -1.38999281746208, -1.12967785339758, -1.14115419483757,         -0.688671499600886, 0.170197818152129, 0.59448342725741,         -0.815032650724957, -2.86434683706673, 0.95382348170826,         0.615284770613444, -0.700870700550263, -1.07366134146979,         -0.299991196799737, 0.108106562802571, 0.723200763587674,         1.39009509607427, -0.848883398378404, 0.290722844643498,         1.33417603370242, -0.901342155259083, -0.222763412932851,         -1.7714680282034, 0.287422250114445, -0.641191762323999,         -0.924937642238947, -0.779977469185323, 0.444503373594371,         -2.16246900261166, -0.425510899920945, -1.01371765920455,         -0.962119028303747, 0.474634627277364, 0.351754269604537,         -0.107020356246981, 0.537517256600346, -0.60210489844813,         -2.02329764533368, 1.15442128059814, -0.230692997694109,         -0.365088768214911, 0.157517929375723, 0.765932222984396,         0.426086966202313, 0.927265399965311, 0.0461345928404875,         -0.504285643091111, -0.300449408355562, 0.822915978645871,         -0.849268796129039, -0.953610095681196)), class = \"data.frame\", row.names = c(NA,     -100L)), subset = 1:100), terms = m ~ x, model = structure(list(        m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709,         0.930529644374821, 0.557320722786814, -0.692166865367821,         -0.939274449272328, 1.68758164539185, -0.320021387136598,         0.722736325747294, 1.08696505157531, 0.171554944096819,         -0.406084738901945, 0.273273924442898, -0.578942473936388,         0.909732644799622, -0.953925916232302, 1.62686486248796,         -0.407542116007663, -0.224553255258458, 0.576556170194857,         -0.0198423203404459, -0.0916619666490127, -1.50816234572148,         -0.174241484823815, -0.938029583131136, 0.928662700189895,         -0.840560169178208, 1.06637561383764, -0.558884240508369,         0.338681474580503, 1.07168756605309, -0.576803202046139,         1.01950490723839, 0.0473866323088989, -1.44098487054193,         -0.340634469696, 1.69994597739946, -0.327584720460549,         -0.676616234773644, 0.0787841731927249, 0.705978328563829,         0.715812826780308, 1.08620391357595, -0.0744154801576535,         0.772794118903362, -1.28374861763219, -2.17786452842703,         -0.269487742712578, -0.300347325770247, -2.62635552205575,         0.197660502643827, -1.09002008904231, -0.422243208979879,         -1.46294041116351, 0.700649828063935, 1.55960579541675,         -1.69693622842964, 0.178772686798053, 2.043539216178,         0.680542796051261, 1.50284397455591, -0.0949903320836854,         -0.112814860635238, -0.26919738698994, 1.78552462184234,         -1.48127680219839, 0.380375930477497, 0.356067745465296,         1.87771752195261, -0.646856233384368, -1.97120955991676,         0.308143239463555, -0.230179974145403, -1.07795558945667,         -0.107795585681388, -0.129482844764958, -1.29623517698958,         0.350113758822859, -0.620500978817218, -2.03909530352893,         -2.3872095406538, -0.448313812713761, 1.35509975543578,         0.960779648387702, 0.978455772675148, 0.33026116382822,         0.647546065087784, -1.50685401887726, 0.0865744481403767,         1.570913867796, -3.00985846923776, -0.61753648425174,         1.32986385897889, 0.518230979454976, 0.601748573964633,         0.345910315077762, 0.760888825641675, -0.240811990339615,         -1.16035794292427), x = c(0.984779968314556, -1.22473787596427,         0.709726218065825, -0.109219992578064, 1.78260789538833,         -0.243444679602975, -1.52710702225461, 0.491834371466622,         0.354503660926992, -0.0176263476303775, -1.05655032211723,         -0.838914666078269, -0.0126257164904259, 1.03811014600433,         -0.364457713905061, -0.871449472185395, -2.7042030254467,         0.494249836540647, 0.427340324999113, 1.30919086010968,         1.4667226423107, -0.143056066294616, 1.29851372621074,         0.00131354755592194, -0.676410075685581, -0.848196596885468,         -0.346941100407436, 0.227479443027071, -0.0274014036111113,         0.200877790585033, 0.198942671822796, 0.71459935608369,         -0.273181774889849, 1.63534745793173, 0.437693886479643,         -1.19353585074908, -0.276649804199181, 0.515883050535119,         -0.411055332086343, 0.344995049472574, 0.434395860831138,         1.30347768300503, -0.651695910733076, -0.0168808623279884,         -0.567692455293591, -1.12713286976328, -1.84897031117903,         0.19552905518189, 0.601565225195587, 0.639158159789933,         -1.38999281746208, -1.12967785339758, -1.14115419483757,         -0.688671499600886, 0.170197818152129, 0.59448342725741,         -0.815032650724957, -2.86434683706673, 0.95382348170826,         0.615284770613444, -0.700870700550263, -1.07366134146979,         -0.299991196799737, 0.108106562802571, 0.723200763587674,         1.39009509607427, -0.848883398378404, 0.290722844643498,         1.33417603370242, -0.901342155259083, -0.222763412932851,         -1.7714680282034, 0.287422250114445, -0.641191762323999,         -0.924937642238947, -0.779977469185323, 0.444503373594371,         -2.16246900261166, -0.425510899920945, -1.01371765920455,         -0.962119028303747, 0.474634627277364, 0.351754269604537,         -0.107020356246981, 0.537517256600346, -0.60210489844813,         -2.02329764533368, 1.15442128059814, -0.230692997694109,         -0.365088768214911, 0.157517929375723, 0.765932222984396,         0.426086966202313, 0.927265399965311, 0.0461345928404875,         -0.504285643091111, -0.300449408355562, 0.822915978645871,         -0.849268796129039, -0.953610095681196)), terms = m ~         x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\"),     structure(list(coefficients = c(`(Intercept)` = -0.0443005999567679,     m = 0.416877762692203, x = -0.156180658350468), residuals = c(`1` = -0.885778571044836,     `2` = -0.221800213902656, `3` = -0.206320355599509, `4` = -0.674282169455884,     `5` = 0.730550005547906, `6` = 0.0816318313860099, `7` = 0.994961716244259,     `8` = -0.709858475195252, `9` = -0.375351312279639, `10` = 0.0367170833184352,     `11` = -1.24954313169158, `12` = -0.319024128506833, `13` = -0.604720195351676,     `14` = -1.63076146714573, `15` = -0.306553831075414, `16` = -0.478704000998051,     `17` = 0.523879545630328, `18` = -0.266417520838034, `19` = 0.559986285462599,     `20` = 0.353626112706008, `21` = -0.749853420335727, `22` = 0.344326856142359,     `23` = 0.147610902938621, `24` = 0.0629578211988278, `25` = 0.49404998221088,     `26` = -0.067447636781518, `27` = 1.4400957369231, `28` = 0.110031462194632,     `29` = -0.957334466807087, `30` = 0.671691862118579, `31` = -0.955540305600998,     `32` = -1.41682279924686, `33` = -0.74773577125612, `34` = -0.260455626343604,     `35` = -0.409516759802684, `36` = 1.12961010064166, `37` = 1.38924962307651,     `38` = 0.894988202567621, `39` = -1.15030127261496, `40` = 0.0619858036932616,     `41` = 0.540552911442867, `42` = 0.187891801945938, `43` = 0.150754218021884,     `44` = -0.686263696410565, `45` = -1.16565945808269, `46` = 1.151661514786,     `47` = -0.119629316753828, `48` = -0.459873248578536, `49` = 0.397546168335291,     `50` = 1.90532011799881, `51` = -0.0770191436176961, `52` = 1.10660902962925,     `53` = 0.959797595239295, `54` = -0.450979255678856, `55` = 0.609659837614588,     `56` = -0.368569461428536, `57` = -1.22957715443066, `58` = -1.58478121722181,     `59` = 0.0793336528526517, `60` = 1.86656144749199, `61` = 0.0821734045187589,     `62` = -0.693742861754995, `63` = 0.189062539777506, `64` = 0.656271579027927,     `65` = -0.9868033206413, `66` = -0.50355649307047, `67` = -1.89288702017237,     `68` = -0.978148141594825, `69` = -0.486274315578955, `70` = -0.193197996059949,     `71` = 1.17691839773312, `72` = 0.373366261706267, `73` = 0.351206647112239,     `74` = -0.565700130462644, `75` = -0.224579079483769, `76` = 0.387769110921287,     `77` = -0.333545135130347, `78` = 0.516000436065154, `79` = 0.957368934424638,     `80` = -1.17582256393817, `81` = -0.922302115916814, `82` = 0.965065549381675,     `83` = -1.39920231208825, `84` = 0.503704444916859, `85` = 0.410328412232536,     `86` = 2.7993265187822, `87` = -2.60821983121063, `88` = -0.449726170164188,     `89` = 0.466743688285034, `90` = 1.44448634920887, `91` = 0.926670075013261,     `92` = -1.32326512230318, `93` = 1.99888317209626, `94` = -1.22217441142241,     `95` = -0.869317757452373, `96` = -0.0218010502135053, `97` = 1.9535438542991,     `98` = 0.674553967790979, `99` = 0.524185944220473, `100` = 1.29547269586268    ), effects = c(`(Intercept)` = 0.43264571547434, m = 3.91423689559544,     x = 1.35997405209498, -0.611671161986632, 0.825031370326444,     0.169917225198442, 1.07009744735539, -0.651954214935359,     -0.285294634533966, 0.104084869048116, -1.20237539355107,     -0.25341105101726, -0.518163644540912, -1.54152280287865,     -0.221820600704936, -0.426034374749043, 0.583367156606705,     -0.20745215175142, 0.652509122887982, 0.454958388177569,     -0.659963815848788, 0.422579381127501, 0.246547925936717,     0.168370839867388, 0.567715118443301, 0.0168354744057434,     1.49952802165125, 0.207190186548235, -0.895919636500827,     0.763719997927833, -0.878742274469626, -1.34547746703503,     -0.661806126055278, -0.175791958843407, -0.32456019258772,     1.21774913517943, 1.47113194364177, 0.95300779162785, -1.07045510673119,     0.157954472885101, 0.624933093233273, 0.273384538537429,     0.209676376134324, -0.625042663484988, -1.09221708981001,     1.20319783680123, -0.0430051573031029, -0.340493247655624,     0.490083337707241, 1.99888770198302, 0.0285459360373079,     1.16785323862506, 1.04269899336611, -0.373278775575326, 0.716587564374003,     -0.292561204205755, -1.18715391510179, -1.51487035761087,     0.169034820429815, 1.92010325842155, 0.141028916116286, -0.653850824561076,     0.266468647318223, 0.739490847391649, -0.8926284208016, -0.435180578165653,     -1.79941105529538, -0.90081691604533, -0.394439830990295,     -0.157328870898471, 1.26471556326264, 0.462682046561476,     0.429716857267196, -0.490611833562809, -0.138962108313871,     0.458910067880335, -0.245500595046317, 0.588602407786369,     1.02554026803337, -1.09915341596189, -0.820906408422221,     1.091760901173, -1.30700960345868, 0.559153314575665, 0.481160989926078,     2.85446944773015, -2.56128980842809, -0.365256601358954,     0.56900137125227, 1.517937787749, 0.982035748458895, -1.1820887664937,     2.09494620268786, -1.15233037134392, -0.797624760538641,     0.0410439840009282, 2.02347530577092, 0.752626737688837,     0.596644324656369, 1.38209827795288), rank = 3L, fitted.values = c(`1` = -0.305579321539554,     `2` = -0.385286127103049, `3` = -0.1377398344944, `4` = 0.360674566654854,     `5` = -0.0903748586218912, `6` = -0.294828223868669, `7` = -0.197358650816019,     `8` = 0.582399644799567, `9` = -0.233077014991157, `10` = 0.259744997114374,     `11` = 0.57384368375723, `12` = 0.158239086165067, `13` = -0.211616404660037,     `14` = -0.0925115037761512, `15` = -0.22872759752026, `16` = 0.471050261940442,     `17` = -0.0196268928622071, `18` = 0.556710919259243, `19` = -0.280938138778953,     `20` = -0.342382149052512, `21` = -0.0330208615531739, `22` = -0.0302298314519936,     `23` = -0.285315164174089, `24` = -0.673225095139821, `25` = -0.0112958293828235,     `26` = -0.302872370999377, `27` = 0.397023718264565, `28` = -0.430239331865125,     `29` = 0.404527249385104, `30` = -0.308660237325386, `31` = 0.065817177972363,     `32` = 0.290855516994525, `33` = -0.242091318887815, `34` = 0.125298682214955,     `35` = -0.0929054860446819, `36` = -0.458607933926723, `37` = -0.143096187027125,     `38` = 0.583798121334709, `39` = -0.116664492930797, `40` = -0.380248416064706,     `41` = -0.0793014616299551, `42` = 0.0464280634872343, `43` = 0.355888146160388,     `44` = 0.411150121554199, `45` = 0.0133398225737902, `46` = 0.45389643700144,     `47` = -0.290693451064071, `48` = -0.98274174857909, `49` = -0.250596900123554,     `50` = -0.269332863340521, `51` = -0.922079820692034, `52` = 0.214533499025585,     `53` = -0.320479522537153, `54` = -0.112767236033406, `55` = -0.680749532803436,     `56` = 0.154937919749697, `57` = 0.733156710685713, `58` = -0.3043600035387,     `59` = -0.118743021577253, `60` = 0.71150987590987, `61` = 0.348865005707872,     `62` = 0.749886768987757, `63` = -0.0370471344576764, `64` = -0.108214760807331,     `65` = -0.269472975744406, `66` = 0.482938942354073, `67` = -0.529232791163572,     `68` = 0.0688643816487136, `69` = -0.104236366159399, `70` = 0.879250290770177,     `71` = -0.279169242825299, `72` = -0.589384988200737, `73` = 0.0392676680520799,     `74` = -0.0401157610263937, `75` = -0.349218944473013, `76` = 0.0325792120921751,     `77` = -0.167701948116379, `78` = -0.246936387972745, `79` = 0.168110612994017,     `80` = -0.144650568358351, `81` = -0.744089704756098, `82` = -1.11360392090611,     `83` = -0.286129872589317, `84` = 0.537324864009605, `85` = 0.27227727129272,     `86` = 0.45763299288499, `87` = 0.40937789341123, `88` = 0.0453486792795598,     `89` = -0.636444747793368, `90` = 0.0488101664664706, `91` = 0.585977204720283,     `92` = -1.41866746347033, `93` = -0.368284370788474, `94` = 0.365269149627378,     `95` = 0.164533040233654, `96` = 0.285314662995491, `97` = 0.146826104682985,     `98` = 0.1443734720222, `99` = -0.0120504040230603, `100` = -0.379092570572025    ), assign = 0:2, qr = structure(list(qr = structure(cdim = c(100L, 3L), dimnames = list(        c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",         \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",         \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\",         \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\",         \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\",         \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\",         \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\",         \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\",         \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\",         \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\",         \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"        ), c(\"(Intercept)\", \"m\", \"x\")), assign = 0:2), qraux = c(1.1,     1.11459188539618, 1.08092606017996), pivot = 1:3, tol = 1e-07,         rank = 3L), class = \"qr\"), df.residual = 97L, xlevels = structure(list(), names = character(0)),         call = stats::lm(formula = y ~ m + x, data = structure(list(            m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709,             0.930529644374821, 0.557320722786814, -0.692166865367821,             -0.939274449272328, 1.68758164539185, -0.320021387136598,             0.722736325747294, 1.08696505157531, 0.171554944096819,             -0.406084738901945, 0.273273924442898, -0.578942473936388,             0.909732644799622, -0.953925916232302, 1.62686486248796,             -0.407542116007663, -0.224553255258458, 0.576556170194857,             -0.0198423203404459, -0.0916619666490127, -1.50816234572148,             -0.174241484823815, -0.938029583131136, 0.928662700189895,             -0.840560169178208, 1.06637561383764, -0.558884240508369,             0.338681474580503, 1.07168756605309, -0.576803202046139,             1.01950490723839, 0.0473866323088989, -1.44098487054193,             -0.340634469696, 1.69994597739946, -0.327584720460549,             -0.676616234773644, 0.0787841731927249, 0.705978328563829,             0.715812826780308, 1.08620391357595, -0.0744154801576535,             0.772794118903362, -1.28374861763219, -2.17786452842703,             -0.269487742712578, -0.300347325770247, -2.62635552205575,             0.197660502643827, -1.09002008904231, -0.422243208979879,             -1.46294041116351, 0.700649828063935, 1.55960579541675,             -1.69693622842964, 0.178772686798053, 2.043539216178,             0.680542796051261, 1.50284397455591, -0.0949903320836854,             -0.112814860635238, -0.26919738698994, 1.78552462184234,             -1.48127680219839, 0.380375930477497, 0.356067745465296,             1.87771752195261, -0.646856233384368, -1.97120955991676,             0.308143239463555, -0.230179974145403, -1.07795558945667,             -0.107795585681388, -0.129482844764958, -1.29623517698958,             0.350113758822859, -0.620500978817218, -2.03909530352893,             -2.3872095406538, -0.448313812713761, 1.35509975543578,             0.960779648387702, 0.978455772675148, 0.33026116382822,             0.647546065087784, -1.50685401887726, 0.0865744481403767,             1.570913867796, -3.00985846923776, -0.61753648425174,             1.32986385897889, 0.518230979454976, 0.601748573964633,             0.345910315077762, 0.760888825641675, -0.240811990339615,             -1.16035794292427), y = c(-1.19135789258439, -0.607086341005705,             -0.344060190093909, -0.31360760280103, 0.640175146926015,             -0.213196392482659, 0.79760306542824, -0.127458830395686,             -0.608428327270797, 0.296462080432809, -0.675699447934353,             -0.160785042341766, -0.816336600011713, -1.72327297092188,             -0.535281428595674, -0.00765373905760863, 0.504252652768121,             0.290293398421208, 0.279048146683646, 0.0112439636534965,             -0.782874281888901, 0.314097024690366, -0.137704261235468,             -0.610267273940993, 0.482754152828057, -0.370320007780895,             1.83711945518766, -0.320207869670493, -0.552807217421982,             0.363031624793193, -0.889723127628635, -1.12596728225233,             -0.989827090143935, -0.135156944128649, -0.502422245847366,             0.671002166714933, 1.24615343604938, 1.47878632390233,             -1.26696576554576, -0.318262612371445, 0.461251449812912,             0.234319865433172, 0.506642364182273, -0.275113574856366,             -1.1523196355089, 1.60555795178744, -0.410322767817899,             -1.44261499715763, 0.146949268211736, 1.63598725465829,             -0.99909896430973, 1.32114252865484, 0.639318072702142,             -0.563746491712262, -0.0710896951888477, -0.213631541678839,             -0.496420443744945, -1.88914122076051, -0.0394093687246016,             2.57807132340186, 0.431038410226631, 0.0561439072327621,             0.152015405319829, 0.548056818220597, -1.25627629638571,             -0.0206175507163967, -2.42211981133594, -0.909283759946111,             -0.590510681738354, 0.686052294710227, 0.89774915490782,             -0.216018726494471, 0.390474315164319, -0.605815891489038,             -0.573798023956782, 0.420348323013462, -0.501247083246725,             0.269064048092409, 1.12547954741865, -1.32047313229652,             -1.66639182067291, -0.148538371524439, -1.68533218467757,             1.04102930892646, 0.682605683525256, 3.25695951166719,             -2.1988419377994, -0.404377490884628, -0.169701059508333,             1.49329651567534, 1.51264727973354, -2.74193258577351,             1.63059880130779, -0.856905261795034, -0.70478471721872,             0.263513612781986, 2.10036995898208, 0.818927439813178,             0.512135540197413, 0.916380125290656), x = c(0.984779968314556,             -1.22473787596427, 0.709726218065825, -0.109219992578064,             1.78260789538833, -0.243444679602975, -1.52710702225461,             0.491834371466622, 0.354503660926992, -0.0176263476303775,             -1.05655032211723, -0.838914666078269, -0.0126257164904259,             1.03811014600433, -0.364457713905061, -0.871449472185395,             -2.7042030254467, 0.494249836540647, 0.427340324999113,             1.30919086010968, 1.4667226423107, -0.143056066294616,             1.29851372621074, 0.00131354755592194, -0.676410075685581,             -0.848196596885468, -0.346941100407436, 0.227479443027071,             -0.0274014036111113, 0.200877790585033, 0.198942671822796,             0.71459935608369, -0.273181774889849, 1.63534745793173,             0.437693886479643, -1.19353585074908, -0.276649804199181,             0.515883050535119, -0.411055332086343, 0.344995049472574,             0.434395860831138, 1.30347768300503, -0.651695910733076,             -0.0168808623279884, -0.567692455293591, -1.12713286976328,             -1.84897031117903, 0.19552905518189, 0.601565225195587,             0.639158159789933, -1.38999281746208, -1.12967785339758,             -1.14115419483757, -0.688671499600886, 0.170197818152129,             0.59448342725741, -0.815032650724957, -2.86434683706673,             0.95382348170826, 0.615284770613444, -0.700870700550263,             -1.07366134146979, -0.299991196799737, 0.108106562802571,             0.723200763587674, 1.39009509607427, -0.848883398378404,             0.290722844643498, 1.33417603370242, -0.901342155259083,             -0.222763412932851, -1.7714680282034, 0.287422250114445,             -0.641191762323999, -0.924937642238947, -0.779977469185323,             0.444503373594371, -2.16246900261166, -0.425510899920945,             -1.01371765920455, -0.962119028303747, 0.474634627277364,             0.351754269604537, -0.107020356246981, 0.537517256600346,             -0.60210489844813, -2.02329764533368, 1.15442128059814,             -0.230692997694109, -0.365088768214911, 0.157517929375723,             0.765932222984396, 0.426086966202313, 0.927265399965311,             0.0461345928404875, -0.504285643091111, -0.300449408355562,             0.822915978645871, -0.849268796129039, -0.953610095681196            )), class = \"data.frame\", row.names = c(NA, -100L        )), subset = 1:100), terms = y ~ m + x, model = structure(list(            y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909,             -0.31360760280103, 0.640175146926015, -0.213196392482659,             0.79760306542824, -0.127458830395686, -0.608428327270797,             0.296462080432809, -0.675699447934353, -0.160785042341766,             -0.816336600011713, -1.72327297092188, -0.535281428595674,             -0.00765373905760863, 0.504252652768121, 0.290293398421208,             0.279048146683646, 0.0112439636534965, -0.782874281888901,             0.314097024690366, -0.137704261235468, -0.610267273940993,             0.482754152828057, -0.370320007780895, 1.83711945518766,             -0.320207869670493, -0.552807217421982, 0.363031624793193,             -0.889723127628635, -1.12596728225233, -0.989827090143935,             -0.135156944128649, -0.502422245847366, 0.671002166714933,             1.24615343604938, 1.47878632390233, -1.26696576554576,             -0.318262612371445, 0.461251449812912, 0.234319865433172,             0.506642364182273, -0.275113574856366, -1.1523196355089,             1.60555795178744, -0.410322767817899, -1.44261499715763,             0.146949268211736, 1.63598725465829, -0.99909896430973,             1.32114252865484, 0.639318072702142, -0.563746491712262,             -0.0710896951888477, -0.213631541678839, -0.496420443744945,             -1.88914122076051, -0.0394093687246016, 2.57807132340186,             0.431038410226631, 0.0561439072327621, 0.152015405319829,             0.548056818220597, -1.25627629638571, -0.0206175507163967,             -2.42211981133594, -0.909283759946111, -0.590510681738354,             0.686052294710227, 0.89774915490782, -0.216018726494471,             0.390474315164319, -0.605815891489038, -0.573798023956782,             0.420348323013462, -0.501247083246725, 0.269064048092409,             1.12547954741865, -1.32047313229652, -1.66639182067291,             -0.148538371524439, -1.68533218467757, 1.04102930892646,             0.682605683525256, 3.25695951166719, -2.1988419377994,             -0.404377490884628, -0.169701059508333, 1.49329651567534,             1.51264727973354, -2.74193258577351, 1.63059880130779,             -0.856905261795034, -0.70478471721872, 0.263513612781986,             2.10036995898208, 0.818927439813178, 0.512135540197413,             0.916380125290656), m = c(-0.257809716466977, -1.27679128645229,             0.0417539024774709, 0.930529644374821, 0.557320722786814,             -0.692166865367821, -0.939274449272328, 1.68758164539185,             -0.320021387136598, 0.722736325747294, 1.08696505157531,             0.171554944096819, -0.406084738901945, 0.273273924442898,             -0.578942473936388, 0.909732644799622, -0.953925916232302,             1.62686486248796, -0.407542116007663, -0.224553255258458,             0.576556170194857, -0.0198423203404459, -0.0916619666490127,             -1.50816234572148, -0.174241484823815, -0.938029583131136,             0.928662700189895, -0.840560169178208, 1.06637561383764,             -0.558884240508369, 0.338681474580503, 1.07168756605309,             -0.576803202046139, 1.01950490723839, 0.0473866323088989,             -1.44098487054193, -0.340634469696, 1.69994597739946,             -0.327584720460549, -0.676616234773644, 0.0787841731927249,             0.705978328563829, 0.715812826780308, 1.08620391357595,             -0.0744154801576535, 0.772794118903362, -1.28374861763219,             -2.17786452842703, -0.269487742712578, -0.300347325770247,             -2.62635552205575, 0.197660502643827, -1.09002008904231,             -0.422243208979879, -1.46294041116351, 0.700649828063935,             1.55960579541675, -1.69693622842964, 0.178772686798053,             2.043539216178, 0.680542796051261, 1.50284397455591,             -0.0949903320836854, -0.112814860635238, -0.26919738698994,             1.78552462184234, -1.48127680219839, 0.380375930477497,             0.356067745465296, 1.87771752195261, -0.646856233384368,             -1.97120955991676, 0.308143239463555, -0.230179974145403,             -1.07795558945667, -0.107795585681388, -0.129482844764958,             -1.29623517698958, 0.350113758822859, -0.620500978817218,             -2.03909530352893, -2.3872095406538, -0.448313812713761,             1.35509975543578, 0.960779648387702, 0.978455772675148,             0.33026116382822, 0.647546065087784, -1.50685401887726,             0.0865744481403767, 1.570913867796, -3.00985846923776,             -0.61753648425174, 1.32986385897889, 0.518230979454976,             0.601748573964633, 0.345910315077762, 0.760888825641675,             -0.240811990339615, -1.16035794292427), x = c(0.984779968314556,             -1.22473787596427, 0.709726218065825, -0.109219992578064,             1.78260789538833, -0.243444679602975, -1.52710702225461,             0.491834371466622, 0.354503660926992, -0.0176263476303775,             -1.05655032211723, -0.838914666078269, -0.0126257164904259,             1.03811014600433, -0.364457713905061, -0.871449472185395,             -2.7042030254467, 0.494249836540647, 0.427340324999113,             1.30919086010968, 1.4667226423107, -0.143056066294616,             1.29851372621074, 0.00131354755592194, -0.676410075685581,             -0.848196596885468, -0.346941100407436, 0.227479443027071,             -0.0274014036111113, 0.200877790585033, 0.198942671822796,             0.71459935608369, -0.273181774889849, 1.63534745793173,             0.437693886479643, -1.19353585074908, -0.276649804199181,             0.515883050535119, -0.411055332086343, 0.344995049472574,             0.434395860831138, 1.30347768300503, -0.651695910733076,             -0.0168808623279884, -0.567692455293591, -1.12713286976328,             -1.84897031117903, 0.19552905518189, 0.601565225195587,             0.639158159789933, -1.38999281746208, -1.12967785339758,             -1.14115419483757, -0.688671499600886, 0.170197818152129,             0.59448342725741, -0.815032650724957, -2.86434683706673,             0.95382348170826, 0.615284770613444, -0.700870700550263,             -1.07366134146979, -0.299991196799737, 0.108106562802571,             0.723200763587674, 1.39009509607427, -0.848883398378404,             0.290722844643498, 1.33417603370242, -0.901342155259083,             -0.222763412932851, -1.7714680282034, 0.287422250114445,             -0.641191762323999, -0.924937642238947, -0.779977469185323,             0.444503373594371, -2.16246900261166, -0.425510899920945,             -1.01371765920455, -0.962119028303747, 0.474634627277364,             0.351754269604537, -0.107020356246981, 0.537517256600346,             -0.60210489844813, -2.02329764533368, 1.15442128059814,             -0.230692997694109, -0.365088768214911, 0.157517929375723,             0.765932222984396, 0.426086966202313, 0.927265399965311,             0.0461345928404875, -0.504285643091111, -0.300449408355562,             0.822915978645871, -0.849268796129039, -0.953610095681196            )), terms = y ~ m + x, row.names = c(NA, 100L), class = \"data.frame\")), class = \"lm\")), class = c(\"lm_list_lmhelprs\", \"lm_list\", \"list\"), cases_removed = integer(0), call = (function (models,     data, na_omit_all = TRUE, ...) {    my_call <- match.call()    my_call$na_omit_all <- NULL    my_call[[1L]] <- quote(stats::lm)    my_mm <- my_call    my_mm[[1L]] <- quote(stats::model.frame)    my_mm$models <- NULL    if (is.null(my_call$data) && na_omit_all) {        stop(\"The argument 'data' must be set if na_omit_all is TRUE.\")    }    models1 <- parse_models(models)    data_full <- eval(my_call$data, envir = parent.frame())    if (na_omit_all) {        all_vars <- sapply(models1, function(x) {            all.vars(stats::as.formula(x))        }, USE.NAMES = FALSE)        all_vars <- unique(unlist(all_vars))        if (!is.null(my_call$subset)) {            all_ys <- sapply(models1, function(x) {                all.vars(stats::as.formula(x))[1]            }, USE.NAMES = FALSE)            ys1 <- all_ys[1]            f0 <- paste(ys1, \"~\", paste(setdiff(all_vars, ys1),                 collapse = \" + \"))            my_mm0 <- my_mm            my_mm0$formula <- f0            my_mm0$na.action <- \"na.pass\"            data_selected <- tryCatch(eval(my_mm0, envir = parent.frame()),                 error = function(e) e)            if (inherits(data_selected, \"error\")) {                subset_i <- eval(my_mm0$subset, envir = parent.frame())                if (is.logical(subset_i)) {                  subset_i <- sapply(subset_i, isTRUE)                  omitted_subset <- which(!subset_i)                }                else if (is.character(subset_i)) {                  omitted_subset <- !(row.names(data_full) %in%                     subset_i)                  omitted_subset[is.na(omitted_subset)] <- TRUE                  omitted_subset <- which(omitted_subset)                }                else {                  omitted_subset <- setdiff(seq_len(nrow(data_full)),                     subset_i)                }            }            else {                subset_i <- match(row.names(data_selected), row.names(data_full))                subset_i <- stats::na.omit(subset_i)                omitted_subset <- setdiff(seq_len(nrow(data_full)),                   subset_i)            }        }        else {            omitted_subset <- numeric(0)        }        data <- stats::na.omit(eval(my_call$data, envir = parent.frame())[,             all_vars])        data_omitted <- attr(data, \"na.action\")        if (!is.null(data_omitted)) {            omitted_listwise <- as.numeric(data_omitted)        }        else {            omitted_listwise <- numeric(0)        }        omitted <- c(omitted_subset, omitted_listwise)        omitted <- unique(sort(omitted))        selected <- !logical(nrow(data_full))        selected[omitted] <- FALSE        my_call$subset <- which(selected)    }    else {        selected <- !logical(nrow(data_full))    }    tmpfct <- function(x, env = parent.frame()) {        call0 <- my_call        call0$models <- NULL        call0$formula <- stats::as.formula(x, env = env)        outtmp <- eval(call0, envir = env)        outtmp    }    out1 <- lapply(models1, tmpfct, env = parent.frame())    out2 <- lm2list_free(out1)    attr(out2, \"cases_removed\") <- which(!selected)    attr(out2, \"call\") <- match.call()    out2})(models = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709, 0.930529644374821, 0.557320722786814, -0.692166865367821, -0.939274449272328, 1.68758164539185, -0.320021387136598, 0.722736325747294, 1.08696505157531, 0.171554944096819, -0.406084738901945, 0.273273924442898, -0.578942473936388, 0.909732644799622, -0.953925916232302, 1.62686486248796, -0.407542116007663, -0.224553255258458, 0.576556170194857, -0.0198423203404459, -0.0916619666490127, -1.50816234572148, -0.174241484823815, -0.938029583131136, 0.928662700189895, -0.840560169178208, 1.06637561383764, -0.558884240508369, 0.338681474580503, 1.07168756605309, -0.576803202046139, 1.01950490723839, 0.0473866323088989, -1.44098487054193, -0.340634469696, 1.69994597739946, -0.327584720460549, -0.676616234773644, 0.0787841731927249, 0.705978328563829, 0.715812826780308, 1.08620391357595, -0.0744154801576535, 0.772794118903362, -1.28374861763219, -2.17786452842703, -0.269487742712578, -0.300347325770247, -2.62635552205575, 0.197660502643827, -1.09002008904231, -0.422243208979879, -1.46294041116351, 0.700649828063935, 1.55960579541675, -1.69693622842964, 0.178772686798053, 2.043539216178, 0.680542796051261, 1.50284397455591, -0.0949903320836854, -0.112814860635238, -0.26919738698994, 1.78552462184234, -1.48127680219839, 0.380375930477497, 0.356067745465296, 1.87771752195261, -0.646856233384368, -1.97120955991676, 0.308143239463555, -0.230179974145403, -1.07795558945667, -0.107795585681388, -0.129482844764958, -1.29623517698958, 0.350113758822859, -0.620500978817218, -2.03909530352893, -2.3872095406538, -0.448313812713761, 1.35509975543578, 0.960779648387702, 0.978455772675148, 0.33026116382822, 0.647546065087784, -1.50685401887726, 0.0865744481403767, 1.570913867796, -3.00985846923776, -0.61753648425174, 1.32986385897889, 0.518230979454976, 0.601748573964633, 0.345910315077762, 0.760888825641675, -0.240811990339615, -1.16035794292427), y = c(-1.19135789258439, -0.607086341005705, -0.344060190093909, -0.31360760280103, 0.640175146926015, -0.213196392482659, 0.79760306542824, -0.127458830395686, -0.608428327270797, 0.296462080432809, -0.675699447934353, -0.160785042341766, -0.816336600011713, -1.72327297092188, -0.535281428595674, -0.00765373905760863, 0.504252652768121, 0.290293398421208, 0.279048146683646, 0.0112439636534965, -0.782874281888901, 0.314097024690366, -0.137704261235468, -0.610267273940993, 0.482754152828057, -0.370320007780895, 1.83711945518766, -0.320207869670493, -0.552807217421982, 0.363031624793193, -0.889723127628635, -1.12596728225233, -0.989827090143935, -0.135156944128649, -0.502422245847366, 0.671002166714933, 1.24615343604938, 1.47878632390233, -1.26696576554576, -0.318262612371445, 0.461251449812912, 0.234319865433172, 0.506642364182273, -0.275113574856366, -1.1523196355089, 1.60555795178744, -0.410322767817899, -1.44261499715763, 0.146949268211736, 1.63598725465829, -0.99909896430973, 1.32114252865484, 0.639318072702142, -0.563746491712262, -0.0710896951888477, -0.213631541678839, -0.496420443744945, -1.88914122076051, -0.0394093687246016, 2.57807132340186, 0.431038410226631, 0.0561439072327621, 0.152015405319829, 0.548056818220597, -1.25627629638571, -0.0206175507163967, -2.42211981133594, -0.909283759946111, -0.590510681738354, 0.686052294710227, 0.89774915490782, -0.216018726494471, 0.390474315164319, -0.605815891489038, -0.573798023956782, 0.420348323013462, -0.501247083246725, 0.269064048092409, 1.12547954741865, -1.32047313229652, -1.66639182067291, -0.148538371524439, -1.68533218467757, 1.04102930892646, 0.682605683525256, 3.25695951166719, -2.1988419377994, -0.404377490884628, -0.169701059508333, 1.49329651567534, 1.51264727973354, -2.74193258577351, 1.63059880130779, -0.856905261795034, -0.70478471721872, 0.263513612781986, 2.10036995898208, 0.818927439813178, 0.512135540197413, 0.916380125290656), x = c(0.984779968314556, -1.22473787596427, 0.709726218065825, -0.109219992578064, 1.78260789538833, -0.243444679602975, -1.52710702225461, 0.491834371466622, 0.354503660926992, -0.0176263476303775, -1.05655032211723, -0.838914666078269, -0.0126257164904259, 1.03811014600433, -0.364457713905061, -0.871449472185395, -2.7042030254467, 0.494249836540647, 0.427340324999113, 1.30919086010968, 1.4667226423107, -0.143056066294616, 1.29851372621074, 0.00131354755592194, -0.676410075685581, -0.848196596885468, -0.346941100407436, 0.227479443027071, -0.0274014036111113, 0.200877790585033, 0.198942671822796, 0.71459935608369, -0.273181774889849, 1.63534745793173, 0.437693886479643, -1.19353585074908, -0.276649804199181, 0.515883050535119, -0.411055332086343, 0.344995049472574, 0.434395860831138, 1.30347768300503, -0.651695910733076, -0.0168808623279884, -0.567692455293591, -1.12713286976328, -1.84897031117903, 0.19552905518189, 0.601565225195587, 0.639158159789933, -1.38999281746208, -1.12967785339758, -1.14115419483757, -0.688671499600886, 0.170197818152129, 0.59448342725741, -0.815032650724957, -2.86434683706673, 0.95382348170826, 0.615284770613444, -0.700870700550263, -1.07366134146979, -0.299991196799737, 0.108106562802571, 0.723200763587674, 1.39009509607427, -0.848883398378404, 0.290722844643498, 1.33417603370242, -0.901342155259083, -0.222763412932851, -1.7714680282034, 0.287422250114445, -0.641191762323999, -0.924937642238947, -0.779977469185323, 0.444503373594371, -2.16246900261166, -0.425510899920945, -1.01371765920455, -0.962119028303747, 0.474634627277364, 0.351754269604537, -0.107020356246981, 0.537517256600346, -0.60210489844813, -2.02329764533368, 1.15442128059814, -0.230692997694109, -0.365088768214911, 0.157517929375723, 0.765932222984396, 0.426086966202313, 0.927265399965311, 0.0461345928404875, -0.504285643091111, -0.300449408355562, 0.822915978645871, -0.849268796129039, -0.953610095681196)), class = \"data.frame\", row.names = c(NA, -100L))))), class = c(\"fit_out\", \"list\"), args = list(model = NULL,     fit_function = \"lm\", arg_data_name = \"data\", arg_model_name = \"model\",     arg_group_name = \"group\", parallel = FALSE, progress = TRUE,     ncores = 1)), R = 40, parallel = FALSE, progress = TRUE,     ncores = 1): manymome 0.2.7.1 or later is required. If not available from CRAN, can be installed from GitHub: remotes::install_github('sfcheung/manymome')  test_out <- power4test(object = sim_only,                        test_fun = test_indirect_effect,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         boot_ci = TRUE,                                         mc_ci = FALSE)) #> Error: object 'sim_only' not found  power_all_test_only_new_es <- power4test(object = test_out,                                          pop_es = c(\"y ~ m\" = \".10\")) #> Error: object 'test_out' not found  out <- power4test_by_pop_es(test_out,                             pop_es_name = \"y ~ m\",                             pop_es_values = c(.10, .20)) #> Error: object 'test_out' not found out_reject <- get_rejection_rates_by_pop_es(out) #> Error: object 'out' not found out_reject #> Error: object 'out_reject' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the Population Model — ptable_pop","title":"Generate the Population Model — ptable_pop","text":"Generate complete population model using model syntax user-specified effect sizes.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the Population Model — ptable_pop","text":"","code":"ptable_pop(   model = NULL,   pop_es = NULL,   es1 = c(n = 0, nil = 0, s = 0.1, m = 0.3, l = 0.5),   es2 = c(n = 0, nil = 0, s = 0.05, m = 0.1, l = 0.15),   standardized = TRUE,   n_std = 1e+05,   std_force_monte_carlo = FALSE )  model_matrices_pop(x, ..., drop_list_single_group = TRUE)"},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the Population Model — ptable_pop","text":"model String. model defined lavaan model syntax. pop_es can data frame columns: lhs, op, rhs, pop. first three columns correspond lavaan parameter table. column pop stores population values. column es stores original labels, reference. can also named character vector. See 'Details' specify vector. es1 named vector set values label effect size correlations regression paths. Default c(\"n\" = .00, \"nil\" = .00, \"s\" = .10, \"m\" = .30, \"l\" = .50). Used pop_es named vector. es2 named vector set values label effect size product term. Default c(\"n\" = .00, \"nil\" = .00, \"s\" = .05, \"m\" = .10, \"l\" = .15). Used pop_es named vector. standardized Logical. TRUE, default, variances error variances scaled ensure population variances endogenous variables close one, hence effect sizes standardized effect sizes variances continuos exogenous variables also equal one. n_std sample size used determine error variances simulation std_force_monte_carlo TRUE. Default 100000. std_force_monte_carlo Logical. FALSE, default, standardization done analytically model product terms, simulation model product terms. TRUE, simulation used whether model product terms . Always fall back standardization analytical standardization failed. x can 'lavaan' model syntax, passed ptable_pop(), parameter table column start set population values, output ptable_pop(). ... x model syntax, arguments passed ptable_pop(). drop_list_single_group TRUE number groups equal one, output list matrices one group . Default TRUE.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the Population Model — ptable_pop","text":"function ptable_pop() returns lavaan parameter table model, column start set population values. function model_matrices_pop() returns lavaan LISREL-style model matrices (like output lavaan::lavInspect() set \"free\"), matrix elements set population values. x model syntax, stored attributes model. model multigroup model k groups (k greater 1), returns list k lists lavaan LISREL-style model matrices unless drop_list_single_group TRUE.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate the Population Model — ptable_pop","text":"function ptable_pop() generates lavaan parameter table can used generate data based population values model parameters. function used --one function power4test(). Users usually call function directly. function model_matrices_pop() generates models matrices population values. advanced users.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"setting-pop-es-to-a-named-vector","dir":"Reference","previous_headings":"","what":"Setting pop_es to a named vector","title":"Generate the Population Model — ptable_pop","text":"pop_es specified named vector, must follow convention . names vectors lavaan names selected parameters. example, m ~ x denotes path x m. Alternatively, names can either \".beta.\" \".cov.\". Use \".beta.\" set default values regression coefficients. Use \".cov.\" set default values correlations exogenous variables (e.g., predictors). using lavaan names, can specify one parameter using +. example, y ~ m + x denotes two paths m x y. value element can label effect size: n nil, s small, m medium, l large. value label determined es1 es2. value pop_es can also set value, must quoted string, \"y ~ x\" = \".31\". vector es1 correlations regression coefficients, vector es2 standardized moderation effect, coefficients product term. example: example, regression coefficients set small (s) default, unless specified otherwise. path x m1 set medium negative (-m). path m1 m2 set large (l). coefficient product term x:w predicting y set small (s).","code":"c(\".beta.\" = \"s\",   \"m1 ~ x\" = \"-m\",   \"m2 ~ m1\" = \"l\",   \"y ~ x:w\" = \"s\")"},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"using-one-single-string-to-set-pop-es","dir":"Reference","previous_headings":"","what":"Using One Single String To Set pop_es","title":"Generate the Population Model — ptable_pop","text":"alternative way set pop_es using one single string, like lavaan model syntax. example, equivalent example : See help page pop_es_yaml() use approach.","code":"\" .beta.: s m1 ~ x: -m m2 ~ m1: l y ~ x:w: s \""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"multigroup-models","dir":"Reference","previous_headings":"","what":"Multigroup Models","title":"Generate the Population Model — ptable_pop","text":"function also supports multigroup models. model population model, equality constraints irrelevant model syntax specifies form model. Therefore, model specified case single group models. pop_es, instead using named vectors, use named list. names parameters, keywords .beta. .cov., like specifying population values single group model. elements character vectors. one element (e.g., single string), population value groups. one element (e.g., vector three strings), population values groups. model k groups, vector must either k elements one element. example: model, population value path m ~ x medium groups, population values path y ~ m small, medium, large, respectively.","code":"list(\"m ~ x\" = \"m\",      \"y ~ m\" = c(\"s\", \"m\", \"l\"))"},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"using-one-single-string-to-set-pop-es-1","dir":"Reference","previous_headings":"","what":"Using One Single String To Set pop_es","title":"Generate the Population Model — ptable_pop","text":"population values multigroup model can also set using one single string. example, equivalent example : another equivalent form: See help page pop_es_yaml() use approach.","code":"\" m ~ x: m y ~ m: [s, m, l] \" \" m ~ x: m y ~ m:  - s  - m  - l \""},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate the Population Model — ptable_pop","text":"model_matrices_pop():","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/ptable_pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the Population Model — ptable_pop","text":"","code":"model1 <- \" m1 ~ x + c1 m2 ~ m1 + x2 + c1 y ~  m2 + m1 + x + w + x:w + c1 \"  model1_es <- c(\"m1 ~ x\" = \"-m\",                \"m2 ~ m1\" = \"s\",                \"y ~ m2\" = \"l\",                \"y ~ x\" = \"m\",                \"y ~ w\" = \"s\",                \"y ~ x:w\" = \"s\",                \"x ~~ w\" = \"s\")  ptable_final1 <- ptable_pop(model1,                             pop_es = model1_es) ptable_final1 #>    id lhs op rhs group user block free ustart exo label plabel      start est #> 1   1  m1  ~   x     1    1     1    1     NA   0         .p1. -0.3000000   0 #> 2   2  m1  ~  c1     1    1     1    2     NA   0         .p2.  0.0000000   0 #> 3   3  m2  ~  m1     1    1     1    3     NA   0         .p3.  0.1000000   0 #> 4   4  m2  ~  x2     1    1     1    4     NA   0         .p4.  0.0000000   0 #> 5   5  m2  ~  c1     1    1     1    5     NA   0         .p5.  0.0000000   0 #> 6   6   y  ~  m2     1    1     1    6     NA   0         .p6.  0.5000000   0 #> 7   7   y  ~  m1     1    1     1    7     NA   0         .p7.  0.0000000   0 #> 8   8   y  ~   x     1    1     1    8     NA   0         .p8.  0.3000000   0 #> 9   9   y  ~   w     1    1     1    9     NA   0         .p9.  0.1000000   0 #> 10 10   y  ~ x:w     1    1     1   10     NA   0        .p10.  0.0500000   0 #> 11 11   y  ~  c1     1    1     1   11     NA   0        .p11.  0.0000000   0 #> 12 12  m1 ~~  m1     1    0     1   12     NA   0        .p12.  0.9095136   1 #> 13 13  m2 ~~  m2     1    0     1   13     NA   0        .p13.  0.9899914   1 #> 14 14   y ~~   y     1    0     1   14     NA   0        .p14.  0.6497233   1 #> 15 15   x ~~   x     1    0     1   15     NA   0        .p15.  1.0000000   1 #> 16 16   x ~~  c1     1    0     1   16     NA   0        .p16.  0.0000000   0 #> 17 17   x ~~  x2     1    0     1   17     NA   0        .p17.  0.0000000   0 #> 18 18   x ~~   w     1    0     1   18     NA   0        .p18.  0.1000000   0 #> 19 19   x ~~ x:w     1    0     1   19     NA   0        .p19.  0.0000000   0 #> 20 20  c1 ~~  c1     1    0     1   20     NA   0        .p20.  1.0000000   1 #> 21 21  c1 ~~  x2     1    0     1   21     NA   0        .p21.  0.0000000   0 #> 22 22  c1 ~~   w     1    0     1   22     NA   0        .p22.  0.0000000   0 #> 23 23  c1 ~~ x:w     1    0     1   23     NA   0        .p23.  0.0000000   0 #> 24 24  x2 ~~  x2     1    0     1   24     NA   0        .p24.  1.0000000   1 #> 25 25  x2 ~~   w     1    0     1   25     NA   0        .p25.  0.0000000   0 #> 26 26  x2 ~~ x:w     1    0     1   26     NA   0        .p26.  0.0000000   0 #> 27 27   w ~~   w     1    0     1   27     NA   0        .p27.  1.0000000   1 #> 28 28   w ~~ x:w     1    0     1   28     NA   0        .p28.  0.0000000   0 #> 29 29 x:w ~~ x:w     1    0     1   29     NA   0        .p29.  1.0000000   1   model_matrices_pop(ptable_final1) #> $lambda #>     m1 m2 y x c1 x2 w x:w #> m1   0  0 0 0  0  0 0   0 #> m2   0  0 0 0  0  0 0   0 #> y    0  0 0 0  0  0 0   0 #> x    0  0 0 0  0  0 0   0 #> c1   0  0 0 0  0  0 0   0 #> x2   0  0 0 0  0  0 0   0 #> w    0  0 0 0  0  0 0   0 #> x:w  0  0 0 0  0  0 0   0 #>  #> $theta #>     m1 m2 y x c1 x2 w x:w #> m1   0                    #> m2   0  0                 #> y    0  0 0               #> x    0  0 0 0             #> c1   0  0 0 0  0          #> x2   0  0 0 0  0  0       #> w    0  0 0 0  0  0 0     #> x:w  0  0 0 0  0  0 0   0 #>  #> $psi #>       m1   m2    y    x   c1   x2    w  x:w #> m1  0.91                                    #> m2  0.00 0.99                               #> y   0.00 0.00 0.65                          #> x   0.00 0.00 0.00 1.00                     #> c1  0.00 0.00 0.00 0.00 1.00                #> x2  0.00 0.00 0.00 0.00 0.00 1.00           #> w   0.00 0.00 0.00 0.10 0.00 0.00 1.00      #> x:w 0.00 0.00 0.00 0.00 0.00 0.00 0.00 1.00 #>  #> $beta #>      m1  m2 y    x c1 x2   w  x:w #> m1  0.0 0.0 0 -0.3  0  0 0.0 0.00 #> m2  0.1 0.0 0  0.0  0  0 0.0 0.00 #> y   0.0 0.5 0  0.3  0  0 0.1 0.05 #> x   0.0 0.0 0  0.0  0  0 0.0 0.00 #> c1  0.0 0.0 0  0.0  0  0 0.0 0.00 #> x2  0.0 0.0 0  0.0  0  0 0.0 0.00 #> w   0.0 0.0 0  0.0  0  0 0.0 0.00 #> x:w 0.0 0.0 0  0.0  0  0 0.0 0.00 #>  #> attr(,\"model\") #> [1] \"\\nm1 ~ x + c1\\nm2 ~ m1 + x2 + c1\\ny ~  m2 + m1 + x + w + x:w + c1\\n\"  model_matrices_pop(model1,                    pop_es = model1_es) #> $lambda #>     m1 m2 y x c1 x2 w x:w #> m1   0  0 0 0  0  0 0   0 #> m2   0  0 0 0  0  0 0   0 #> y    0  0 0 0  0  0 0   0 #> x    0  0 0 0  0  0 0   0 #> c1   0  0 0 0  0  0 0   0 #> x2   0  0 0 0  0  0 0   0 #> w    0  0 0 0  0  0 0   0 #> x:w  0  0 0 0  0  0 0   0 #>  #> $theta #>     m1 m2 y x c1 x2 w x:w #> m1   0                    #> m2   0  0                 #> y    0  0 0               #> x    0  0 0 0             #> c1   0  0 0 0  0          #> x2   0  0 0 0  0  0       #> w    0  0 0 0  0  0 0     #> x:w  0  0 0 0  0  0 0   0 #>  #> $psi #>        m1    m2     y     x    c1    x2     w   x:w #> m1  0.910                                           #> m2  0.000 0.990                                     #> y   0.000 0.000 0.652                               #> x   0.000 0.000 0.000 1.000                         #> c1  0.000 0.000 0.000 0.000 1.000                   #> x2  0.000 0.000 0.000 0.000 0.000 1.000             #> w   0.000 0.000 0.000 0.100 0.000 0.000 1.000       #> x:w 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000 #>  #> $beta #>      m1  m2 y    x c1 x2   w  x:w #> m1  0.0 0.0 0 -0.3  0  0 0.0 0.00 #> m2  0.1 0.0 0  0.0  0  0 0.0 0.00 #> y   0.0 0.5 0  0.3  0  0 0.1 0.05 #> x   0.0 0.0 0  0.0  0  0 0.0 0.00 #> c1  0.0 0.0 0  0.0  0  0 0.0 0.00 #> x2  0.0 0.0 0  0.0  0  0 0.0 0.00 #> w   0.0 0.0 0  0.0  0  0 0.0 0.00 #> x:w 0.0 0.0 0  0.0  0  0 0.0 0.00 #>  #> attr(,\"model\") #> [1] \"\\nm1 ~ x + c1\\nm2 ~ m1 + x2 + c1\\ny ~  m2 + m1 + x + w + x:w + c1\\n\""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Beta Variable — rbeta_rs","title":"Random Beta Variable — rbeta_rs","text":"Generate random numbers beta distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Beta Variable — rbeta_rs","text":"","code":"rbeta_rs(n = 10, shape1 = 0.5, shape2 = 0.5, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Beta Variable — rbeta_rs","text":"n number random numbers generate. Default 10. shape1 shape1 stats::rbeta(). shape2 shape2 stats::rbeta(). pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Beta Variable — rbeta_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Beta Variable — rbeta_rs","text":"First, specify two parameters, shape1 shape2, desired population mean standard deviation. random numbers, drawn beta distribution stats::rbeta() rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Beta Variable — rbeta_rs","text":"","code":"set.seed(90870962) x <- rbeta_rs(n = 5000,               shape1 = .5,               shape2 = .5,               pmean = 3,               psd = 1) mean(x) #> [1] 3.003229 sd(x) #> [1] 0.9983932 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Beta Variable (User Range) — rbeta_rs2","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"Generate random numbers beta distribution, rescaled user-specified population mean standard deviation, within specific range.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"","code":"rbeta_rs2(n = 10, bmean, bsd, blow = 0, bhigh = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"n number random numbers generate. Default 10. bmean population mean. bsd population standard deviation. bsd zero negative, random numbers equal bmean. blow lower bound target range. bhigh upper bound target range.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"First, specify two parameters, shape1 shape2, desired population mean standard deviation. random numbers, drawn beta distribution stats::rbeta() rescaled desired range.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbeta_rs2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Beta Variable (User Range) — rbeta_rs2","text":"","code":"set.seed(90870962) x <- rbeta_rs2(n = 5000,                bmean = .80,                bsd = .10,                blow = .00,                bhigh = .95) mean(x) #> [1] 0.7991104 sd(x) #> [1] 0.1005175 hist(x)  y <- rbeta_rs2(n = 5000,                bmean = 4,                bsd = 3,                blow = -10,                bhigh = 10) mean(y) #> [1] 4.003419 sd(y) #> [1] 3.045306 hist(y)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Binary Variable — rbinary_rs","title":"Random Binary Variable — rbinary_rs","text":"Generate random numbers distribution 0 1, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Binary Variable — rbinary_rs","text":"","code":"rbinary_rs(n = 10, p1 = 0.5, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Binary Variable — rbinary_rs","text":"n number random numbers generate. Default 10. p1 probability 1, rescaling. pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Binary Variable — rbinary_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Binary Variable — rbinary_rs","text":"First, specify probability 1 (p1), desired population mean standard deviation. random numbers, drawn distribution 0 (1 - p1 probability) 1 (p1 probability), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rbinary_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Binary Variable — rbinary_rs","text":"","code":"set.seed(90870962) x <- rbinary_rs(n = 5000,                 p1 = .5,                 pmean = 3,                 psd = 1) mean(x) #> [1] 3.0244 sd(x) #> [1] 0.9998023 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Exponential Variable — rexp_rs","title":"Random Exponential Variable — rexp_rs","text":"Generate random numbers exponential distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Exponential Variable — rexp_rs","text":"","code":"rexp_rs(n = 10, rate = 1, pmean = 0, psd = 1, rev = FALSE)"},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Exponential Variable — rexp_rs","text":"n number random numbers generate. Default 10. rate rate stats::rexp(). pmean Population mean. psd Population standard deviation. rev TRUE, distribution revered generate negatively skewed distribution. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Exponential Variable — rexp_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Exponential Variable — rexp_rs","text":"First, specify parameter, rate, desired population mean standard deviation. random numbers, drawn exponential distribution stats::rexp(), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rexp_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Exponential Variable — rexp_rs","text":"","code":"set.seed(90870962) x <- rexp_rs(n = 5000,              rate = 4,              pmean = 3,              psd = 1) mean(x) #> [1] 2.999214 sd(x) #> [1] 1.008795 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Lognormal Variable — rlnorm_rs","title":"Random Lognormal Variable — rlnorm_rs","text":"Generate random numbers lognormal distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Lognormal Variable — rlnorm_rs","text":"","code":"rlnorm_rs(n = 10, mui = 0, sigma = 1, rev = FALSE, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Lognormal Variable — rlnorm_rs","text":"n number random numbers generate. Default 10. mui parameter mui used stats::rlnorm(). sigma parameter sigma used stats::rlnorm(). rev TRUE, distribution revered generate negatively skewed distribution. Default FALSE. pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Lognormal Variable — rlnorm_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Lognormal Variable — rlnorm_rs","text":"First, specify parameter, mui sigma, desired population mean standard deviation. random numbers, drawn lognormal distribution stats::rlnorm(), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rlnorm_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Lognormal Variable — rlnorm_rs","text":"","code":"set.seed(90870962) x <- rlnorm_rs(n = 5000, mui = 0, sigma = 1, pmean = 0, psd = 1) mean(x) #> [1] -0.005312214 sd(x) #> [1] 0.9400859 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Generalized Normal Variable — rpgnorm_rs","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"Generate random numbers generalized normal distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"","code":"rpgnorm_rs(n = 10, p = 2, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"n number random numbers generate. Default 10. p parameter distribution. Must positive non-zero number. Default 2, resulting normal distribution. Higher 2 results negative excess kurtosis. Lower 2 results positive excess kurtosis. pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"First, specify parameter p desired population mean standard deviation. random numbers, drawn generalized normal distribution pgnorm::rpgnorm(), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rpgnorm_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Generalized Normal Variable — rpgnorm_rs","text":"","code":"set.seed(90870962) x <- rpgnorm_rs(n = 5000,                 p = 2,                 pmean = 0, psd = 1) mean(x) #> [1] -0.01118704 sd(x) #> [1] 1.010004 hist(x)  x_kurt <- function(p) {gamma(5/p)*gamma(1/p)/(gamma(3/p)^2) - 3} p <- 6 x <- rpgnorm_rs(n = 50000, p = p, pmean = 0, psd = 1) mean(x) #> [1] 0.002266498 sd(x) #> [1] 1.001834 x_kurt(p) #> [1] -1 qqnorm(x); qqline(x)  p <- 1 x <- rpgnorm_rs(n = 50000, p = p, pmean = 0, psd = 1) mean(x) #> [1] 0.007350372 sd(x) #> [1] 0.9993787 x_kurt(p) #> [1] 3 qqnorm(x); qqline(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Random t Distribution Variable — rt_rs","title":"Random t Distribution Variable — rt_rs","text":"Generate random numbers t distribution, rescaled user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random t Distribution Variable — rt_rs","text":"","code":"rt_rs(n = 10, df = 5, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random t Distribution Variable — rt_rs","text":"n number random numbers generate. Default 10. df df stats::rt(). pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random t Distribution Variable — rt_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random t Distribution Variable — rt_rs","text":"First, specify parameter df desired population mean standard deviation. random numbers, drawn generalized normal distribution stats::rt(), rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/rt_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random t Distribution Variable — rt_rs","text":"","code":"set.seed(90870962) x <- rt_rs(n = 5000,            df = 5,            pmean = 3,            psd = 1) mean(x) #> [1] 3.004783 sd(x) #> [1] 0.9926204 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"Generate random numbers uniform distribution, user-specified population mean standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"","code":"runif_rs(n = 10, min = 0, max = 1, pmean = 0, psd = 1)"},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"n number random numbers generate. Default 10. min min runif. max max runif. pmean Population mean. psd Population standard deviation.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"vector generated random numbers.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"First, user specifies parameters, min max, desired population mean standard deviation. random numbers generated rescaled desired population mean standard.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/runif_rs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random numbers from a uniform distribution with desired population mean and SD — runif_rs","text":"","code":"set.seed(90870962) x <- runif_rs(n = 5000, min = 2, max = 4, pmean = 3, psd = 1) mean(x) #> [1] 2.987606 sd(x) #> [1] 0.9978981 hist(x)"},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Datasets Based on a Model — sim_data","title":"Simulate Datasets Based on a Model — sim_data","text":"Get model matrix effect size specification simulate number datasets, along information.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Datasets Based on a Model — sim_data","text":"","code":"sim_data(   nrep = 10,   ptable = NULL,   model = NULL,   pop_es = NULL,   ...,   n = 100,   iseed = NULL,   number_of_indicators = NULL,   reliability = NULL,   x_fun = list(),   parallel = FALSE,   progress = FALSE,   ncores = max(1, parallel::detectCores(logical = FALSE) - 1) )  # S3 method for class 'sim_data' print(   x,   digits = 3,   digits_descriptive = 2,   data_long = TRUE,   fit_to_all_args = list(),   ... )"},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Datasets Based on a Model — sim_data","text":"nrep number replications generate simulated datasets. Default 10. ptable output ptable_pop(), ptable_pop object, representing population model. NULL, default, ptable_pop() called generate ptable_pop object. model lavaan model syntax population model. Required. Ignored ptable specified. pop_es character specify population effect sizes. See 'Details' ptable_pop() set effect sizes argument. Ignored ptable specified. ... sim_data, parameters passed ptable_pop. print.sim_data(), arguments ignored. n sample size dataset. Default 100. iseed seed random number generator. Default NULL seed changed. number_of_indicators named vector specify number indicators factors. See 'Details' set argument. Default NULL variables model syntax observed variables. reliability named vector set reliability coefficient set indicators. Default NULL. x_fun function(s) used generate exogenous variables. supplied, set list(), default, variables generated multivariate normal distribution. See 'Details' use argument. parallel TRUE, parallel processing used simulate datasets. Default FALSE. progress TRUE, progress data simulation displayed. Default `FALSE. ncores number CPU cores use parallel processing used. x sim_data object printed. digits numbers digits displayed decimal. digits_descriptive number digits displayed decimal descriptive statistics table. data_long TRUE, detailed information printed. fit_to_all_args named list arguments passed lavaan::sem() model fitted sample combined ","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Datasets Based on a Model — sim_data","text":"function sim_out() returns list class sim_data, length nrep. element sim_data_i object, following major elements: ptable: lavaan parameter table model, population values set column start. (output function ptable_pop().) mm_out: population model represented model matrices lavaan. (output function model_matrices_pop().) mm_lm_out: list regression model formula, one endogenous variable. (output internal function mm_lm().) mm_lm_dat_out: simulated dataset generated population model. (output internal function mm_lm_data()). model_original: original model syntax (.e., argument model). model_final: modified model syntax model latent variable model. Indicators added syntax. fit0: output lavaan::sem() ptable model .fit set FALSE. Use easy retrieval information model. print method sim_data returns x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Datasets Based on a Model — sim_data","text":"two tasks: Determine actual population model population values based : model syntax observed variables (path model) latent factors (latent variable model). textual specification effect sizes parameters. number indicators latent factor model latent variable model. reliability latent factor measured indicators model latent factor model. Generate m simulated datasets population model. simulated datasets can used fit model, test parameters, estimate power. output usually used fit_model() fit target model, default population model, dataset.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"setting-model-and-pop-es","dir":"Reference","previous_headings":"","what":"Setting model and pop_es","title":"Simulate Datasets Based on a Model — sim_data","text":"Please refer help page ptable_pop() specify model pop_es.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"setting-number-of-indicators-and-reliability","dir":"Reference","previous_headings":"","what":"Setting number_of_indicators and reliability","title":"Simulate Datasets Based on a Model — sim_data","text":"variable model replaced indicators, set number_of_indicators named numeric vector. names variables variables indicators, appeared model syntax. value name number indicators. argument reliability set named numeric vector (list, see section multigroup models) specify population reliability coefficients (\"omega\") set indicators. population factor loadings computed ensure population reliability coefficient target value. examples single group model: number indicator = c(m = 3, x = 4, y = 5) numbers indicators m, x, y 3, 4, 5, respectively. reliability = c(m = .90, x = .80, y = .70) population reliability coefficients m, x, y .90, .80, .70, respectively.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"multigroup-models","dir":"Reference","previous_headings":"","what":"Multigroup Models","title":"Simulate Datasets Based on a Model — sim_data","text":"Multigroup models supported. number groups inferred pop_es (see help page ptable_pop()). multigroup model, number indicators variable must across groups. However, population reliability coefficients can different across groups. multigroup model k groups, one population reliability coefficients differ across groups, argument reliability set named list. names variables population reliability coefficients set. element name either single value common reliability coefficient, numeric vector reliability coefficient group. example reliability model 2 groups: reliability = list(x = .80, m = c(.70, .80)) reliability coefficients x .80 groups, reliability coefficients m .70 one group .80 another.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"equal-numbers-of-indicators-and-or-reliability-coefficients","dir":"Reference","previous_headings":"","what":"Equal Numbers of Indicators and/or Reliability Coefficients","title":"Simulate Datasets Based on a Model — sim_data","text":"variables model number indicators, number_of_indicators can set one single value. Similarly, sets indicators population reliability groups, reliability can also set one single value.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"specify-the-distributions-of-exogenous-variables","dir":"Reference","previous_headings":"","what":"Specify The Distributions of Exogenous Variables","title":"Simulate Datasets Based on a Model — sim_data","text":"default, variables generated multivariate normal distribution. desired, users can supply function used generate exogenous variables setting x_fun named list. names list variables user function used generate data. element list must also list. first element list, can unnamed, function used. arguments need supplied, included named elements list. example: variables x w generated user-supplied functions. x, function power4mome::rexp_rs. additional argument calling function. w, function power4mome::rbinary_rx. argument p1 = .70 pasded function generating values w. requirements user-functions: must return numeric vector. mush argument n number values. population mean standard deviation generated values must 0 1, respectively. package power4mom helper functions generating values common nonnormal distributions scaled population mean standard deviation equal 0 1, respectively: rbinary_rs(). rexp_rs(). rbeta_rs(). rlnorm_rs(). rpgnorm_rs(). use x_fun, variables must zero covariances variables population. possible generate nonnormal multivariate data believe rarely needed estimating power data. function used --one function power4test(). Users usually call function directly.","code":"x_fun = list(x = list(power4mome::rexp_rs),              w = list(power4mome::rbinary_rs,                       p1 = .70)))"},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/sim_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Datasets Based on a Model — sim_data","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") data_all <- sim_data(nrep = 5,                      model = mod,                      pop_es = es,                      n = 100,                      iseed = 1234)  data_all #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #> m ~ x #>  y ~ m + x #> == Model on Variables/Indicators == #> m ~ x #>  y ~ m + x #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.300   #>   y ~                         #>     m                 0.300   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.910   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  5  #> Sample Sizes:  100  #>  #> ==== Descriptive Statistics ==== #>  #>   vars   n  mean   sd  skew kurtosis   se #> m    1 500 -0.03 1.00 -0.09    -0.03 0.04 #> y    2 500 -0.01 0.98  0.03     0.41 0.04 #> x    3 500  0.01 0.94 -0.21     0.17 0.04 #>  #> ===== Parameter Estimates Based on All 5 Samples Combined ===== #>  #> Total Sample Size: 500  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   m ~                       #>     x                 0.323 #>   y ~                       #>     m                 0.277 #>     x                -0.098 #>"},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'sim_out' Object — sim_out","title":"Create a 'sim_out' Object — sim_out","text":"Combine outputs sim_data(), fit_model(), optionally gen_mc() /gen_boot() one single object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'sim_out' Object — sim_out","text":"","code":"sim_out(data_all, ...)  # S3 method for class 'sim_out' print(x, digits = 3, digits_descriptive = 2, fit_to_all_args = list(), ...)"},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'sim_out' Object — sim_out","text":"data_all output sim_data(). ... Named arguments objects added replication element extra. example, set fit = fit_all, fit_all output fit_model(), data_all[[1]]$extra$fit set first output fit_all. x sim_out object printed. digits numbers digits displayed decimal. digits_descriptive number digits displayed decimal descriptive statistics table. fit_to_all_args named list arguments passed lavaan::sem() model fitted sample combined ","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'sim_out' Object — sim_out","text":"function sim_out() returns sim_out object, list length equal length data_all. element list sim_data object element extra added . named elements added name. example. output fit_model() replication can added fit, extra. See description argument ... details. print method sim_out return x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a 'sim_out' Object — sim_out","text":"merges one object output sim_data(), list M simulated datasets, fit_model(), list lavaan::sem() output M datasets, optionally output gen_mc() gen_boot(), list M sets Monte Carlo bootstrap estimates based results fit_model(). list M elements, data, model fit results, optionally Monte Carlo estimates matched. object can used testing effects interests, processed estimate power test. function used --one function power4test(). Users usually call function directly.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/sim_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'sim_out' Object — sim_out","text":"","code":"mod <- \"m ~ x  y ~ m + x\" es <- c(\"y ~ m\" = \"m\",   \"m ~ x\" = \"m\",   \"y ~ x\" = \"n\") dats <- sim_data(nrep = 5,                  model = mod,                  pop_es = es,                  n = 100,                  iseed = 1234)  fits <- fit_model(dats) sim_out_all <- sim_out(data_all = dats,                        fit = fits) sim_out_all #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #> m ~ x #>  y ~ m + x #> == Model on Variables/Indicators == #> m ~ x #>  y ~ m + x #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.300   #>   y ~                         #>     m                 0.300   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.910   #>     x                 1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  5  #> Sample Sizes:  100  #>  #> ==== Descriptive Statistics ==== #>  #>   vars   n  mean   sd  skew kurtosis   se #> m    1 500 -0.03 1.00 -0.09    -0.03 0.04 #> y    2 500 -0.01 0.98  0.03     0.41 0.04 #> x    3 500  0.01 0.94 -0.21     0.17 0.04 #>  #> ===== Parameter Estimates Based on All 5 Samples Combined ===== #>  #> Total Sample Size: 500  #>  #> ==== Standardized Estimates ==== #>  #> Variances and error variances omitted. #>  #> Regressions: #>                     est.std #>   m ~                       #>     x                 0.323 #>   y ~                       #>     m                 0.277 #>     x                -0.098 #>"},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Test Results — summarize_tests","title":"Summarize Test Results — summarize_tests","text":"Extract summarize test results.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Test Results — summarize_tests","text":"","code":"summarize_tests(object)  # S3 method for class 'test_summary_list' print(x, digits = 3, ...)  # S3 method for class 'test_summary' print(x, digits = 2, ...)  # S3 method for class 'test_out_list' print(x, digits = 3, test_long = FALSE, ...)"},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Test Results — summarize_tests","text":"object power4test object element test_all power4test object. x object printed. digits numbers digits decimal print numeric results. ... Optional arguments. used. test_long TRUE, detailed report printed.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Test Results — summarize_tests","text":"function summarize_tests() returns list class test_summary_list. element contains summary test stored. elements class test_summary, elments: test_attributes: stored information test, printing. nrep: number datasets (replications). mean: means numeric information. significance tests, rejection rates. nvalid: number non-NA replications used compute mean. print methods return x invisibly. called side effects.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Test Results — summarize_tests","text":"function used extract information test stored power4test object. method print.test_out_list() used print contest list test stored power4test object, option print just names tests.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/summarize_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Test Results — summarize_tests","text":"","code":"mod <- \" m ~ a*x y ~ b*m + x ab := a * b \"  mod_es <- c(\"y ~ m\" = \"l\",             \"m ~ x\" = \"m\",             \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 2,                        model = mod,                        pop_es = mod_es,                        n = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s):  test_out <- power4test(object = sim_only,                        test_fun = test_parameters) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs    test_out #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> ====================== Test(s) Conducted ====================== #>  #> - test_parameters: CIs  #>  #> Call print() and set 'test_long = TRUE' for a detailed report."},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":null,"dir":"Reference","previous_headings":"","what":"Test a Moderated Mediation Effect — test_index_of_mome","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"Test moderated mediation effect power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"","code":"test_index_of_mome(   fit = fit,   x = NULL,   m = NULL,   y = NULL,   w = NULL,   mc_ci = TRUE,   mc_out = NULL,   boot_ci = FALSE,   boot_out = NULL,   ...,   fit_name = \"fit\",   get_map_names = FALSE,   get_test_name = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"fit fit object, passed manymome::index_of_mome(). x name x-variable, predictor. m character vector name(s) mediator(s). path moves first mediator vector last mediator vector. Can NULL path direct path without mediator. y name y-variable, outcome variable. w name moderator. mc_ci Logical. TRUE, default, Monte Carlo confidence intervals formed. argument boot_ci TRUE. mc_out pre-generated Monte Carlo estimates generated manymome::do_mc, stored power4test object. Users set argument let power4test() set automatically. boot_ci Logical. TRUE, default, nonparametric bootstrap confidence intervals formed. argument mc_ci TRUE. boot_out pre-generated bootstrap estimates generated manymome::do_boot, stored power4test object. Users set argument let power4test() set automatically. ... Additional arguments passed manymome::index_of_mome(). fit_name name model fit object extracted. Default \"fit\". Used one model fitted replication. name model test conducted. get_map_names Logical. Used power4test() determine extract stored information assign function. Users use argument. get_test_name Logical. Used power4test() get default name test. Users use argument.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"normal usage, returns named numeric vector following elements: est: mean estimated indirect effect across datasets. cilo cihi: means lower upper limits confidence interval (95% default), respectively. sig: Whether test confidence interval significant (1) significant (0).","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"function used power4test() testing moderated mediation effect, setting test_fun argument. uses manymome::index_of_mome() test. can used models fitted lavaan::sem() fitted sequence calls stats::lm(), although nonparametric bootstrap confidence interval supported models fitted regression using stats::lm().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/test_index_of_mome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test a Moderated Mediation Effect — test_index_of_mome","text":"","code":"mod <- \" m ~ x + w + x:w y ~ m \"  mod_es <- c(\"m ~ x\" = \"n\",             \"y ~ x\" = \"m\",             \"m ~ w\" = \"n\",             \"m ~ x:w\" = \"l\")  sim_only <- power4test(nrep = 2,                        model = mod,                        pop_es = mod_es,                        n = 100,                        R = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate Monte Carlo estimates: #> Error in (function (fit_all, R = 100, ..., iseed = NULL, parallel = FALSE,     progress = FALSE, ncores = max(1, parallel::detectCores(logical = FALSE) -         1), compute_implied_stats = FALSE) {    manymome_implied <- (utils::packageVersion(\"manymome\") >=         \"0.2.7.1\")    if (isFALSE(manymome_implied)) {        stop(\"manymome 0.2.7.1 or later is required. \", \"If not available from CRAN, can be installed from \",             \"GitHub: remotes::install_github('sfcheung/manymome')\")    }    out <- do_FUN(X = fit_all, FUN = gen_mc_i, R = R, ..., compute_implied_stats = compute_implied_stats,         iseed = iseed, parallel = parallel, progress = progress,         ncores = ncores)    class(out) <- c(\"mc_list\", class(out))    return(out)})(fit_all = structure(list(new(\"lavaan\", version = \"0.6-19\",     call = lavaan::lavaan(model = \"\\nm ~ x + w + x:w\\ny ~ m\\n\",         data = structure(list(m = c(-1.23542600889914, 0.174613455387578,         1.0670040021397, -2.21263933960137, 0.425304984337834,         0.426214560233556, -0.707538367160214, -0.270990769114361,         -0.560164710444827, -1.00740268308227, -0.379427282833195,         -1.01356529134135, -0.861822017117868, 0.073362015911817,         0.979183596456694, -0.0313039087147126, -0.501741649007826,         -1.04166787354422, -0.80189467639593, 2.32700539114526,         0.151768713250086, -0.482659721109833, -0.60752182340503,         0.175950754021328, -0.684462095158739, -1.360670061036,         1.0422042362627, -1.10871363388338, -0.130595842374781,         -0.9433645940004, 1.07541714076864, -0.507167158713274,         -0.628661899538265, -0.485788480175762, -1.61461092005116,         -0.97073461333541, -2.02404194682097, -1.38753150941349,         -0.291864875543467, -0.533449264871736, 1.4323837805481,         -1.03590778829984, -1.00285845451303, -0.155369397600617,         -0.972090143643519, -0.913440413507164, -1.25020804775704,         -1.37986133679446, -0.536521513460091, -0.511889283292673,         -1.93709870511262, -0.485953012841021, -1.14932721222312,         -1.02580290215208, 0.11008429310468, 0.526166176774964,         2.04790112587191, -0.603276744066453, 1.58312428028223,         -1.02613730274382, 0.785737130000078, 2.41962755174221,         -0.0344860449424689, -0.621678392535732, -0.0334013791663087,         1.61325651613939, -1.07951281027287, 1.2973784901514,         1.31163329821128, 0.557766440764892, 0.0345960694629141,         -0.863412276147096, -0.33891897867418, 0.635205530728098,         1.78855823577497, -0.164558611338356, -1.40816154235214,         -0.815726035582333, 0.254834568524161, -0.329293438703813,         0.102751202292999, -0.355057759651278, -1.29550879006725,         0.00569411572075434, 0.738463059112333, 0.747816258233102,         0.418929044127118, -0.409751013543456, 0.161643177186537,         -1.17686008751369, 0.183547869773527, 0.158919536459877,         1.89339478187542, 0.88740320000406, -0.358552838478264,         0.565767816035712, -1.2021544770888, 0.838487269418226,         0.962529048041967, 2.05290134151904), y = c(0.414523534374985,         -0.47471847352936, 0.0659934937044614, -0.502477782393866,         -0.825998587129336, 0.166989279752984, -0.896264626244759,         0.168185387655757, 0.354968261014854, -0.0521051168711336,         -0.195934618716253, -0.64906975160576, -1.10976723139873,         0.849274202655058, 0.022362526076024, 0.831140617306835,         -1.24428785134423, 0.169026413766175, 0.673166306947679,         -0.0262763764485261, -0.191392168556024, -0.781906646699876,         2.05816198776349, 0.750501453155831, 1.82420830237829,         0.080059641091988, -0.631409298966366, -1.51328812003373,         -0.636099831085051, 0.226301532497161, 1.01369034746575,         0.252750135066342, -1.17194831284112, 0.668714328525034,         -1.65010093484436, -0.365852248191901, -0.31611832883308,         -1.94824604732137, 0.920057522390905, -0.622871594878875,         -0.334036649997458, 1.39514789252962, 0.63667441103895,         -0.108431696990383, 0.513762778404674, 0.399271807273958,         1.6628564474304, 0.275893403585483, 0.506272623207687,         0.347551975023811, -0.377237647496313, 0.0976194631092374,         1.63874464512173, -0.875592474189569, 0.121759998641046,         1.36213066084498, -0.23462108692271, -1.05338280794309,         -0.869783605635912, -0.390127029647055, -0.847350073129572,         -0.260639392099399, -0.414419706341893, -0.183050797719434,         0.407056097880578, 0.624633128202147, 1.67820574370471,         -0.0686936535649907, -0.320839912658177, 1.47100571704891,         1.7043293978271, 0.0432440375575291, -0.332657319133519,         -1.8222354175631, 1.41126239874678, -0.837582434076861,         -1.12376279439532, 3.04376588609529, 0.235021308250671,         -0.0332586101133057, -2.7322195229558, -0.0997905884418961,         0.976031734922396, 0.413868915451097, 0.912322161610113,         1.98373220068438, 1.16910851401363, -0.50873701541522,         0.704180178465512, -0.198416273822079, -0.538070788884863,         -2.85575865501923, -0.789646852263761, 0.487814635163685,         2.16803253951933, 0.500694614280786, 0.62021020366732,         -0.965903210133575, 0.162654708118265, -2.07823754188738        ), x = c(0.485226820569252, 0.696768778564913, 0.185513915583057,         0.700733515544461, 0.311681028661359, 0.760462361967838,         1.84246362620766, 1.1123628412626, 0.0326639575014441,         -1.11444896479736, 0.418057822385083, -0.400235237343163,         1.49349310261748, -1.60708093984972, -0.415751788401515,         0.42200837321742, -0.151736536534977, -0.60615111526422,         -0.304721068966714, 0.629536099884472, 0.895171980275539,         0.660212631820405, 2.27348352044748, 1.17349757263239,         0.287709728313787, -0.659770093821306, 2.91914013071762,         0.677415500438328, -0.684320344136007, 0.186492083080971,         -0.324393300483657, -0.274704218225806, -0.933503340589868,         0.116845344986082, 0.319160238648117, -1.07754212275943,         -3.23315213292314, -0.254874652654534, 0.0295178303214797,         0.594273774110513, 0.0591351681787969, 0.413398894737046,         -1.09777217457042, 0.711175257270441, 0.718888729854143,         0.251651069028968, 1.35727443615177, 0.404468471278607,         0.264364269837939, 0.268043904143697, 0.436930577039483,         1.06012390548736, 0.452190396528715, 0.663198615687065,         -1.13637355399084, -0.370497517092117, 1.47696958979247,         -1.22390375051376, 0.258068387396106, 0.405002805433516,         0.97580332180945, -0.348876736539909, 0.158625439491262,         -1.76325506654115, 0.338596047099905, -0.666565029559273,         -0.238646624327644, -1.18776528245719, 0.384935321768578,         0.66657951565448, -0.304613889457735, 1.8250110640863,         0.670559370567588, 0.948632573255153, 2.04940300167091,         -0.651113609237535, 0.808619272846293, 0.986580613954563,         -0.00617079609070003, 0.319052357931912, -1.01182190274184,         0.470167547726389, -0.700970331629097, 0.813682862526491,         -0.811430783992772, 0.31939748709946, -0.846522653163624,         -0.245763179128733, -1.55285901110546, 0.128434032925753,         0.985443389404868, 0.183247523067191, -1.76622921343046,         -0.620533696615944, 1.65604303699874, 1.80980538558388,         -1.17503676801214, -0.366703258827641, 0.353625448927287,         0.319156220867898), w = c(-0.579956989019402, -0.953278701946907,         -0.179428586945621, 1.0098082149443, 0.0236266149214088,         -0.649028219583901, -0.504374222048191, 1.61439149545836,         -0.446959811255663, 0.763176761113315, 1.4717186861858,         0.443664903687416, -0.421721870070189, -0.0400016262060736,         -0.492279968227887, 1.22771711731275, -0.149553565244392,         1.54998338398246, -0.561612535381314, -0.647117250632361,         0.143132159050427, 0.0241886479910512, -0.504451524580869,         -1.58139680993034, 0.030066421255418, -0.716576699070701,         1.08261095547612, -0.952685454939293, 1.12648272900916,         -0.649043017379116, 0.292470078406726, 0.898702724402737,         -0.518742356791874, 0.554438552345125, -0.0879736711840128,         -1.13521292940752, -0.270079610999902, 1.61978987753494,         -0.21413117369664, -0.817782462924957, -0.0540229240816071,         0.330141609857869, 0.955324614657399, 1.14395987779244,         0.100522398375063, 1.16457524565738, -0.764259947799148,         -2.3445134046903, -0.471683425529536, -0.51585548950739,         -2.31603615150256, 0.562471756969533, -0.783775139422381,         -0.226053986228165, -1.58710298765404, 0.547524201868316,         1.89122701735548, -0.878077110224044, -0.112558911044787,         1.94871306497599, 0.933816332207727, 1.91305942169705,         -0.00523405793193957, -0.152260048921635, -0.509631657179118,         1.43457370342612, -1.28583853233299, 0.307314215255018,         -0.046318533277383, 2.25184180012688, -0.608033728609708,         -1.50928816985104, 0.232631769508576, -0.0396486960510932,         -0.839125067505345, 0.132291088244156, -0.275524746705939,         -0.678758641268032, 0.500835931775825, -0.331662312006789,         -1.83498025077253, -2.65174124837268, -0.580582172084415,         1.45418687087119, 0.838129379964693, 1.21505358044614,         0.982505442732795, 0.315764024018431, -1.50706262771632,         0.205569787166277, 1.59722809034381, -3.39606353457436,         -0.781352284302082, 1.10246464075191, 0.528745019445293,         0.789394403514854, 0.457099505856081, 0.538833115658123,         0.0146431224111012, -0.916489135703093), `x:w` = c(-0.281410685848801,         -0.664214836787491, -0.0332864997318172, 0.707606460483598,         0.00736396764249052, -0.493561532848554, -0.929291158120578,         1.79578911079824, -0.0145994762797085, -0.850521551380139,         0.61526350911027, -0.177570328028164, -0.629838704172772,         0.0642858510387739, 0.204666277184985, 0.518106903448335,         0.0226927400166418, -0.939524156841979, 0.1711351721265,         -0.407383670131058, 0.128127898258284, 0.0159696509503493,         -1.14686222799921, -1.85576531782186, 0.00865040189076418,         0.472775875976038, 3.16029308608488, -0.645363894218017,         -0.770875048778815, -0.12104138432019, -0.0948753340270719,         -0.246877429324456, 0.484247722970675, 0.0647835639223498,         -0.0280776978898405, 1.22323974973773, 0.873208470363384,         -0.412843382410047, -0.00632068765171673, -0.485986670643804,         -0.00319465470107621, 0.136480176621952, -1.0487287796531,         0.813555960396101, 0.0722644192897413, 0.293066605534353,         -1.03731048972247, -0.94828175268729, -0.124696244384773,         -0.138271919381519, -1.01194701212032, 0.596289755724881,         -0.354415591084755, -0.149918690737062, 1.8035418626299,         -0.202856357340054, 2.79328479202796, 1.07468186844349,         -0.0290478966603898, 0.789234258300223, 0.911221078928217,         -0.667421927848592, -0.000830254739776642, 0.268473302692877,         -0.172559264597823, -0.956236663029186, 0.30686102517168,         -0.365017155685488, -0.017829639510978, 1.50103161645909,         0.185215518993292, -2.7544676088727, 0.155993412935695,         -0.03761204456116, -1.71970543212276, -0.0861365279366136,         -0.222794620332516, -0.66965011702918, -0.00309055640988437,         -0.105817642682915, 1.85667320883036, -1.2467626799523,         0.406970877703954, 1.18324693573891, -0.680083979872127,         0.388085060285698, -0.831713114129867, -0.077603170397251,         2.34025578174956, 0.0264021568134537, 1.57397786300107,         -0.622320230889563, 1.38004723051496, -0.684116458914149,         0.875624507800138, 1.42865024283095, -0.537108726021074,         -0.197591859476085, 0.00517818073632286, -0.292503209017485        )), class = \"data.frame\", row.names = c(NA, -100L)),         model.type = \"sem\", int.ov.free = TRUE, int.lv.free = FALSE,         auto.fix.first = TRUE, auto.fix.single = TRUE, auto.var = TRUE,         auto.cov.lv.x = TRUE, auto.cov.y = TRUE, auto.th = TRUE,         auto.delta = TRUE, auto.efa = TRUE), timing = list(init = c(elapsed = 0.000999999999997669),         ov.names = c(elapsed = 0.00100000000000122), Options = c(elapsed = 0.00199999999999889),         Data = c(elapsed = 0.00100000000000122), ParTable = c(elapsed = 0.00300000000000011),         SampleStats = c(elapsed = 0.00100000000000122), h1 = c(elapsed = 0),         bounds = c(elapsed = 0), start = c(elapsed = 0.000999999999997669),         Model = c(elapsed = 0.00400000000000134), cache = c(elapsed = 0),         optim = c(elapsed = 0.00199999999999889), implied = c(elapsed = 0.00100000000000122),         loglik = c(elapsed = 0), vcov = c(elapsed = 0.00100000000000122),         test = c(elapsed = 0), Fit = c(elapsed = 0), baseline = c(elapsed = 0.0129999999999981),         rotation = c(elapsed = 0), total = c(elapsed = 0.0309999999999988)),     Options = list(model.type = \"sem\", mimic = \"lavaan\", meanstructure = FALSE,         int.ov.free = TRUE, int.lv.free = FALSE, marker.int.zero = FALSE,         conditional.x = FALSE, fixed.x = TRUE, orthogonal = FALSE,         orthogonal.x = FALSE, orthogonal.y = FALSE, std.lv = FALSE,         correlation = FALSE, effect.coding = \"\", ceq.simple = FALSE,         parameterization = \"delta\", auto.fix.first = TRUE, auto.fix.single = TRUE,         auto.var = TRUE, auto.cov.lv.x = TRUE, auto.cov.y = TRUE,         auto.th = TRUE, auto.delta = TRUE, auto.efa = TRUE, rotation = \"geomin\",         rotation.se = \"bordered\", rotation.args = list(orthogonal = FALSE,             row.weights = \"none\", std.ov = TRUE, geomin.epsilon = 0.001,             orthomax.gamma = 1, cf.gamma = 0, oblimin.gamma = 0,             promax.kappa = 4, target = structure(numeric(0), dim = c(0L,             0L)), target.mask = structure(numeric(0), dim = c(0L,             0L)), rstarts = 30L, algorithm = \"gpa\", reflect = TRUE,             order.lv.by = \"index\", gpa.tol = 1e-05, tol = 1e-08,             warn = FALSE, verbose = FALSE, jac.init.rot = TRUE,             max.iter = 10000L), std.ov = FALSE, missing = \"listwise\",         sampling.weights.normalization = \"total\", samplestats = TRUE,         sample.cov.rescale = TRUE, sample.cov.robust = FALSE,         sample.icov = TRUE, ridge = FALSE, ridge.constant = \"default\",         group.label = NULL, group.equal = character(0), group.partial = character(0),         group.w.free = FALSE, level.label = NULL, estimator = \"ML\",         estimator.orig = \"ML\", estimator.args = list(), likelihood = \"normal\",         link = \"default\", representation = \"LISREL\", do.fit = TRUE,         bounds = \"none\", rstarts = 0L, se = \"standard\", test = \"standard\",         information = c(\"expected\", \"expected\"), h1.information = c(\"structured\",         \"structured\"), observed.information = c(\"hessian\", \"hessian\"        ), information.meat = \"first.order\", h1.information.meat = \"structured\",         omega.information = \"expected\", omega.h1.information = \"unstructured\",         omega.information.meat = \"first.order\", omega.h1.information.meat = \"unstructured\",         scaled.test = \"standard\", ug2.old.approach = FALSE, bootstrap = 1000L,         gamma.n.minus.one = FALSE, gamma.unbiased = FALSE, control = list(),         optim.method = \"nlminb\", optim.attempts = 4L, optim.force.converged = FALSE,         optim.gradient = \"analytic\", optim.init_nelder_mead = FALSE,         optim.var.transform = \"none\", optim.parscale = \"none\",         optim.partrace = FALSE, optim.dx.tol = 0.001, optim.bounds = list(            lower = character(0), upper = character(0)), em.iter.max = 10000L,         em.fx.tol = 1e-08, em.dx.tol = 1e-04, em.zerovar.offset = 1e-04,         em.h1.iter.max = 500L, em.h1.tol = 1e-05, em.h1.warn = TRUE,         optim.gn.iter.max = 200L, optim.gn.stephalf.max = 10L,         optim.gn.tol.x = 1e-05, integration.ngh = 21L, parallel = \"no\",         ncpus = 1L, cl = NULL, iseed = NULL, zero.add = c(0.5,         0), zero.keep.margins = TRUE, zero.cell.warn = FALSE,         allow.empty.cell = FALSE, cat.wls.w = TRUE, start = \"default\",         check.start = TRUE, check.post = TRUE, check.gradient = TRUE,         check.vcov = TRUE, check.lv.names = TRUE, check.lv.interaction = TRUE,         check.delta.cat.mediator = TRUE, h1 = TRUE, baseline = TRUE,         baseline.conditional.x.free.slopes = TRUE, implied = TRUE,         loglik = TRUE, store.vcov = \"default\", parser = \"new\",         categorical = FALSE, .categorical = FALSE, .clustered = FALSE,         .multilevel = FALSE), ParTable = list(id = 1:12, lhs = c(\"m\",     \"m\", \"m\", \"y\", \"m\", \"y\", \"x\", \"x\", \"x\", \"w\", \"w\", \"x:w\"),         op = c(\"~\", \"~\", \"~\", \"~\", \"~~\", \"~~\", \"~~\", \"~~\", \"~~\",         \"~~\", \"~~\", \"~~\"), rhs = c(\"x\", \"w\", \"x:w\", \"m\", \"m\",         \"y\", \"x\", \"w\", \"x:w\", \"w\", \"x:w\", \"x:w\"), user = c(1L,         1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), block = c(1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), group = c(1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), free = c(1L,         2L, 3L, 4L, 5L, 6L, 0L, 0L, 0L, 0L, 0L, 0L), ustart = c(NA_real_,         NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_,         NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), exo = c(0L,         0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L), label = c(\"\",         \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"), plabel = c(\".p1.\",         \".p2.\", \".p3.\", \".p4.\", \".p5.\", \".p6.\", \".p7.\", \".p8.\",         \".p9.\", \".p10.\", \".p11.\", \".p12.\"), start = c(0.074368922158334,         0.141856683400787, 0.104619186839306, -0.0416812345160806,         0.949276552167061, 1.05303084948297, 0.912677459948807,         0.0459608854698236, -0.0621636081382202, 1.09211750571828,         0.267921172542183, 0.830568734147243), est = c(0.074368922158334,         0.141856683400787, 0.104619186839306, -0.0416812345160806,         0.949276552167061, 1.05303084948297, 0.912677459948807,         0.0459608854698236, -0.0621636081382202, 1.09211750571828,         0.267921172542183, 0.830568734147243), se = c(0.102491114882515,         0.0973873253286045, 0.111840330927834, 0.102960365252622,         0.134247977451743, 0.148921050893608, 0, 0, 0, 0, 0,         0)), pta = list(names = c(\"id\", \"lhs\", \"op\", \"rhs\", \"user\",     \"block\", \"group\", \"free\", \"ustart\", \"exo\", \"label\", \"plabel\",     \"start\", \"est\", \"se\"), vidx = list(ov = list(1:5), ov.x = list(        3:5), ov.nox = list(1:2), ov.model = list(1:5), ov.y = list(        2L), ov.num = list(1:5), ov.ord = list(integer(0)), ov.ind = list(        integer(0)), ov.orphan = list(3:5), ov.interaction = list(        5L), ov.efa = list(integer(0)), th = list(integer(0)),         th.mean = list(1:2), lv = list(integer(0)), lv.regular = list(            integer(0)), lv.formative = list(integer(0)), lv.x = list(            integer(0)), lv.y = list(integer(0)), lv.nox = list(            integer(0)), lv.nonnormal = list(integer(0)), lv.interaction = list(            integer(0)), lv.efa = list(integer(0)), lv.rv = list(            integer(0)), lv.ind = list(integer(0)), lv.marker = list(            integer(0)), eqs.y = list(integer(0)), eqs.x = list(            integer(0))), meanstructure = FALSE, nblocks = 1L,         ngroups = 1L, nlevels = 1L, nvar = list(5L), nfac = list(            0L), nfac.nonnormal = list(0L), th.idx = list(c(0,         0)), vnames = list(ov = list(c(\"m\", \"y\", \"x\", \"w\", \"x:w\"        )), ov.x = list(c(\"x\", \"w\", \"x:w\")), ov.nox = list(c(\"m\",         \"y\")), ov.model = list(c(\"m\", \"y\", \"x\", \"w\", \"x:w\")),             ov.y = list(\"y\"), ov.num = list(c(\"m\", \"y\", \"x\",             \"w\", \"x:w\")), ov.ord = list(character(0)), ov.ind = list(                character(0)), ov.orphan = list(c(\"x\", \"w\", \"x:w\"            )), ov.interaction = list(\"x:w\"), ov.efa = list(character(0)),             th = list(character(0)), th.mean = list(c(\"m\", \"y\"            )), lv = list(character(0)), lv.regular = list(character(0)),             lv.formative = list(character(0)), lv.x = list(character(0)),             lv.y = list(character(0)), lv.nox = list(character(0)),             lv.nonnormal = list(character(0)), lv.interaction = list(                character(0)), lv.efa = list(character(0)), lv.rv = list(                character(0)), lv.ind = list(character(0)), lv.marker = list(                structure(character(0), names = character(0))),             eqs.y = list(c(\"m\", \"y\")), eqs.x = list(c(\"x\", \"w\",             \"x:w\", \"m\")))), Data = new(\"lavData\", data.type = \"full\",         group = character(0), ngroups = 1L, group.label = character(0),         block.label = character(0), cluster = character(0), nlevels = 1L,         level.label = character(0), std.ov = FALSE, nobs = list(            100L), norig = list(100L), ov.names = list(c(\"m\",         \"y\", \"x\", \"w\", \"x:w\")), ov.names.x = list(c(\"x\", \"w\",         \"x:w\")), ov.names.l = list(), ordered = character(0),         weights = list(NULL), sampling.weights = character(0),         ov = list(name = c(\"m\", \"y\", \"x\", \"w\", \"x:w\"), idx = 1:5,             nobs = c(100L, 100L, 100L, 100L, 100L), type = c(\"numeric\",             \"numeric\", \"numeric\", \"numeric\", \"numeric\"), exo = c(0L,             0L, 1L, 1L, 1L), user = c(0L, 0L, 0L, 0L, 0L), mean = c(-0.148256696929575,             0.0412431799463585, 0.154603672070928, -0.00810513624308551,             0.0447078016440074), var = c(1.00338071748314, 1.06541072344711,             0.921896424190714, 1.10314899567504, 0.838958317320448            ), nlev = c(0L, 0L, 0L, 0L, 0L), lnam = c(\"\", \"\",             \"\", \"\", \"\")), case.idx = list(1:100), missing = \"listwise\",         Mp = list(NULL), Rp = list(NULL), Lp = list(NULL), eXo = list(            structure(c(0.485226820569252, 0.696768778564913,             0.185513915583057, 0.700733515544461, 0.311681028661359,             0.760462361967838, 1.84246362620766, 1.1123628412626,             0.0326639575014441, -1.11444896479736, 0.418057822385083,             -0.400235237343163, 1.49349310261748, -1.60708093984972,             -0.415751788401515, 0.42200837321742, -0.151736536534977,             -0.60615111526422, -0.304721068966714, 0.629536099884472,             0.895171980275539, 0.660212631820405, 2.27348352044748,             1.17349757263239, 0.287709728313787, -0.659770093821306,             2.91914013071762, 0.677415500438328, -0.684320344136007,             0.186492083080971, -0.324393300483657, -0.274704218225806,             -0.933503340589868, 0.116845344986082, 0.319160238648117,             -1.07754212275943, -3.23315213292314, -0.254874652654534,             0.0295178303214797, 0.594273774110513, 0.0591351681787969,             0.413398894737046, -1.09777217457042, 0.711175257270441,             0.718888729854143, 0.251651069028968, 1.35727443615177,             0.404468471278607, 0.264364269837939, 0.268043904143697,             0.436930577039483, 1.06012390548736, 0.452190396528715,             0.663198615687065, -1.13637355399084, -0.370497517092117,             1.47696958979247, -1.22390375051376, 0.258068387396106,             0.405002805433516, 0.97580332180945, -0.348876736539909,             0.158625439491262, -1.76325506654115, 0.338596047099905,             -0.666565029559273, -0.238646624327644, -1.18776528245719,             0.384935321768578, 0.66657951565448, -0.304613889457735,             1.8250110640863, 0.670559370567588, 0.948632573255153,             2.04940300167091, -0.651113609237535, 0.808619272846293,             0.986580613954563, -0.00617079609070003, 0.319052357931912,             -1.01182190274184, 0.470167547726389, -0.700970331629097,             0.813682862526491, -0.811430783992772, 0.31939748709946,             -0.846522653163624, -0.245763179128733, -1.55285901110546,             0.128434032925753, 0.985443389404868, 0.183247523067191,             -1.76622921343046, -0.620533696615944, 1.65604303699874,             1.80980538558388, -1.17503676801214, -0.366703258827641,             0.353625448927287, 0.319156220867898, -0.579956989019402,             -0.953278701946907, -0.179428586945621, 1.0098082149443,             0.0236266149214088, -0.649028219583901, -0.504374222048191,             1.61439149545836, -0.446959811255663, 0.763176761113315,             1.4717186861858, 0.443664903687416, -0.421721870070189,             -0.0400016262060736, -0.492279968227887, 1.22771711731275,             -0.149553565244392, 1.54998338398246, -0.561612535381314,             -0.647117250632361, 0.143132159050427, 0.0241886479910512,             -0.504451524580869, -1.58139680993034, 0.030066421255418,             -0.716576699070701, 1.08261095547612, -0.952685454939293,             1.12648272900916, -0.649043017379116, 0.292470078406726,             0.898702724402737, -0.518742356791874, 0.554438552345125,             -0.0879736711840128, -1.13521292940752, -0.270079610999902,             1.61978987753494, -0.21413117369664, -0.817782462924957,             -0.0540229240816071, 0.330141609857869, 0.955324614657399,             1.14395987779244, 0.100522398375063, 1.16457524565738,             -0.764259947799148, -2.3445134046903, -0.471683425529536,             -0.51585548950739, -2.31603615150256, 0.562471756969533,             -0.783775139422381, -0.226053986228165, -1.58710298765404,             0.547524201868316, 1.89122701735548, -0.878077110224044,             -0.112558911044787, 1.94871306497599, 0.933816332207727,             1.91305942169705, -0.00523405793193957, -0.152260048921635,             -0.509631657179118, 1.43457370342612, -1.28583853233299,             0.307314215255018, -0.046318533277383, 2.25184180012688,             -0.608033728609708, -1.50928816985104, 0.232631769508576,             -0.0396486960510932, -0.839125067505345, 0.132291088244156,             -0.275524746705939, -0.678758641268032, 0.500835931775825,             -0.331662312006789, -1.83498025077253, -2.65174124837268,             -0.580582172084415, 1.45418687087119, 0.838129379964693,             1.21505358044614, 0.982505442732795, 0.315764024018431,             -1.50706262771632, 0.205569787166277, 1.59722809034381,             -3.39606353457436, -0.781352284302082, 1.10246464075191,             0.528745019445293, 0.789394403514854, 0.457099505856081,             0.538833115658123, 0.0146431224111012, -0.916489135703093,             -0.281410685848801, -0.664214836787491, -0.0332864997318172,             0.707606460483598, 0.00736396764249052, -0.493561532848554,             -0.929291158120578, 1.79578911079824, -0.0145994762797085,             -0.850521551380139, 0.61526350911027, -0.177570328028164,             -0.629838704172772, 0.0642858510387739, 0.204666277184985,             0.518106903448335, 0.0226927400166418, -0.939524156841979,             0.1711351721265, -0.407383670131058, 0.128127898258284,             0.0159696509503493, -1.14686222799921, -1.85576531782186,             0.00865040189076418, 0.472775875976038, 3.16029308608488,             -0.645363894218017, -0.770875048778815, -0.12104138432019,             -0.0948753340270719, -0.246877429324456, 0.484247722970675,             0.0647835639223498, -0.0280776978898405, 1.22323974973773,             0.873208470363384, -0.412843382410047, -0.00632068765171673,             -0.485986670643804, -0.00319465470107621, 0.136480176621952,             -1.0487287796531, 0.813555960396101, 0.0722644192897413,             0.293066605534353, -1.03731048972247, -0.94828175268729,             -0.124696244384773, -0.138271919381519, -1.01194701212032,             0.596289755724881, -0.354415591084755, -0.149918690737062,             1.8035418626299, -0.202856357340054, 2.79328479202796,             1.07468186844349, -0.0290478966603898, 0.789234258300223,             0.911221078928217, -0.667421927848592, -0.000830254739776642,             0.268473302692877, -0.172559264597823, -0.956236663029186,             0.30686102517168, -0.365017155685488, -0.017829639510978,             1.50103161645909, 0.185215518993292, -2.7544676088727,             0.155993412935695, -0.03761204456116, -1.71970543212276,             -0.0861365279366136, -0.222794620332516, -0.66965011702918,             -0.00309055640988437, -0.105817642682915, 1.85667320883036,             -1.2467626799523, 0.406970877703954, 1.18324693573891,             -0.680083979872127, 0.388085060285698, -0.831713114129867,             -0.077603170397251, 2.34025578174956, 0.0264021568134537,             1.57397786300107, -0.622320230889563, 1.38004723051496,             -0.684116458914149, 0.875624507800138, 1.42865024283095,             -0.537108726021074, -0.197591859476085, 0.00517818073632286,             -0.292503209017485), dim = c(100L, 3L))), X = list(            structure(c(-1.23542600889914, 0.174613455387578,             1.0670040021397, -2.21263933960137, 0.425304984337834,             0.426214560233556, -0.707538367160214, -0.270990769114361,             -0.560164710444827, -1.00740268308227, -0.379427282833195,             -1.01356529134135, -0.861822017117868, 0.073362015911817,             0.979183596456694, -0.0313039087147126, -0.501741649007826,             -1.04166787354422, -0.80189467639593, 2.32700539114526,             0.151768713250086, -0.482659721109833, -0.60752182340503,             0.175950754021328, -0.684462095158739, -1.360670061036,             1.0422042362627, -1.10871363388338, -0.130595842374781,             -0.9433645940004, 1.07541714076864, -0.507167158713274,             -0.628661899538265, -0.485788480175762, -1.61461092005116,             -0.97073461333541, -2.02404194682097, -1.38753150941349,             -0.291864875543467, -0.533449264871736, 1.4323837805481,             -1.03590778829984, -1.00285845451303, -0.155369397600617,             -0.972090143643519, -0.913440413507164, -1.25020804775704,             -1.37986133679446, -0.536521513460091, -0.511889283292673,             -1.93709870511262, -0.485953012841021, -1.14932721222312,             -1.02580290215208, 0.11008429310468, 0.526166176774964,             2.04790112587191, -0.603276744066453, 1.58312428028223,             -1.02613730274382, 0.785737130000078, 2.41962755174221,             -0.0344860449424689, -0.621678392535732, -0.0334013791663087,             1.61325651613939, -1.07951281027287, 1.2973784901514,             1.31163329821128, 0.557766440764892, 0.0345960694629141,             -0.863412276147096, -0.33891897867418, 0.635205530728098,             1.78855823577497, -0.164558611338356, -1.40816154235214,             -0.815726035582333, 0.254834568524161, -0.329293438703813,             0.102751202292999, -0.355057759651278, -1.29550879006725,             0.00569411572075434, 0.738463059112333, 0.747816258233102,             0.418929044127118, -0.409751013543456, 0.161643177186537,             -1.17686008751369, 0.183547869773527, 0.158919536459877,             1.89339478187542, 0.88740320000406, -0.358552838478264,             0.565767816035712, -1.2021544770888, 0.838487269418226,             0.962529048041967, 2.05290134151904, 0.414523534374985,             -0.47471847352936, 0.0659934937044614, -0.502477782393866,             -0.825998587129336, 0.166989279752984, -0.896264626244759,             0.168185387655757, 0.354968261014854, -0.0521051168711336,             -0.195934618716253, -0.64906975160576, -1.10976723139873,             0.849274202655058, 0.022362526076024, 0.831140617306835,             -1.24428785134423, 0.169026413766175, 0.673166306947679,             -0.0262763764485261, -0.191392168556024, -0.781906646699876,             2.05816198776349, 0.750501453155831, 1.82420830237829,             0.080059641091988, -0.631409298966366, -1.51328812003373,             -0.636099831085051, 0.226301532497161, 1.01369034746575,             0.252750135066342, -1.17194831284112, 0.668714328525034,             -1.65010093484436, -0.365852248191901, -0.31611832883308,             -1.94824604732137, 0.920057522390905, -0.622871594878875,             -0.334036649997458, 1.39514789252962, 0.63667441103895,             -0.108431696990383, 0.513762778404674, 0.399271807273958,             1.6628564474304, 0.275893403585483, 0.506272623207687,             0.347551975023811, -0.377237647496313, 0.0976194631092374,             1.63874464512173, -0.875592474189569, 0.121759998641046,             1.36213066084498, -0.23462108692271, -1.05338280794309,             -0.869783605635912, -0.390127029647055, -0.847350073129572,             -0.260639392099399, -0.414419706341893, -0.183050797719434,             0.407056097880578, 0.624633128202147, 1.67820574370471,             -0.0686936535649907, -0.320839912658177, 1.47100571704891,             1.7043293978271, 0.0432440375575291, -0.332657319133519,             -1.8222354175631, 1.41126239874678, -0.837582434076861,             -1.12376279439532, 3.04376588609529, 0.235021308250671,             -0.0332586101133057, -2.7322195229558, -0.0997905884418961,             0.976031734922396, 0.413868915451097, 0.912322161610113,             1.98373220068438, 1.16910851401363, -0.50873701541522,             0.704180178465512, -0.198416273822079, -0.538070788884863,             -2.85575865501923, -0.789646852263761, 0.487814635163685,             2.16803253951933, 0.500694614280786, 0.62021020366732,             -0.965903210133575, 0.162654708118265, -2.07823754188738,             0.485226820569252, 0.696768778564913, 0.185513915583057,             0.700733515544461, 0.311681028661359, 0.760462361967838,             1.84246362620766, 1.1123628412626, 0.0326639575014441,             -1.11444896479736, 0.418057822385083, -0.400235237343163,             1.49349310261748, -1.60708093984972, -0.415751788401515,             0.42200837321742, -0.151736536534977, -0.60615111526422,             -0.304721068966714, 0.629536099884472, 0.895171980275539,             0.660212631820405, 2.27348352044748, 1.17349757263239,             0.287709728313787, -0.659770093821306, 2.91914013071762,             0.677415500438328, -0.684320344136007, 0.186492083080971,             -0.324393300483657, -0.274704218225806, -0.933503340589868,             0.116845344986082, 0.319160238648117, -1.07754212275943,             -3.23315213292314, -0.254874652654534, 0.0295178303214797,             0.594273774110513, 0.0591351681787969, 0.413398894737046,             -1.09777217457042, 0.711175257270441, 0.718888729854143,             0.251651069028968, 1.35727443615177, 0.404468471278607,             0.264364269837939, 0.268043904143697, 0.436930577039483,             1.06012390548736, 0.452190396528715, 0.663198615687065,             -1.13637355399084, -0.370497517092117, 1.47696958979247,             -1.22390375051376, 0.258068387396106, 0.405002805433516,             0.97580332180945, -0.348876736539909, 0.158625439491262,             -1.76325506654115, 0.338596047099905, -0.666565029559273,             -0.238646624327644, -1.18776528245719, 0.384935321768578,             0.66657951565448, -0.304613889457735, 1.8250110640863,             0.670559370567588, 0.948632573255153, 2.04940300167091,             -0.651113609237535, 0.808619272846293, 0.986580613954563,             -0.00617079609070003, 0.319052357931912, -1.01182190274184,             0.470167547726389, -0.700970331629097, 0.813682862526491,             -0.811430783992772, 0.31939748709946, -0.846522653163624,             -0.245763179128733, -1.55285901110546, 0.128434032925753,             0.985443389404868, 0.183247523067191, -1.76622921343046,             -0.620533696615944, 1.65604303699874, 1.80980538558388,             -1.17503676801214, -0.366703258827641, 0.353625448927287,             0.319156220867898, -0.579956989019402, -0.953278701946907,             -0.179428586945621, 1.0098082149443, 0.0236266149214088,             -0.649028219583901, -0.504374222048191, 1.61439149545836,             -0.446959811255663, 0.763176761113315, 1.4717186861858,             0.443664903687416, -0.421721870070189, -0.0400016262060736,             -0.492279968227887, 1.22771711731275, -0.149553565244392,             1.54998338398246, -0.561612535381314, -0.647117250632361,             0.143132159050427, 0.0241886479910512, -0.504451524580869,             -1.58139680993034, 0.030066421255418, -0.716576699070701,             1.08261095547612, -0.952685454939293, 1.12648272900916,             -0.649043017379116, 0.292470078406726, 0.898702724402737,             -0.518742356791874, 0.554438552345125, -0.0879736711840128,             -1.13521292940752, -0.270079610999902, 1.61978987753494,             -0.21413117369664, -0.817782462924957, -0.0540229240816071,             0.330141609857869, 0.955324614657399, 1.14395987779244,             0.100522398375063, 1.16457524565738, -0.764259947799148,             -2.3445134046903, -0.471683425529536, -0.51585548950739,             -2.31603615150256, 0.562471756969533, -0.783775139422381,             -0.226053986228165, -1.58710298765404, 0.547524201868316,             1.89122701735548, -0.878077110224044, -0.112558911044787,             1.94871306497599, 0.933816332207727, 1.91305942169705,             -0.00523405793193957, -0.152260048921635, -0.509631657179118,             1.43457370342612, -1.28583853233299, 0.307314215255018,             -0.046318533277383, 2.25184180012688, -0.608033728609708,             -1.50928816985104, 0.232631769508576, -0.0396486960510932,             -0.839125067505345, 0.132291088244156, -0.275524746705939,             -0.678758641268032, 0.500835931775825, -0.331662312006789,             -1.83498025077253, -2.65174124837268, -0.580582172084415,             1.45418687087119, 0.838129379964693, 1.21505358044614,             0.982505442732795, 0.315764024018431, -1.50706262771632,             0.205569787166277, 1.59722809034381, -3.39606353457436,             -0.781352284302082, 1.10246464075191, 0.528745019445293,             0.789394403514854, 0.457099505856081, 0.538833115658123,             0.0146431224111012, -0.916489135703093, -0.281410685848801,             -0.664214836787491, -0.0332864997318172, 0.707606460483598,             0.00736396764249052, -0.493561532848554, -0.929291158120578,             1.79578911079824, -0.0145994762797085, -0.850521551380139,             0.61526350911027, -0.177570328028164, -0.629838704172772,             0.0642858510387739, 0.204666277184985, 0.518106903448335,             0.0226927400166418, -0.939524156841979, 0.1711351721265,             -0.407383670131058, 0.128127898258284, 0.0159696509503493,             -1.14686222799921, -1.85576531782186, 0.00865040189076418,             0.472775875976038, 3.16029308608488, -0.645363894218017,             -0.770875048778815, -0.12104138432019, -0.0948753340270719,             -0.246877429324456, 0.484247722970675, 0.0647835639223498,             -0.0280776978898405, 1.22323974973773, 0.873208470363384,             -0.412843382410047, -0.00632068765171673, -0.485986670643804,             -0.00319465470107621, 0.136480176621952, -1.0487287796531,             0.813555960396101, 0.0722644192897413, 0.293066605534353,             -1.03731048972247, -0.94828175268729, -0.124696244384773,             -0.138271919381519, -1.01194701212032, 0.596289755724881,             -0.354415591084755, -0.149918690737062, 1.8035418626299,             -0.202856357340054, 2.79328479202796, 1.07468186844349,             -0.0290478966603898, 0.789234258300223, 0.911221078928217,             -0.667421927848592, -0.000830254739776642, 0.268473302692877,             -0.172559264597823, -0.956236663029186, 0.30686102517168,             -0.365017155685488, -0.017829639510978, 1.50103161645909,             0.185215518993292, -2.7544676088727, 0.155993412935695,             -0.03761204456116, -1.71970543212276, -0.0861365279366136,             -0.222794620332516, -0.66965011702918, -0.00309055640988437,             -0.105817642682915, 1.85667320883036, -1.2467626799523,             0.406970877703954, 1.18324693573891, -0.680083979872127,             0.388085060285698, -0.831713114129867, -0.077603170397251,             2.34025578174956, 0.0264021568134537, 1.57397786300107,             -0.622320230889563, 1.38004723051496, -0.684116458914149,             0.875624507800138, 1.42865024283095, -0.537108726021074,             -0.197591859476085, 0.00517818073632286, -0.292503209017485            ), dim = c(100L, 5L)))), SampleStats = new(\"lavSampleStats\",         var = list(c(0.993346910308311, 1.05475661621264, 0.912677459948807,         1.09211750571828, 0.830568734147243)), cov = list(structure(c(0.993346910308311,         -0.0414039255243848, 0.0678911916190936, 0.186371923967366,         0.120276793995608, -0.0414039255243848, 1.05475661621264,         0.0910577862682637, 0.154879901854039, -0.104338349704614,         0.0678911916190936, 0.0910577862682637, 0.912677459948807,         0.0459608854698236, -0.0621636081382202, 0.186371923967366,         0.154879901854039, 0.0459608854698236, 1.09211750571828,         0.267921172542183, 0.120276793995608, -0.104338349704614,         -0.0621636081382202, 0.267921172542183, 0.830568734147243        ), dim = c(5L, 5L))), mean = list(c(-0.148256696929575,         0.0412431799463585, 0.154603672070928, -0.00810513624308551,         0.0447078016440074)), th = list(NULL), th.idx = list(            NULL), th.names = list(NULL), res.cov = list(NULL),         res.var = list(NULL), res.th = list(NULL), res.th.nox = list(            NULL), res.slopes = list(NULL), res.int = list(NULL),         mean.x = list(c(0.154603672070928, -0.00810513624308551,         0.0447078016440074)), cov.x = list(structure(c(0.912677459948807,         0.0459608854698236, -0.0621636081382202, 0.0459608854698236,         1.09211750571828, 0.267921172542183, -0.0621636081382202,         0.267921172542183, 0.830568734147243), dim = c(3L, 3L        ))), bifreq = list(NULL), group.w = list(1), nobs = list(            100L), ntotal = 100L, ngroups = 1L, x.idx = list(            3:5), icov = list(structure(c(1.05733853197991, 0.0625802654615634,         -0.0835410600262748, -0.161400285654409, -0.0994432172971014,         0.0625802654615634, 1.00295839213712, -0.0833122524620633,         -0.191738634447155, 0.172546730230057, -0.0835410600262748,         -0.0833122524620633, 1.11931873344586, -0.0455945330398863,         0.100114555722495, -0.161400285654409, -0.191738634447155,         -0.0455945330398863, 1.05696112662028, -0.34507627973663,         -0.0994432172971014, 0.172546730230057, 0.100114555722495,         -0.34507627973663, 1.35887691112455), dim = c(5L, 5L))),         cov.log.det = list(-0.336244140270413), res.icov = list(            NULL), res.cov.log.det = list(NULL), ridge = 0, WLS.obs = list(            c(0.993346910308311, -0.0414039255243848, 0.0678911916190936,             0.186371923967366, 0.120276793995608, 1.05475661621264,             0.0910577862682637, 0.154879901854039, -0.104338349704614,             0.912677459948807, 0.0459608854698236, -0.0621636081382202,             1.09211750571828, 0.267921172542183, 0.830568734147243            )), WLS.V = list(NULL), WLS.VD = list(NULL), NACOV = list(            NULL), NACOV.user = FALSE, missing.flag = FALSE,         missing = list(NULL), missing.h1 = list(NULL), YLp = list(            NULL), zero.cell.tables = list(NULL)), Model = new(\"lavModel\",         GLIST = list(lambda = structure(c(1, 0, 0, 0, 0, 0, 1,         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1), dim = c(5L,         5L)), theta = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0,         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), dim = c(5L,         5L)), psi = structure(c(0.949276552167061, 0, 0, 0, 0,         0, 1.05303084948297, 0, 0, 0, 0, 0, 0.912677459948807,         0.0459608854698236, -0.0621636081382202, 0, 0, 0.0459608854698236,         1.09211750571828, 0.267921172542183, 0, 0, -0.0621636081382202,         0.267921172542183, 0.830568734147243), dim = c(5L, 5L        )), beta = structure(c(0, -0.0416812345160806, 0, 0,         0, 0, 0, 0, 0, 0, 0.074368922158334, 0, 0, 0, 0, 0.141856683400787,         0, 0, 0, 0, 0.104619186839306, 0, 0, 0, 0), dim = c(5L,         5L))), dimNames = list(list(c(\"m\", \"y\", \"x\", \"w\", \"x:w\"        ), c(\"m\", \"y\", \"x\", \"w\", \"x:w\")), list(c(\"m\", \"y\", \"x\",         \"w\", \"x:w\"), c(\"m\", \"y\", \"x\", \"w\", \"x:w\")), list(c(\"m\",         \"y\", \"x\", \"w\", \"x:w\"), c(\"m\", \"y\", \"x\", \"w\", \"x:w\")),             list(c(\"m\", \"y\", \"x\", \"w\", \"x:w\"), c(\"m\", \"y\", \"x\",             \"w\", \"x:w\"))), isSymmetric = c(FALSE, TRUE, TRUE,         FALSE), mmSize = c(25L, NA, NA, 25L), representation = \"LISREL\",         modprop = list(uvreg = FALSE, uvord = FALSE, mvreg = FALSE,             nexo = 0L, acyclic = TRUE, bowfree = TRUE), meanstructure = FALSE,         correlation = FALSE, categorical = FALSE, multilevel = FALSE,         group.w.free = FALSE, link = \"default\", nblocks = 1L,         ngroups = 1L, nefa = 0L, nmat = 4L, nvar = 5L, num.idx = list(            1:5), th.idx = list(NULL), nx.free = 6L, nx.unco = 6L,         nx.user = 12L, m.free.idx = list(integer(0), integer(0),             c(1L, 7L), c(2L, 11L, 16L, 21L)), x.free.idx = list(            integer(0), integer(0), 5:6, c(4L, 1L, 2L, 3L)),         x.unco.idx = list(integer(0), integer(0), 5:6, c(4L,         1L, 2L, 3L)), m.user.idx = list(integer(0), integer(0),             c(1L, 7L, 13L, 14L, 15L, 18L, 19L, 20L, 23L, 24L,             25L), c(2L, 11L, 16L, 21L)), x.user.idx = list(integer(0),             integer(0), c(5L, 6L, 7L, 8L, 9L, 8L, 10L, 11L, 9L,             11L, 12L), c(4L, 1L, 2L, 3L)), x.def.idx = integer(0),         x.ceq.idx = integer(0), x.cin.idx = integer(0), x.free.var.idx = 5:6,         ceq.simple.only = FALSE, ceq.simple.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints = FALSE, eq.constraints.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints.k0 = numeric(0), def.function = function ()         NULL, ceq.function = function ()         NULL, ceq.jacobian = function ()         NULL, ceq.JAC = structure(numeric(0), dim = c(0L, 6L)),         ceq.rhs = numeric(0), ceq.linear.idx = integer(0), ceq.nonlinear.idx = integer(0),         cin.simple.only = FALSE, cin.function = function ()         NULL, cin.jacobian = function ()         NULL, cin.JAC = structure(numeric(0), dim = c(0L, 6L)),         cin.rhs = numeric(0), cin.linear.idx = integer(0), cin.nonlinear.idx = integer(0),         ceq.efa.JAC = structure(numeric(0), dim = c(0L, 0L)),         con.jac = structure(numeric(0), dim = c(0L, 0L)), con.lambda = numeric(0),         nexo = 3L, conditional.x = FALSE, fixed.x = TRUE, parameterization = \"delta\",         ov.x.dummy.ov.idx = list(3:5), ov.x.dummy.lv.idx = list(            3:5), ov.y.dummy.ov.idx = list(1:2), ov.y.dummy.lv.idx = list(            1:2), ov.efa.idx = list(NULL), lv.efa.idx = list(            NULL), rv.ov = list(), rv.lv = list(), H = list(),         lv.order = list(), estimator = \"ML\", estimator.args = list()),     Cache = list(NULL), Fit = new(\"Fit\", npar = 6L, x = c(0.074368922158334,     0.141856683400787, 0.104619186839306, -0.0416812345160806,     0.949276552167061, 1.05303084948297), partrace = structure(numeric(0), dim = c(0L,     0L)), start = c(0.074368922158334, 0.141856683400787, 0.104619186839306,     -0.0416812345160806, 0.949276552167061, 1.05303084948297,     0.912677459948807, 0.0459608854698236, -0.0621636081382202,     1.09211750571828, 0.267921172542183, 0.830568734147243),         est = c(0.074368922158334, 0.141856683400787, 0.104619186839306,         -0.0416812345160806, 0.949276552167061, 1.05303084948297,         0.912677459948807, 0.0459608854698236, -0.0621636081382202,         1.09211750571828, 0.267921172542183, 0.830568734147243        ), se = c(0.102491114882515, 0.0973873253286045, 0.111840330927834,         0.102960365252622, 0.134247977451743, 0.148921050893608,         0, 0, 0, 0, 0, 0), fx = 0.0273132770921762, fx.group = 0.0273132770921762,         logl = NA_real_, logl.group = NA_real_, iterations = 1L,         converged = TRUE, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14),         Sigma.hat = list(structure(c(0.993346910308311, -0.0414039255243848,         0.0678911916190936, 0.186371923967366, 0.120276793995608,         -0.0414039255243848, 1.05475661621264, -0.00282978867945161,         -0.00776821187009693, -0.00501328525737325, 0.0678911916190936,         -0.00282978867945161, 0.912677459948807, 0.0459608854698236,         -0.0621636081382202, 0.186371923967366, -0.00776821187009693,         0.0459608854698236, 1.09211750571828, 0.267921172542183,         0.120276793995608, -0.00501328525737325, -0.0621636081382202,         0.267921172542183, 0.830568734147243), dim = c(5L, 5L        ))), Mu.hat = list(NULL), TH = list(NULL), test = structure(list(            standard = list(test = \"standard\", stat = 5.46265541843525,                 stat.group = 5.46265541843525, df = 3L, refdistr = \"chisq\",                 pvalue = 0.140889377212751)), info = list(ngroups = 1L,             group.label = character(0), information = c(\"expected\",             \"expected\"), h1.information = c(\"structured\", \"structured\"            ), observed.information = c(\"hessian\", \"hessian\")))),     boot = list(), optim = list(x = c(0.074368922158334, 0.141856683400787,     0.104619186839306, -0.0416812345160806, 0.949276552167061,     1.05303084948297), dx = c(2.07694576065347e-18, 1.82270921716889e-18,     -2.14554037267505e-19, -3.29402955919034e-18, 1.04430865538314e-20,     9.9859450566672e-17), npar = 6L, iterations = 1L, converged = TRUE,         warn.txt = \"\", parscale = c(1, 1, 1, 1, 1, 1), fx = 0.0273132770921762,         fx.group = 0.0273132770921762, logl.group = NA_real_,         logl = NA_real_, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14)),     loglik = list(loglik = -283.76857768837, loglik.group = -283.76857768837,         npar = 6L, ntotal = 100L, AIC = 579.53715537674, BIC = 595.168176492669,         BIC2 = 576.218669274358, estimator = \"ML\", conditional.x = FALSE,         fixed.x = TRUE), implied = list(cov = list(structure(c(0.993346910308311,     -0.0414039255243848, 0.0678911916190936, 0.186371923967366,     0.120276793995608, -0.0414039255243848, 1.05475661621264,     -0.00282978867945161, -0.00776821187009693, -0.00501328525737325,     0.0678911916190936, -0.00282978867945161, 0.912677459948807,     0.0459608854698236, -0.0621636081382202, 0.186371923967366,     -0.00776821187009693, 0.0459608854698236, 1.09211750571828,     0.267921172542183, 0.120276793995608, -0.00501328525737325,     -0.0621636081382202, 0.267921172542183, 0.830568734147243    ), dim = c(5L, 5L))), mean = list(NULL), th = list(NULL),         group.w = list(NULL)), vcov = list(se = \"standard\", information = \"expected\",         vcov = structure(c(0.0105044286298609, -0.000689507334528014,         0.00100861826862031, 2.29317130735746e-18, -4.14917827432001e-18,         -5.59181696702922e-22, -0.000689507334528014, 0.00948429113465945,         -0.00311100642132207, 3.31326005051048e-18, -1.81003029411944e-18,         6.43887336052975e-22, 0.00100861826862031, -0.00311100642132207,         0.0125082596220475, 1.81337420991818e-18, -5.8582335998949e-19,         -4.53177358425401e-22, 2.46112789582112e-18, 3.3649596940231e-18,         1.71917778836551e-18, 0.0106008368129532, 9.83292249616508e-19,         3.44009761414404e-18, -3.86849840506431e-18, -1.84439682976236e-18,         -6.54622498176063e-19, 1.23104835801776e-18, 0.0180225194498836,         -4.51213481617633e-21, -2.59498361033021e-22, -1.43837916833215e-21,         7.84224259068147e-22, 3.32768203352005e-18, -4.51213481617642e-21,         0.0221774793992565), dim = c(6L, 6L))), test = structure(list(        standard = list(test = \"standard\", stat = 5.46265541843525,             stat.group = 5.46265541843525, df = 3L, refdistr = \"chisq\",             pvalue = 0.140889377212751)), info = list(ngroups = 1L,         group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\"))),     h1 = list(implied = list(cov = list(structure(c(0.993346910308311,     -0.0414039255243848, 0.0678911916190936, 0.186371923967366,     0.120276793995608, -0.0414039255243848, 1.05475661621264,     0.0910577862682637, 0.154879901854039, -0.104338349704614,     0.0678911916190936, 0.0910577862682637, 0.912677459948807,     0.0459608854698236, -0.0621636081382202, 0.186371923967366,     0.154879901854039, 0.0459608854698236, 1.09211750571828,     0.267921172542183, 0.120276793995608, -0.104338349704614,     -0.0621636081382202, 0.267921172542183, 0.830568734147243    ), dim = c(5L, 5L))), mean = list(c(-0.148256696929575, 0.0412431799463585,     0.154603672070928, -0.00810513624308551, 0.0447078016440074    )), th = list(NULL), group.w = list(1)), logl = list(loglik = -281.037249979152,         loglik.group = -281.037249979152)), baseline = list(partable = list(        id = 1:8, lhs = c(\"m\", \"y\", \"x\", \"w\", \"x:w\", \"x\", \"x\",         \"w\"), op = c(\"~~\", \"~~\", \"~~\", \"~~\", \"~~\", \"~~\", \"~~\",         \"~~\"), rhs = c(\"m\", \"y\", \"x\", \"w\", \"x:w\", \"w\", \"x:w\",         \"x:w\"), user = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), block = c(1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L), group = c(1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L), free = c(1L, 2L, 0L, 0L, 0L, 0L, 0L,         0L), ustart = c(0.993346910308311, 1.05475661621264,         0.912677459948808, 1.09211750571828, 0.830568734147243,         0.0459608854698236, -0.0621636081382202, 0.267921172542183        ), exo = c(0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L), label = c(\"\",         \"\", \"\", \"\", \"\", \"\", \"\", \"\"), lower = c(0, 0, 0.912677459948808,         1.09211750571828, 0.830568734147243, 0.0459608854698236,         -0.0621636081382202, 0.267921172542183), upper = c(Inf,         Inf, 0.912677459948808, 1.09211750571828, 0.830568734147243,         0.0459608854698236, -0.0621636081382202, 0.267921172542183        ), start = c(0.993346910308311, 1.05475661621264, 0.912677459948808,         1.09211750571828, 0.830568734147243, 0.0459608854698236,         -0.0621636081382202, 0.267921172542183), est = c(0.993346910308311,         1.05475661621264, 0.912677459948808, 1.09211750571828,         0.830568734147243, 0.0459608854698236, -0.0621636081382202,         0.267921172542183), se = c(0.140480467269942, 0.149165111165066,         0, 0, 0, 0, 0, 0)), test = structure(list(standard = list(        test = \"standard\", stat = 10.1643857867729, stat.group = 10.1643857867729,         df = 7L, refdistr = \"chisq\", pvalue = 0.179447703349863)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\")))),     internal = list(), external = list()), new(\"lavaan\", version = \"0.6-19\",     call = lavaan::lavaan(model = \"\\nm ~ x + w + x:w\\ny ~ m\\n\",         data = structure(list(m = c(0.903611026836546, -1.50738161817875,         0.703124971314589, -0.442469980736628, 1.76753463292258,         -0.304448272372758, -1.56383021420111, 0.517219620300936,         0.408246190676084, 0.0445455587707694, -0.837652848855779,         -0.67837038499389, 0.0301140628102749, 1.00997868200481,         -0.492425368059042, -0.826604685679885, -2.67581415530546,         0.488783532340314, 0.425366169535689, 1.06580351075778,         1.78983916394545, -0.232194336966745, 1.15344708390131,         0.0355792656025659, -0.642959358584812, -0.946268965255803,         -0.347142145193775, 0.243953403028752, -0.0454812022197825,         0.200181814412768, 0.155187935786732, 0.731248351608544,         -0.391159204166306, 1.58193714278134, 0.400069051366488,         -1.23636891282223, 0.190248277029134, 0.50106639960255,         -0.414767414457447, 0.336615087640316, 0.263799716817729,         1.28330344826123, -0.794009740911978, -0.0731732097673163,         -0.503657095457098, -1.1229616724733, -1.81805412977208,         0.18257770276792, 0.60942587334541, 0.394957466909784,         -1.37193604362354, -1.10959088377913, -1.40352441818124,         -0.661095463237892, 0.268137119602659, 0.557667285674555,         -0.832422022553255, -2.75772968114894, 0.961946745669677,         0.540626432192122, -0.738508081288371, -1.07250518658935,         -0.238530742117813, -0.12616186977786, 0.716462499646871,         1.51264010550278, -0.843264934699796, 0.290297617353111,         1.20975230856504, -0.666775371593567, -0.236417321540583,         -1.61701141882917, 0.289673418781919, -0.591597884260673,         -0.992128711831015, -0.791184537024628, 0.391164359992256,         -2.18792834424924, -0.447954260685191, -0.99548631207274,         -1.06964665117929, 0.538168378311135, 0.433227113792507,         -0.0354709300407899, 0.501252475117944, -0.6236531808011,         -2.17453738094333, 0.782834291332142, -0.314106557935569,         -0.375110932271081, 0.0780881906347624, 0.715466343222291,         0.311213044440392, 0.953657335095112, 0.044492651533197,         -0.484474542666608, -0.277642104527668, 0.818984801254122,         -1.11817597863694, -1.08805553045395), y = c(0.313478715882576,         0.612473307433314, -1.69108322753688, 0.784698627442325,         0.0119251352600229, -0.181255287869961, 1.10695440248067,         1.47939487098826, -1.14739944099984, 1.011654376514,         -0.632069194974882, 0.13236131951909, 0.480926064725324,         0.133177627584607, -1.46286446232819, -0.506401780474741,         1.53966323733755, 0.172793618387291, -0.835823924079678,         -0.655928703879608, 1.05756608653532, 0.346083489865367,         -0.897186541993694, 0.00626521125563042, 0.59667050907573,         1.72255180794401, -0.881749483409345, -0.379945955166868,         0.996110015873762, -0.459120892943841, 1.46026574621257,         1.04324617695035, -1.65904097034683, 0.423957776227396,         -1.41916292618524, -1.46469245667068, 0.0704209721478317,         0.0566982219802716, -0.0327081772655874, 1.26428122406637,         0.294987885730239, -0.673086820504489, 0.119588291490956,         -0.514396508991294, -0.0681115738665369, -1.14801191183674,         -0.115244480129169, 0.102936391849009, -0.701743487103139,         0.041230624270294, -0.648768350598479, -0.644007859466443,         -0.204438825066372, 0.490840917661593, -0.20533698727053,         0.190691323925256, 0.970024192661124, -0.285261077847069,         -0.103619268541766, 0.511254541203706, -1.25816245001572,         0.543825968956194, -0.534963586582989, -1.13804602678007,         -1.76800377087565, -0.714978202867742, -1.17020226435962,         -1.17844814841946, 1.62729133795333, -1.21214666562853,         0.997509917441285, 0.545245641420171, -0.88478911517512,         -0.611230697881371, -0.410199512833357, 0.190409369836815,         -0.348324928959338, 0.826847530284988, -0.292686902302723,         -2.16534620996324, -0.0962167762033804, -1.85195684624858,         0.937811135232089, -0.747686481439497, -1.11524143570017,         -0.591506415298824, 0.585230683909193, -1.91855819930986,         0.253816791504093, -0.972241766246169, -0.00851344803801686,         0.679041911007479, 0.569631366692422, 1.5029616611284,         0.129085401165474, -0.701182951676618, 2.15370721597723,         -0.30324613826175, 0.807579776908013, 0.930991466126415        ), x = c(0.454902098272933, 1.4254206900636, -0.20899117251275,         -1.23140277909061, -0.360603577153347, -0.547213299484056,         0.327996007514467, -0.933299832093657, 0.680810824800176,         -1.16388240018636, 1.75544950988335, 1.44963736425491,         -0.448794941211084, 0.140067288930464, -0.373650328177582,         -1.20643411723808, -2.66134597494101, -0.0250944932655905,         -0.0343732572490637, 1.64235903904485, -1.99546214753883,         -0.662170758602409, 0.880037992310033, 0.342387420001643,         0.121753855523786, -0.620761034511813, 0.200945267574023,         -0.235905348023341, 0.113661114970227, -0.577929195287818,         1.18856488583833, 1.05993627812147, 1.33675821086468,         -0.367169171130217, -0.304336704778395, -0.350279624235713,         1.37414476272803, -0.299720491875069, 0.0976351442252321,         0.381188028723722, 0.678212556818783, -0.26767327223427,         2.34596566433491, -0.927494655524829, -1.42655717369774,         0.0423026643898127, 1.76744347000481, 0.0527503271453671,         0.109726039969968, 0.863202615558153, -0.0989732047696172,         0.103696546086221, 1.20848487568464, 0.0937460210527718,         -0.752196518946083, 0.394924219872661, -1.09152043398742,         -1.45829242499569, -0.122712284955754, -1.1009291916684,         0.580923071839757, -0.146947489359788, -0.766334615072354,         1.62289757854462, -0.109940544035991, 1.42170485426206,         -0.113421048996398, -0.329280941581153, 0.373460983597143,         1.02988813093981, 2.70577504719934, -1.03494587124924,         -0.183429858640727, 1.07777130745133, 0.341620225298793,         -0.187343624118674, -1.30285910852947, -0.278658261975666,         -0.184753908458266, -0.0817774971735639, 1.61224179372707,         -0.461939839504668, -1.57605030081864, 0.496433073531127,         -0.111953783818969, -0.204346400211973, 0.635568162856401,         -2.90667395407155, -0.553658252760955, -0.153451828250923,         0.60529051576044, -0.261006596184361, -1.00513846241125,         0.372566114312583, 0.0194461765201242, 0.110528815395276,         1.15657043692358, -0.542220460211763, -1.24920128341908,         -1.28001259675319), w = c(-1.02393278779038, -1.38765057998806,         -0.0492211144061267, 1.81096073048314, -0.0995100657082667,         0.777237124297383, -1.10259632518001, -0.221644782701794,         0.5660949625959, -0.354959345255063, 0.785262601468044,         0.694047378599404, -0.632729895584955, -0.771958641961308,         2.3578173876011, -0.19254933635981, 0.00661933421419712,         -0.0545460246273611, -0.568206880540376, -0.926975943696645,         -1.1357351813807, 0.913962339054452, -0.986062833322873,         0.66748541348963, 1.40659548970662, 1.15777896011788,         -0.138753197573533, -0.539321850960138, -1.07889349906152,         -0.0185621399511091, -0.232615685678704, 0.15629354251416,         -0.604009754754033, 0.629035120121665, 0.714169570852022,         1.07588610128876, 2.24975551737932, 0.197890598879292,         -0.575546318478704, -0.0773208650045946, -1.62791988910102,         0.129923153969037, -0.425673133260061, 0.406011748521125,         -0.268810185638072, -1.38098453629771, 0.0365833213445593,         -1.35324453117639, 0.897006193942258, -1.82935971226393,         -0.141876944171991, 0.457981777842779, -1.51961751308999,         1.39905531466027, -0.885339190903023, -0.506330291221321,         0.163332105966331, -0.337143856258392, -1.03595153200983,         0.409337928216715, -0.524223458216886, 0.506500373524185,         -0.504722862774708, -0.957250328953504, -0.0946343584532563,         0.649439317610584, 0.242321799327066, -0.0589340902617142,         -1.94779407157618, 1.4514436318915, -0.0399396776377224,         -0.863997691069911, -0.201690239712518, 0.261255562727432,         -1.51835138330586, 0.717308632275803, 0.246832728096417,         1.20276704630509, 0.986039270447351, -0.537940599062239,         -0.490282741813956, -0.995516172562447, -0.361702928254615,         0.944354811296923, 1.79220701161545, 0.928409395864299,         -1.82993766963068, 0.821878106163116, 1.0362687620034,         0.617420144129801, -0.854930363118786, 1.06451051848471,         0.729481458103667, 0.66265658435809, -0.381407202704243,         0.845891777793581, 0.111591884445813, -0.0677702616560359,         1.48709809651828, 0.75722337664623), `x:w` = c(-0.465789173656299,         -1.97798584729374, 0.0102867784121206, -2.23002207634089,         0.0358836856571656, -0.425314491268271, -0.361647192559167,         0.20686103848002, 0.385403578400139, 0.413130934724041,         1.3784888488768, 1.00611701258087, 0.283965976291545,         -0.108126154145963, -0.88099924065996, 0.232298088636026,         -0.0176163384677428, 0.00136880484767605, 0.0195311212755024,         -1.52242732010731, 2.26631656407334, -0.605199135385719,         -0.867772756129003, 0.228538608613444, 0.171258424034148,         -0.718704065018785, -0.0278817984131649, 0.127228908947344,         -0.122628238037461, 0.0107276026047643, -0.276478835892914,         0.165661195746879, -0.807414999109814, -0.230962303666868,         -0.217348013846105, -0.376860979279853, 3.09148976162528,         -0.0593118676335535, -0.0561935478129696, -0.0294737881103144,         -1.10407571028335, -0.034776955761889, -0.998614554857962,         -0.376573726833635, 0.383473098685012, -0.0584193253665229,         0.064658952421529, -0.0713840917272333, 0.0984249374898168,         -1.57910808842293, 0.014042015847622, 0.047491128532723,         -1.83643478139475, 0.131155868982134, 0.665949057483796,         -0.199962095258477, -0.178280331188448, 0.49165433171545,         0.12712397959634, -0.450652074430844, -0.304533501677814,         -0.0744289582491737, 0.386786600762673, -1.55351924091969,         0.0104041528528479, 0.923311030395605, -0.0274843926743704,         0.0194058727326059, -0.727425089815523, 1.49482456921322,         -0.108067783145335, 0.894190843141685, 0.0369960121596817,         0.281573749419677, -0.518699541647682, -0.134383198782158,         -0.321588268083596, -0.335160974684981, -0.182174609108486,         0.0439914358193575, -0.790454327095557, 0.459868580977798,         0.570062008882667, 0.468808961476039, -0.200644356337236,         -0.189717117967842, -1.1630501228289, -2.38893168460598,         -0.573738752161563, -0.0947442499156664, -0.51748124043143,         -0.277844267032144, -0.733229871155837, 0.246883388757942,         -0.0074169117898335, 0.0934954161521284, 0.129063874550619,         0.0367464224638074, -1.85768485074071, -0.96925546066316        )), class = \"data.frame\", row.names = c(NA, -100L)),         model.type = \"sem\", int.ov.free = TRUE, int.lv.free = FALSE,         auto.fix.first = TRUE, auto.fix.single = TRUE, auto.var = TRUE,         auto.cov.lv.x = TRUE, auto.cov.y = TRUE, auto.th = TRUE,         auto.delta = TRUE, auto.efa = TRUE), timing = list(init = c(elapsed = 0),         ov.names = c(elapsed = 0.00100000000000122), Options = c(elapsed = 0.00199999999999889),         Data = c(elapsed = 0.00700000000000145), ParTable = c(elapsed = 0.00300000000000011),         SampleStats = c(elapsed = 0.00100000000000122), h1 = c(elapsed = 0),         bounds = c(elapsed = 0), start = c(elapsed = 0.000999999999997669),         Model = c(elapsed = 0.00400000000000134), cache = c(elapsed = 0),         optim = c(elapsed = 0.00300000000000011), implied = c(elapsed = 0),         loglik = c(elapsed = 0), vcov = c(elapsed = 0.000999999999997669),         test = c(elapsed = 0), Fit = c(elapsed = 0), baseline = c(elapsed = 0.0140000000000029),         rotation = c(elapsed = 0), total = c(elapsed = 0.0370000000000026)),     Options = list(model.type = \"sem\", mimic = \"lavaan\", meanstructure = FALSE,         int.ov.free = TRUE, int.lv.free = FALSE, marker.int.zero = FALSE,         conditional.x = FALSE, fixed.x = TRUE, orthogonal = FALSE,         orthogonal.x = FALSE, orthogonal.y = FALSE, std.lv = FALSE,         correlation = FALSE, effect.coding = \"\", ceq.simple = FALSE,         parameterization = \"delta\", auto.fix.first = TRUE, auto.fix.single = TRUE,         auto.var = TRUE, auto.cov.lv.x = TRUE, auto.cov.y = TRUE,         auto.th = TRUE, auto.delta = TRUE, auto.efa = TRUE, rotation = \"geomin\",         rotation.se = \"bordered\", rotation.args = list(orthogonal = FALSE,             row.weights = \"none\", std.ov = TRUE, geomin.epsilon = 0.001,             orthomax.gamma = 1, cf.gamma = 0, oblimin.gamma = 0,             promax.kappa = 4, target = structure(numeric(0), dim = c(0L,             0L)), target.mask = structure(numeric(0), dim = c(0L,             0L)), rstarts = 30L, algorithm = \"gpa\", reflect = TRUE,             order.lv.by = \"index\", gpa.tol = 1e-05, tol = 1e-08,             warn = FALSE, verbose = FALSE, jac.init.rot = TRUE,             max.iter = 10000L), std.ov = FALSE, missing = \"listwise\",         sampling.weights.normalization = \"total\", samplestats = TRUE,         sample.cov.rescale = TRUE, sample.cov.robust = FALSE,         sample.icov = TRUE, ridge = FALSE, ridge.constant = \"default\",         group.label = NULL, group.equal = character(0), group.partial = character(0),         group.w.free = FALSE, level.label = NULL, estimator = \"ML\",         estimator.orig = \"ML\", estimator.args = list(), likelihood = \"normal\",         link = \"default\", representation = \"LISREL\", do.fit = TRUE,         bounds = \"none\", rstarts = 0L, se = \"standard\", test = \"standard\",         information = c(\"expected\", \"expected\"), h1.information = c(\"structured\",         \"structured\"), observed.information = c(\"hessian\", \"hessian\"        ), information.meat = \"first.order\", h1.information.meat = \"structured\",         omega.information = \"expected\", omega.h1.information = \"unstructured\",         omega.information.meat = \"first.order\", omega.h1.information.meat = \"unstructured\",         scaled.test = \"standard\", ug2.old.approach = FALSE, bootstrap = 1000L,         gamma.n.minus.one = FALSE, gamma.unbiased = FALSE, control = list(),         optim.method = \"nlminb\", optim.attempts = 4L, optim.force.converged = FALSE,         optim.gradient = \"analytic\", optim.init_nelder_mead = FALSE,         optim.var.transform = \"none\", optim.parscale = \"none\",         optim.partrace = FALSE, optim.dx.tol = 0.001, optim.bounds = list(            lower = character(0), upper = character(0)), em.iter.max = 10000L,         em.fx.tol = 1e-08, em.dx.tol = 1e-04, em.zerovar.offset = 1e-04,         em.h1.iter.max = 500L, em.h1.tol = 1e-05, em.h1.warn = TRUE,         optim.gn.iter.max = 200L, optim.gn.stephalf.max = 10L,         optim.gn.tol.x = 1e-05, integration.ngh = 21L, parallel = \"no\",         ncpus = 1L, cl = NULL, iseed = NULL, zero.add = c(0.5,         0), zero.keep.margins = TRUE, zero.cell.warn = FALSE,         allow.empty.cell = FALSE, cat.wls.w = TRUE, start = \"default\",         check.start = TRUE, check.post = TRUE, check.gradient = TRUE,         check.vcov = TRUE, check.lv.names = TRUE, check.lv.interaction = TRUE,         check.delta.cat.mediator = TRUE, h1 = TRUE, baseline = TRUE,         baseline.conditional.x.free.slopes = TRUE, implied = TRUE,         loglik = TRUE, store.vcov = \"default\", parser = \"new\",         categorical = FALSE, .categorical = FALSE, .clustered = FALSE,         .multilevel = FALSE), ParTable = list(id = 1:12, lhs = c(\"m\",     \"m\", \"m\", \"y\", \"m\", \"y\", \"x\", \"x\", \"x\", \"w\", \"w\", \"x:w\"),         op = c(\"~\", \"~\", \"~\", \"~\", \"~~\", \"~~\", \"~~\", \"~~\", \"~~\",         \"~~\", \"~~\", \"~~\"), rhs = c(\"x\", \"w\", \"x:w\", \"m\", \"m\",         \"y\", \"x\", \"w\", \"x:w\", \"w\", \"x:w\", \"x:w\"), user = c(1L,         1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), block = c(1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), group = c(1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), free = c(1L,         2L, 3L, 4L, 5L, 6L, 0L, 0L, 0L, 0L, 0L, 0L), ustart = c(NA_real_,         NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_,         NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), exo = c(0L,         0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L), label = c(\"\",         \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"), plabel = c(\".p1.\",         \".p2.\", \".p3.\", \".p4.\", \".p5.\", \".p6.\", \".p7.\", \".p8.\",         \".p9.\", \".p10.\", \".p11.\", \".p12.\"), start = c(-0.018423533897073,         -0.0871100375677224, 0.165781263232526, -0.064592283590429,         0.828720555359228, 0.832752958745803, 0.960372538241796,         -0.151696380811395, 0.000710247243401753, 0.844471000315694,         0.122404086037122, 0.623933749708583), est = c(-0.018423533897073,         -0.0871100375677224, 0.165781263232526, -0.064592283590429,         0.828720555359228, 0.832752958745803, 0.960372538241796,         -0.151696380811395, 0.000710247243401753, 0.844471000315694,         0.122404086037122, 0.623933749708583), se = c(0.0942828231813187,         0.102005640338573, 0.116976058927268, 0.0990632968075366,         0.117198784880639, 0.117769052836464, 0, 0, 0, 0, 0,         0)), pta = list(names = c(\"id\", \"lhs\", \"op\", \"rhs\", \"user\",     \"block\", \"group\", \"free\", \"ustart\", \"exo\", \"label\", \"plabel\",     \"start\", \"est\", \"se\"), vidx = list(ov = list(1:5), ov.x = list(        3:5), ov.nox = list(1:2), ov.model = list(1:5), ov.y = list(        2L), ov.num = list(1:5), ov.ord = list(integer(0)), ov.ind = list(        integer(0)), ov.orphan = list(3:5), ov.interaction = list(        5L), ov.efa = list(integer(0)), th = list(integer(0)),         th.mean = list(1:2), lv = list(integer(0)), lv.regular = list(            integer(0)), lv.formative = list(integer(0)), lv.x = list(            integer(0)), lv.y = list(integer(0)), lv.nox = list(            integer(0)), lv.nonnormal = list(integer(0)), lv.interaction = list(            integer(0)), lv.efa = list(integer(0)), lv.rv = list(            integer(0)), lv.ind = list(integer(0)), lv.marker = list(            integer(0)), eqs.y = list(integer(0)), eqs.x = list(            integer(0))), meanstructure = FALSE, nblocks = 1L,         ngroups = 1L, nlevels = 1L, nvar = list(5L), nfac = list(            0L), nfac.nonnormal = list(0L), th.idx = list(c(0,         0)), vnames = list(ov = list(c(\"m\", \"y\", \"x\", \"w\", \"x:w\"        )), ov.x = list(c(\"x\", \"w\", \"x:w\")), ov.nox = list(c(\"m\",         \"y\")), ov.model = list(c(\"m\", \"y\", \"x\", \"w\", \"x:w\")),             ov.y = list(\"y\"), ov.num = list(c(\"m\", \"y\", \"x\",             \"w\", \"x:w\")), ov.ord = list(character(0)), ov.ind = list(                character(0)), ov.orphan = list(c(\"x\", \"w\", \"x:w\"            )), ov.interaction = list(\"x:w\"), ov.efa = list(character(0)),             th = list(character(0)), th.mean = list(c(\"m\", \"y\"            )), lv = list(character(0)), lv.regular = list(character(0)),             lv.formative = list(character(0)), lv.x = list(character(0)),             lv.y = list(character(0)), lv.nox = list(character(0)),             lv.nonnormal = list(character(0)), lv.interaction = list(                character(0)), lv.efa = list(character(0)), lv.rv = list(                character(0)), lv.ind = list(character(0)), lv.marker = list(                structure(character(0), names = character(0))),             eqs.y = list(c(\"m\", \"y\")), eqs.x = list(c(\"x\", \"w\",             \"x:w\", \"m\")))), Data = new(\"lavData\", data.type = \"full\",         group = character(0), ngroups = 1L, group.label = character(0),         block.label = character(0), cluster = character(0), nlevels = 1L,         level.label = character(0), std.ov = FALSE, nobs = list(            100L), norig = list(100L), ov.names = list(c(\"m\",         \"y\", \"x\", \"w\", \"x:w\")), ov.names.x = list(c(\"x\", \"w\",         \"x:w\")), ov.names.l = list(), ordered = character(0),         weights = list(NULL), sampling.weights = character(0),         ov = list(name = c(\"m\", \"y\", \"x\", \"w\", \"x:w\"), idx = 1:5,             nobs = c(100L, 100L, 100L, 100L, 100L), type = c(\"numeric\",             \"numeric\", \"numeric\", \"numeric\", \"numeric\"), exo = c(0L,             0L, 1L, 1L, 1L), user = c(0L, 0L, 0L, 0L, 0L), mean = c(-0.158063045341793,             -0.0878617963239032, -0.000837192642517517, 0.0181244354063178,             -0.151711554455367), var = c(0.857147248879649, 0.844740762916291,             0.970073270951309, 0.853001010419893, 0.63023611081675            ), nlev = c(0L, 0L, 0L, 0L, 0L), lnam = c(\"\", \"\",             \"\", \"\", \"\")), case.idx = list(1:100), missing = \"listwise\",         Mp = list(NULL), Rp = list(NULL), Lp = list(NULL), eXo = list(            structure(c(0.454902098272933, 1.4254206900636, -0.20899117251275,             -1.23140277909061, -0.360603577153347, -0.547213299484056,             0.327996007514467, -0.933299832093657, 0.680810824800176,             -1.16388240018636, 1.75544950988335, 1.44963736425491,             -0.448794941211084, 0.140067288930464, -0.373650328177582,             -1.20643411723808, -2.66134597494101, -0.0250944932655905,             -0.0343732572490637, 1.64235903904485, -1.99546214753883,             -0.662170758602409, 0.880037992310033, 0.342387420001643,             0.121753855523786, -0.620761034511813, 0.200945267574023,             -0.235905348023341, 0.113661114970227, -0.577929195287818,             1.18856488583833, 1.05993627812147, 1.33675821086468,             -0.367169171130217, -0.304336704778395, -0.350279624235713,             1.37414476272803, -0.299720491875069, 0.0976351442252321,             0.381188028723722, 0.678212556818783, -0.26767327223427,             2.34596566433491, -0.927494655524829, -1.42655717369774,             0.0423026643898127, 1.76744347000481, 0.0527503271453671,             0.109726039969968, 0.863202615558153, -0.0989732047696172,             0.103696546086221, 1.20848487568464, 0.0937460210527718,             -0.752196518946083, 0.394924219872661, -1.09152043398742,             -1.45829242499569, -0.122712284955754, -1.1009291916684,             0.580923071839757, -0.146947489359788, -0.766334615072354,             1.62289757854462, -0.109940544035991, 1.42170485426206,             -0.113421048996398, -0.329280941581153, 0.373460983597143,             1.02988813093981, 2.70577504719934, -1.03494587124924,             -0.183429858640727, 1.07777130745133, 0.341620225298793,             -0.187343624118674, -1.30285910852947, -0.278658261975666,             -0.184753908458266, -0.0817774971735639, 1.61224179372707,             -0.461939839504668, -1.57605030081864, 0.496433073531127,             -0.111953783818969, -0.204346400211973, 0.635568162856401,             -2.90667395407155, -0.553658252760955, -0.153451828250923,             0.60529051576044, -0.261006596184361, -1.00513846241125,             0.372566114312583, 0.0194461765201242, 0.110528815395276,             1.15657043692358, -0.542220460211763, -1.24920128341908,             -1.28001259675319, -1.02393278779038, -1.38765057998806,             -0.0492211144061267, 1.81096073048314, -0.0995100657082667,             0.777237124297383, -1.10259632518001, -0.221644782701794,             0.5660949625959, -0.354959345255063, 0.785262601468044,             0.694047378599404, -0.632729895584955, -0.771958641961308,             2.3578173876011, -0.19254933635981, 0.00661933421419712,             -0.0545460246273611, -0.568206880540376, -0.926975943696645,             -1.1357351813807, 0.913962339054452, -0.986062833322873,             0.66748541348963, 1.40659548970662, 1.15777896011788,             -0.138753197573533, -0.539321850960138, -1.07889349906152,             -0.0185621399511091, -0.232615685678704, 0.15629354251416,             -0.604009754754033, 0.629035120121665, 0.714169570852022,             1.07588610128876, 2.24975551737932, 0.197890598879292,             -0.575546318478704, -0.0773208650045946, -1.62791988910102,             0.129923153969037, -0.425673133260061, 0.406011748521125,             -0.268810185638072, -1.38098453629771, 0.0365833213445593,             -1.35324453117639, 0.897006193942258, -1.82935971226393,             -0.141876944171991, 0.457981777842779, -1.51961751308999,             1.39905531466027, -0.885339190903023, -0.506330291221321,             0.163332105966331, -0.337143856258392, -1.03595153200983,             0.409337928216715, -0.524223458216886, 0.506500373524185,             -0.504722862774708, -0.957250328953504, -0.0946343584532563,             0.649439317610584, 0.242321799327066, -0.0589340902617142,             -1.94779407157618, 1.4514436318915, -0.0399396776377224,             -0.863997691069911, -0.201690239712518, 0.261255562727432,             -1.51835138330586, 0.717308632275803, 0.246832728096417,             1.20276704630509, 0.986039270447351, -0.537940599062239,             -0.490282741813956, -0.995516172562447, -0.361702928254615,             0.944354811296923, 1.79220701161545, 0.928409395864299,             -1.82993766963068, 0.821878106163116, 1.0362687620034,             0.617420144129801, -0.854930363118786, 1.06451051848471,             0.729481458103667, 0.66265658435809, -0.381407202704243,             0.845891777793581, 0.111591884445813, -0.0677702616560359,             1.48709809651828, 0.75722337664623, -0.465789173656299,             -1.97798584729374, 0.0102867784121206, -2.23002207634089,             0.0358836856571656, -0.425314491268271, -0.361647192559167,             0.20686103848002, 0.385403578400139, 0.413130934724041,             1.3784888488768, 1.00611701258087, 0.283965976291545,             -0.108126154145963, -0.88099924065996, 0.232298088636026,             -0.0176163384677428, 0.00136880484767605, 0.0195311212755024,             -1.52242732010731, 2.26631656407334, -0.605199135385719,             -0.867772756129003, 0.228538608613444, 0.171258424034148,             -0.718704065018785, -0.0278817984131649, 0.127228908947344,             -0.122628238037461, 0.0107276026047643, -0.276478835892914,             0.165661195746879, -0.807414999109814, -0.230962303666868,             -0.217348013846105, -0.376860979279853, 3.09148976162528,             -0.0593118676335535, -0.0561935478129696, -0.0294737881103144,             -1.10407571028335, -0.034776955761889, -0.998614554857962,             -0.376573726833635, 0.383473098685012, -0.0584193253665229,             0.064658952421529, -0.0713840917272333, 0.0984249374898168,             -1.57910808842293, 0.014042015847622, 0.047491128532723,             -1.83643478139475, 0.131155868982134, 0.665949057483796,             -0.199962095258477, -0.178280331188448, 0.49165433171545,             0.12712397959634, -0.450652074430844, -0.304533501677814,             -0.0744289582491737, 0.386786600762673, -1.55351924091969,             0.0104041528528479, 0.923311030395605, -0.0274843926743704,             0.0194058727326059, -0.727425089815523, 1.49482456921322,             -0.108067783145335, 0.894190843141685, 0.0369960121596817,             0.281573749419677, -0.518699541647682, -0.134383198782158,             -0.321588268083596, -0.335160974684981, -0.182174609108486,             0.0439914358193575, -0.790454327095557, 0.459868580977798,             0.570062008882667, 0.468808961476039, -0.200644356337236,             -0.189717117967842, -1.1630501228289, -2.38893168460598,             -0.573738752161563, -0.0947442499156664, -0.51748124043143,             -0.277844267032144, -0.733229871155837, 0.246883388757942,             -0.0074169117898335, 0.0934954161521284, 0.129063874550619,             0.0367464224638074, -1.85768485074071, -0.96925546066316            ), dim = c(100L, 3L))), X = list(structure(c(0.903611026836546,         -1.50738161817875, 0.703124971314589, -0.442469980736628,         1.76753463292258, -0.304448272372758, -1.56383021420111,         0.517219620300936, 0.408246190676084, 0.0445455587707694,         -0.837652848855779, -0.67837038499389, 0.0301140628102749,         1.00997868200481, -0.492425368059042, -0.826604685679885,         -2.67581415530546, 0.488783532340314, 0.425366169535689,         1.06580351075778, 1.78983916394545, -0.232194336966745,         1.15344708390131, 0.0355792656025659, -0.642959358584812,         -0.946268965255803, -0.347142145193775, 0.243953403028752,         -0.0454812022197825, 0.200181814412768, 0.155187935786732,         0.731248351608544, -0.391159204166306, 1.58193714278134,         0.400069051366488, -1.23636891282223, 0.190248277029134,         0.50106639960255, -0.414767414457447, 0.336615087640316,         0.263799716817729, 1.28330344826123, -0.794009740911978,         -0.0731732097673163, -0.503657095457098, -1.1229616724733,         -1.81805412977208, 0.18257770276792, 0.60942587334541,         0.394957466909784, -1.37193604362354, -1.10959088377913,         -1.40352441818124, -0.661095463237892, 0.268137119602659,         0.557667285674555, -0.832422022553255, -2.75772968114894,         0.961946745669677, 0.540626432192122, -0.738508081288371,         -1.07250518658935, -0.238530742117813, -0.12616186977786,         0.716462499646871, 1.51264010550278, -0.843264934699796,         0.290297617353111, 1.20975230856504, -0.666775371593567,         -0.236417321540583, -1.61701141882917, 0.289673418781919,         -0.591597884260673, -0.992128711831015, -0.791184537024628,         0.391164359992256, -2.18792834424924, -0.447954260685191,         -0.99548631207274, -1.06964665117929, 0.538168378311135,         0.433227113792507, -0.0354709300407899, 0.501252475117944,         -0.6236531808011, -2.17453738094333, 0.782834291332142,         -0.314106557935569, -0.375110932271081, 0.0780881906347624,         0.715466343222291, 0.311213044440392, 0.953657335095112,         0.044492651533197, -0.484474542666608, -0.277642104527668,         0.818984801254122, -1.11817597863694, -1.08805553045395,         0.313478715882576, 0.612473307433314, -1.69108322753688,         0.784698627442325, 0.0119251352600229, -0.181255287869961,         1.10695440248067, 1.47939487098826, -1.14739944099984,         1.011654376514, -0.632069194974882, 0.13236131951909,         0.480926064725324, 0.133177627584607, -1.46286446232819,         -0.506401780474741, 1.53966323733755, 0.172793618387291,         -0.835823924079678, -0.655928703879608, 1.05756608653532,         0.346083489865367, -0.897186541993694, 0.00626521125563042,         0.59667050907573, 1.72255180794401, -0.881749483409345,         -0.379945955166868, 0.996110015873762, -0.459120892943841,         1.46026574621257, 1.04324617695035, -1.65904097034683,         0.423957776227396, -1.41916292618524, -1.46469245667068,         0.0704209721478317, 0.0566982219802716, -0.0327081772655874,         1.26428122406637, 0.294987885730239, -0.673086820504489,         0.119588291490956, -0.514396508991294, -0.0681115738665369,         -1.14801191183674, -0.115244480129169, 0.102936391849009,         -0.701743487103139, 0.041230624270294, -0.648768350598479,         -0.644007859466443, -0.204438825066372, 0.490840917661593,         -0.20533698727053, 0.190691323925256, 0.970024192661124,         -0.285261077847069, -0.103619268541766, 0.511254541203706,         -1.25816245001572, 0.543825968956194, -0.534963586582989,         -1.13804602678007, -1.76800377087565, -0.714978202867742,         -1.17020226435962, -1.17844814841946, 1.62729133795333,         -1.21214666562853, 0.997509917441285, 0.545245641420171,         -0.88478911517512, -0.611230697881371, -0.410199512833357,         0.190409369836815, -0.348324928959338, 0.826847530284988,         -0.292686902302723, -2.16534620996324, -0.0962167762033804,         -1.85195684624858, 0.937811135232089, -0.747686481439497,         -1.11524143570017, -0.591506415298824, 0.585230683909193,         -1.91855819930986, 0.253816791504093, -0.972241766246169,         -0.00851344803801686, 0.679041911007479, 0.569631366692422,         1.5029616611284, 0.129085401165474, -0.701182951676618,         2.15370721597723, -0.30324613826175, 0.807579776908013,         0.930991466126415, 0.454902098272933, 1.4254206900636,         -0.20899117251275, -1.23140277909061, -0.360603577153347,         -0.547213299484056, 0.327996007514467, -0.933299832093657,         0.680810824800176, -1.16388240018636, 1.75544950988335,         1.44963736425491, -0.448794941211084, 0.140067288930464,         -0.373650328177582, -1.20643411723808, -2.66134597494101,         -0.0250944932655905, -0.0343732572490637, 1.64235903904485,         -1.99546214753883, -0.662170758602409, 0.880037992310033,         0.342387420001643, 0.121753855523786, -0.620761034511813,         0.200945267574023, -0.235905348023341, 0.113661114970227,         -0.577929195287818, 1.18856488583833, 1.05993627812147,         1.33675821086468, -0.367169171130217, -0.304336704778395,         -0.350279624235713, 1.37414476272803, -0.299720491875069,         0.0976351442252321, 0.381188028723722, 0.678212556818783,         -0.26767327223427, 2.34596566433491, -0.927494655524829,         -1.42655717369774, 0.0423026643898127, 1.76744347000481,         0.0527503271453671, 0.109726039969968, 0.863202615558153,         -0.0989732047696172, 0.103696546086221, 1.20848487568464,         0.0937460210527718, -0.752196518946083, 0.394924219872661,         -1.09152043398742, -1.45829242499569, -0.122712284955754,         -1.1009291916684, 0.580923071839757, -0.146947489359788,         -0.766334615072354, 1.62289757854462, -0.109940544035991,         1.42170485426206, -0.113421048996398, -0.329280941581153,         0.373460983597143, 1.02988813093981, 2.70577504719934,         -1.03494587124924, -0.183429858640727, 1.07777130745133,         0.341620225298793, -0.187343624118674, -1.30285910852947,         -0.278658261975666, -0.184753908458266, -0.0817774971735639,         1.61224179372707, -0.461939839504668, -1.57605030081864,         0.496433073531127, -0.111953783818969, -0.204346400211973,         0.635568162856401, -2.90667395407155, -0.553658252760955,         -0.153451828250923, 0.60529051576044, -0.261006596184361,         -1.00513846241125, 0.372566114312583, 0.0194461765201242,         0.110528815395276, 1.15657043692358, -0.542220460211763,         -1.24920128341908, -1.28001259675319, -1.02393278779038,         -1.38765057998806, -0.0492211144061267, 1.81096073048314,         -0.0995100657082667, 0.777237124297383, -1.10259632518001,         -0.221644782701794, 0.5660949625959, -0.354959345255063,         0.785262601468044, 0.694047378599404, -0.632729895584955,         -0.771958641961308, 2.3578173876011, -0.19254933635981,         0.00661933421419712, -0.0545460246273611, -0.568206880540376,         -0.926975943696645, -1.1357351813807, 0.913962339054452,         -0.986062833322873, 0.66748541348963, 1.40659548970662,         1.15777896011788, -0.138753197573533, -0.539321850960138,         -1.07889349906152, -0.0185621399511091, -0.232615685678704,         0.15629354251416, -0.604009754754033, 0.629035120121665,         0.714169570852022, 1.07588610128876, 2.24975551737932,         0.197890598879292, -0.575546318478704, -0.0773208650045946,         -1.62791988910102, 0.129923153969037, -0.425673133260061,         0.406011748521125, -0.268810185638072, -1.38098453629771,         0.0365833213445593, -1.35324453117639, 0.897006193942258,         -1.82935971226393, -0.141876944171991, 0.457981777842779,         -1.51961751308999, 1.39905531466027, -0.885339190903023,         -0.506330291221321, 0.163332105966331, -0.337143856258392,         -1.03595153200983, 0.409337928216715, -0.524223458216886,         0.506500373524185, -0.504722862774708, -0.957250328953504,         -0.0946343584532563, 0.649439317610584, 0.242321799327066,         -0.0589340902617142, -1.94779407157618, 1.4514436318915,         -0.0399396776377224, -0.863997691069911, -0.201690239712518,         0.261255562727432, -1.51835138330586, 0.717308632275803,         0.246832728096417, 1.20276704630509, 0.986039270447351,         -0.537940599062239, -0.490282741813956, -0.995516172562447,         -0.361702928254615, 0.944354811296923, 1.79220701161545,         0.928409395864299, -1.82993766963068, 0.821878106163116,         1.0362687620034, 0.617420144129801, -0.854930363118786,         1.06451051848471, 0.729481458103667, 0.66265658435809,         -0.381407202704243, 0.845891777793581, 0.111591884445813,         -0.0677702616560359, 1.48709809651828, 0.75722337664623,         -0.465789173656299, -1.97798584729374, 0.0102867784121206,         -2.23002207634089, 0.0358836856571656, -0.425314491268271,         -0.361647192559167, 0.20686103848002, 0.385403578400139,         0.413130934724041, 1.3784888488768, 1.00611701258087,         0.283965976291545, -0.108126154145963, -0.88099924065996,         0.232298088636026, -0.0176163384677428, 0.00136880484767605,         0.0195311212755024, -1.52242732010731, 2.26631656407334,         -0.605199135385719, -0.867772756129003, 0.228538608613444,         0.171258424034148, -0.718704065018785, -0.0278817984131649,         0.127228908947344, -0.122628238037461, 0.0107276026047643,         -0.276478835892914, 0.165661195746879, -0.807414999109814,         -0.230962303666868, -0.217348013846105, -0.376860979279853,         3.09148976162528, -0.0593118676335535, -0.0561935478129696,         -0.0294737881103144, -1.10407571028335, -0.034776955761889,         -0.998614554857962, -0.376573726833635, 0.383473098685012,         -0.0584193253665229, 0.064658952421529, -0.0713840917272333,         0.0984249374898168, -1.57910808842293, 0.014042015847622,         0.047491128532723, -1.83643478139475, 0.131155868982134,         0.665949057483796, -0.199962095258477, -0.178280331188448,         0.49165433171545, 0.12712397959634, -0.450652074430844,         -0.304533501677814, -0.0744289582491737, 0.386786600762673,         -1.55351924091969, 0.0104041528528479, 0.923311030395605,         -0.0274843926743704, 0.0194058727326059, -0.727425089815523,         1.49482456921322, -0.108067783145335, 0.894190843141685,         0.0369960121596817, 0.281573749419677, -0.518699541647682,         -0.134383198782158, -0.321588268083596, -0.335160974684981,         -0.182174609108486, 0.0439914358193575, -0.790454327095557,         0.459868580977798, 0.570062008882667, 0.468808961476039,         -0.200644356337236, -0.189717117967842, -1.1630501228289,         -2.38893168460598, -0.573738752161563, -0.0947442499156664,         -0.51748124043143, -0.277844267032144, -0.733229871155837,         0.246883388757942, -0.0074169117898335, 0.0934954161521284,         0.129063874550619, 0.0367464224638074, -1.85768485074071,         -0.96925546066316), dim = c(100L, 5L)))), SampleStats = new(\"lavSampleStats\",         var = list(c(0.848575776390853, 0.836293355287128, 0.960372538241796,         0.844471000315694, 0.623933749708583)), cov = list(structure(c(0.848575776390853,         -0.0548114471966064, -0.00436143289552905, -0.0504748131403534,         0.0927608154027948, -0.0548114471966064, 0.836293355287128,         -0.0570858925342368, -0.0532997484932391, -0.00370704078012719,         -0.00436143289552905, -0.0570858925342368, 0.960372538241796,         -0.151696380811395, 0.000710247243401753, -0.0504748131403534,         -0.0532997484932391, -0.151696380811395, 0.844471000315694,         0.122404086037122, 0.0927608154027948, -0.00370704078012719,         0.000710247243401753, 0.122404086037122, 0.623933749708583        ), dim = c(5L, 5L))), mean = list(c(-0.158063045341793,         -0.0878617963239032, -0.000837192642517517, 0.0181244354063178,         -0.151711554455367)), th = list(NULL), th.idx = list(            NULL), th.names = list(NULL), res.cov = list(NULL),         res.var = list(NULL), res.th = list(NULL), res.th.nox = list(            NULL), res.slopes = list(NULL), res.int = list(NULL),         mean.x = list(c(-0.000837192642517517, 0.0181244354063178,         -0.151711554455367)), cov.x = list(structure(c(0.960372538241796,         -0.151696380811395, 0.000710247243401753, -0.151696380811395,         0.844471000315694, 0.122404086037122, 0.000710247243401753,         0.122404086037122, 0.623933749708583), dim = c(3L, 3L        ))), bifreq = list(NULL), group.w = list(1), nobs = list(            100L), ntotal = 100L, ngroups = 1L, x.idx = list(            3:5), icov = list(structure(c(1.21301953550557, 0.087728946342542,         0.0286351577272475, 0.112451084363838, -0.201912906197888,         0.087728946342542, 1.21390702914536, 0.0886103191933928,         0.101524954374649, -0.0258485940686868, 0.0286351577272475,         0.0886103191933928, 1.07952532678701, 0.207854031806511,         -0.0457366686870925, 0.112451084363838, 0.101524954374649,         0.207854031806511, 1.273215568069, -0.266132602861837,         -0.201912906197888, -0.0258485940686868, -0.0457366686870925,         -0.266132602861837, 1.68486155281515), dim = c(5L, 5L        ))), cov.log.det = list(-1.12145042562199), res.icov = list(            NULL), res.cov.log.det = list(NULL), ridge = 0, WLS.obs = list(            c(0.848575776390853, -0.0548114471966064, -0.00436143289552905,             -0.0504748131403534, 0.0927608154027948, 0.836293355287128,             -0.0570858925342368, -0.0532997484932391, -0.00370704078012719,             0.960372538241796, -0.151696380811395, 0.000710247243401753,             0.844471000315694, 0.122404086037122, 0.623933749708583            )), WLS.V = list(NULL), WLS.VD = list(NULL), NACOV = list(            NULL), NACOV.user = FALSE, missing.flag = FALSE,         missing = list(NULL), missing.h1 = list(NULL), YLp = list(            NULL), zero.cell.tables = list(NULL)), Model = new(\"lavModel\",         GLIST = list(lambda = structure(c(1, 0, 0, 0, 0, 0, 1,         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1), dim = c(5L,         5L)), theta = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0,         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), dim = c(5L,         5L)), psi = structure(c(0.828720555359228, 0, 0, 0, 0,         0, 0.832752958745803, 0, 0, 0, 0, 0, 0.960372538241796,         -0.151696380811395, 0.000710247243401753, 0, 0, -0.151696380811395,         0.844471000315694, 0.122404086037122, 0, 0, 0.000710247243401753,         0.122404086037122, 0.623933749708583), dim = c(5L, 5L        )), beta = structure(c(0, -0.064592283590429, 0, 0, 0,         0, 0, 0, 0, 0, -0.018423533897073, 0, 0, 0, 0, -0.0871100375677224,         0, 0, 0, 0, 0.165781263232526, 0, 0, 0, 0), dim = c(5L,         5L))), dimNames = list(list(c(\"m\", \"y\", \"x\", \"w\", \"x:w\"        ), c(\"m\", \"y\", \"x\", \"w\", \"x:w\")), list(c(\"m\", \"y\", \"x\",         \"w\", \"x:w\"), c(\"m\", \"y\", \"x\", \"w\", \"x:w\")), list(c(\"m\",         \"y\", \"x\", \"w\", \"x:w\"), c(\"m\", \"y\", \"x\", \"w\", \"x:w\")),             list(c(\"m\", \"y\", \"x\", \"w\", \"x:w\"), c(\"m\", \"y\", \"x\",             \"w\", \"x:w\"))), isSymmetric = c(FALSE, TRUE, TRUE,         FALSE), mmSize = c(25L, NA, NA, 25L), representation = \"LISREL\",         modprop = list(uvreg = FALSE, uvord = FALSE, mvreg = FALSE,             nexo = 0L, acyclic = TRUE, bowfree = TRUE), meanstructure = FALSE,         correlation = FALSE, categorical = FALSE, multilevel = FALSE,         group.w.free = FALSE, link = \"default\", nblocks = 1L,         ngroups = 1L, nefa = 0L, nmat = 4L, nvar = 5L, num.idx = list(            1:5), th.idx = list(NULL), nx.free = 6L, nx.unco = 6L,         nx.user = 12L, m.free.idx = list(integer(0), integer(0),             c(1L, 7L), c(2L, 11L, 16L, 21L)), x.free.idx = list(            integer(0), integer(0), 5:6, c(4L, 1L, 2L, 3L)),         x.unco.idx = list(integer(0), integer(0), 5:6, c(4L,         1L, 2L, 3L)), m.user.idx = list(integer(0), integer(0),             c(1L, 7L, 13L, 14L, 15L, 18L, 19L, 20L, 23L, 24L,             25L), c(2L, 11L, 16L, 21L)), x.user.idx = list(integer(0),             integer(0), c(5L, 6L, 7L, 8L, 9L, 8L, 10L, 11L, 9L,             11L, 12L), c(4L, 1L, 2L, 3L)), x.def.idx = integer(0),         x.ceq.idx = integer(0), x.cin.idx = integer(0), x.free.var.idx = 5:6,         ceq.simple.only = FALSE, ceq.simple.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints = FALSE, eq.constraints.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints.k0 = numeric(0), def.function = function ()         NULL, ceq.function = function ()         NULL, ceq.jacobian = function ()         NULL, ceq.JAC = structure(numeric(0), dim = c(0L, 6L)),         ceq.rhs = numeric(0), ceq.linear.idx = integer(0), ceq.nonlinear.idx = integer(0),         cin.simple.only = FALSE, cin.function = function ()         NULL, cin.jacobian = function ()         NULL, cin.JAC = structure(numeric(0), dim = c(0L, 6L)),         cin.rhs = numeric(0), cin.linear.idx = integer(0), cin.nonlinear.idx = integer(0),         ceq.efa.JAC = structure(numeric(0), dim = c(0L, 0L)),         con.jac = structure(numeric(0), dim = c(0L, 0L)), con.lambda = numeric(0),         nexo = 3L, conditional.x = FALSE, fixed.x = TRUE, parameterization = \"delta\",         ov.x.dummy.ov.idx = list(3:5), ov.x.dummy.lv.idx = list(            3:5), ov.y.dummy.ov.idx = list(1:2), ov.y.dummy.lv.idx = list(            1:2), ov.efa.idx = list(NULL), lv.efa.idx = list(            NULL), rv.ov = list(), rv.lv = list(), H = list(),         lv.order = list(), estimator = \"ML\", estimator.args = list()),     Cache = list(NULL), Fit = new(\"Fit\", npar = 6L, x = c(-0.018423533897073,     -0.0871100375677224, 0.165781263232526, -0.064592283590429,     0.828720555359228, 0.832752958745803), partrace = structure(numeric(0), dim = c(0L,     0L)), start = c(-0.018423533897073, -0.0871100375677224,     0.165781263232526, -0.064592283590429, 0.828720555359228,     0.832752958745803, 0.960372538241796, -0.151696380811395,     0.000710247243401753, 0.844471000315694, 0.122404086037122,     0.623933749708583), est = c(-0.018423533897073, -0.0871100375677224,     0.165781263232526, -0.064592283590429, 0.828720555359228,     0.832752958745803, 0.960372538241796, -0.151696380811395,     0.000710247243401753, 0.844471000315694, 0.122404086037122,     0.623933749708583), se = c(0.0942828231813187, 0.102005640338573,     0.116976058927268, 0.0990632968075366, 0.117198784880639,     0.117769052836464, 0, 0, 0, 0, 0, 0), fx = 0.00541292925976977,         fx.group = 0.00541292925976977, logl = NA_real_, logl.group = NA_real_,         iterations = 1L, converged = TRUE, control = list(eval.max = 20000L,             iter.max = 10000L, trace = 0L, step.min = 1, step.max = 1,             abs.tol = 2.22044604925031e-15, rel.tol = 1e-10,             x.tol = 1.5e-08, xf.tol = 2.2e-14), Sigma.hat = list(            structure(c(0.848575776390853, -0.0548114471966064,             -0.00436143289552905, -0.0504748131403534, 0.0927608154027948,             -0.0548114471966064, 0.836293355287128, 0.000281714910448638,             0.00326028344453562, -0.00599163289457676, -0.00436143289552905,             0.000281714910448638, 0.960372538241796, -0.151696380811395,             0.000710247243401753, -0.0504748131403534, 0.00326028344453562,             -0.151696380811395, 0.844471000315694, 0.122404086037122,             0.0927608154027948, -0.00599163289457676, 0.000710247243401753,             0.122404086037122, 0.623933749708583), dim = c(5L,             5L))), Mu.hat = list(NULL), TH = list(NULL), test = structure(list(            standard = list(test = \"standard\", stat = 1.08258585195395,                 stat.group = 1.08258585195395, df = 3L, refdistr = \"chisq\",                 pvalue = 0.781279504098899)), info = list(ngroups = 1L,             group.label = character(0), information = c(\"expected\",             \"expected\"), h1.information = c(\"structured\", \"structured\"            ), observed.information = c(\"hessian\", \"hessian\")))),     boot = list(), optim = list(x = c(-0.018423533897073, -0.0871100375677224,     0.165781263232526, -0.064592283590429, 0.828720555359228,     0.832752958745803), dx = c(2.42891968407996e-18, 1.04721982323468e-17,     -3.60778820986563e-20, -7.32721914706738e-18, 1.21682611672364e-18,     -4.67421966195237e-19), npar = 6L, iterations = 1L, converged = TRUE,         warn.txt = \"\", parscale = c(1, 1, 1, 1, 1, 1), fx = 0.00541292925976977,         fx.group = 0.00541292925976977, logl.group = NA_real_,         logl = NA_real_, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14)),     loglik = list(loglik = -265.243180839727, loglik.group = -265.243180839727,         npar = 6L, ntotal = 100L, AIC = 542.486361679454, BIC = 558.117382795383,         BIC2 = 539.167875577072, estimator = \"ML\", conditional.x = FALSE,         fixed.x = TRUE), implied = list(cov = list(structure(c(0.848575776390853,     -0.0548114471966064, -0.00436143289552905, -0.0504748131403534,     0.0927608154027948, -0.0548114471966064, 0.836293355287128,     0.000281714910448638, 0.00326028344453562, -0.00599163289457676,     -0.00436143289552905, 0.000281714910448638, 0.960372538241796,     -0.151696380811395, 0.000710247243401753, -0.0504748131403534,     0.00326028344453562, -0.151696380811395, 0.844471000315694,     0.122404086037122, 0.0927608154027948, -0.00599163289457676,     0.000710247243401753, 0.122404086037122, 0.623933749708583    ), dim = c(5L, 5L))), mean = list(NULL), th = list(NULL),         group.w = list(NULL)), vcov = list(se = \"standard\", information = \"expected\",         vcov = structure(c(0.00888925074703981, 0.00164506458530931,         -0.000332849750430759, -2.28577484768364e-17, -1.83794478971246e-17,         -2.88985032625332e-22, 0.00164506458530931, 0.0104051506608823,         -0.00204316782015112, -3.29971976349266e-17, -2.60342186242434e-17,         -1.46364234918253e-21, -0.00033284975043076, -0.00204316782015112,         0.0136833983621556, -5.16655652938337e-18, 6.91190171417708e-19,         2.28810622163438e-21, -2.26334110508771e-17, -3.3124681098615e-17,         -4.86731863257912e-18, 0.00981353677437809, 3.2828497884989e-17,         3.53146459952608e-17, -1.83321520928755e-17, -2.61300900677094e-17,         5.70410961370528e-19, 3.33084230105296e-17, 0.0137355551774982,         -6.75120238901664e-22, -9.13916088783156e-24, -4.62190092629746e-23,         1.60692125476865e-21, 3.50284465665377e-17, -8.93699955532436e-21,         0.0138695498059979), dim = c(6L, 6L))), test = structure(list(        standard = list(test = \"standard\", stat = 1.08258585195395,             stat.group = 1.08258585195395, df = 3L, refdistr = \"chisq\",             pvalue = 0.781279504098899)), info = list(ngroups = 1L,         group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\"))),     h1 = list(implied = list(cov = list(structure(c(0.848575776390853,     -0.0548114471966064, -0.00436143289552905, -0.0504748131403534,     0.0927608154027948, -0.0548114471966064, 0.836293355287128,     -0.0570858925342368, -0.0532997484932391, -0.00370704078012719,     -0.00436143289552905, -0.0570858925342368, 0.960372538241796,     -0.151696380811395, 0.000710247243401753, -0.0504748131403534,     -0.0532997484932391, -0.151696380811395, 0.844471000315694,     0.122404086037122, 0.0927608154027948, -0.00370704078012719,     0.000710247243401753, 0.122404086037122, 0.623933749708583    ), dim = c(5L, 5L))), mean = list(c(-0.158063045341793, -0.0878617963239032,     -0.000837192642517517, 0.0181244354063178, -0.151711554455367    )), th = list(NULL), group.w = list(1)), logl = list(loglik = -264.70188791375,         loglik.group = -264.70188791375)), baseline = list(partable = list(        id = 1:8, lhs = c(\"m\", \"y\", \"x\", \"w\", \"x:w\", \"x\", \"x\",         \"w\"), op = c(\"~~\", \"~~\", \"~~\", \"~~\", \"~~\", \"~~\", \"~~\",         \"~~\"), rhs = c(\"m\", \"y\", \"x\", \"w\", \"x:w\", \"w\", \"x:w\",         \"x:w\"), user = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), block = c(1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L), group = c(1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L), free = c(1L, 2L, 0L, 0L, 0L, 0L, 0L,         0L), ustart = c(0.848575776390852, 0.836293355287128,         0.960372538241795, 0.844471000315694, 0.623933749708583,         -0.151696380811395, 0.000710247243401753, 0.122404086037122        ), exo = c(0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L), label = c(\"\",         \"\", \"\", \"\", \"\", \"\", \"\", \"\"), lower = c(0, 0, 0.960372538241795,         0.844471000315694, 0.623933749708583, -0.151696380811395,         0.000710247243401753, 0.122404086037122), upper = c(Inf,         Inf, 0.960372538241795, 0.844471000315694, 0.623933749708583,         -0.151696380811395, 0.000710247243401753, 0.122404086037122        ), start = c(0.848575776390852, 0.836293355287128, 0.960372538241795,         0.844471000315694, 0.623933749708583, -0.151696380811395,         0.000710247243401753, 0.122404086037122), est = c(0.848575776390853,         0.836293355287128, 0.960372538241795, 0.844471000315694,         0.623933749708583, -0.151696380811395, 0.000710247243401753,         0.122404086037122), se = c(0.120006737167322, 0.118269740516956,         0, 0, 0, 0, 0, 0)), test = structure(list(standard = list(        test = \"standard\", stat = 3.87446585465767, stat.group = 3.87446585465767,         df = 7L, refdistr = \"chisq\", pvalue = 0.794117713423559)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\")))),     internal = list(), external = list())), class = c(\"fit_out\", \"list\"), args = list(model = NULL, fit_function = \"lavaan\", arg_data_name = \"data\",     arg_model_name = \"model\", arg_group_name = \"group\", parallel = FALSE,     progress = TRUE, ncores = 1)), R = 100, parallel = FALSE,     progress = TRUE, ncores = 1): manymome 0.2.7.1 or later is required. If not available from CRAN, can be installed from GitHub: remotes::install_github('sfcheung/manymome')  test_out <- power4test(object = sim_only,                        test_fun = test_index_of_mome,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         w = \"w\",                                         mc_ci = TRUE)) #> Error: object 'sim_only' not found  print(test_out,       test_long = TRUE) #> Error: object 'test_out' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Test an Indirect Effect — test_indirect_effect","title":"Test an Indirect Effect — test_indirect_effect","text":"Test indirect effect power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test an Indirect Effect — test_indirect_effect","text":"","code":"test_indirect_effect(   fit = fit,   x = NULL,   m = NULL,   y = NULL,   mc_ci = TRUE,   mc_out = NULL,   boot_ci = FALSE,   boot_out = NULL,   ...,   fit_name = \"fit\",   get_map_names = FALSE,   get_test_name = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test an Indirect Effect — test_indirect_effect","text":"fit fit object, passed manymome::indirect_effect(). x name x-variable, predictor. m character vector name(s) mediator(s). path moves first mediator vector last mediator vector. Can NULL path direct path without mediator. y name y-variable, outcome variable. mc_ci Logical. TRUE, default, Monte Carlo confidence intervals formed. argument boot_ci TRUE. mc_out pre-generated Monte Carlo estimates generated manymome::do_mc, stored power4test object. Users set argument let power4test() set automatically. boot_ci Logical. TRUE, default, nonparametric bootstrap confidence intervals formed. argument mc_ci TRUE. boot_out pre-generated bootstrap estimates generated manymome::do_boot, stored power4test object. Users set argument let power4test() set automatically. ... Additional arguments passed manymome::indirect_effect(). fit_name name model fit object extracted. Default \"fit\". Used one model fitted replication. name model test conducted. get_map_names Logical. Used power4test() determine extract stored information assign function. Users use argument. get_test_name Logical. Used power4test() get default name test. Users use argument.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test an Indirect Effect — test_indirect_effect","text":"normal usage, returns named numeric vector following elements: est: mean estimated indirect effect across datasets. cilo cihi: means lower upper limits confidence interval (95% default), respectively. sig: Whether test confidence interval significant (1) significant (0).","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test an Indirect Effect — test_indirect_effect","text":"function used power4test() testing indirect effect, setting test_fun argument. uses manymome::indirect_effect() test. can used models fitted lavaan::sem() fitted sequence calls stats::lm(), although nonparametric bootstrap confidence interval supported models fitted regression using stats::lm().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/test_indirect_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test an Indirect Effect — test_indirect_effect","text":"","code":"model_simple_med <- \" m ~ x y ~ m + x \"  model_simple_med_es <- c(\"y ~ m\" = \"l\",                          \"m ~ x\" = \"m\",                          \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 5,                        model = model_simple_med,                        pop_es = model_simple_med_es,                        n = 100,                        R = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s): #> Generate Monte Carlo estimates: #> Error in (function (fit_all, R = 100, ..., iseed = NULL, parallel = FALSE,     progress = FALSE, ncores = max(1, parallel::detectCores(logical = FALSE) -         1), compute_implied_stats = FALSE) {    manymome_implied <- (utils::packageVersion(\"manymome\") >=         \"0.2.7.1\")    if (isFALSE(manymome_implied)) {        stop(\"manymome 0.2.7.1 or later is required. \", \"If not available from CRAN, can be installed from \",             \"GitHub: remotes::install_github('sfcheung/manymome')\")    }    out <- do_FUN(X = fit_all, FUN = gen_mc_i, R = R, ..., compute_implied_stats = compute_implied_stats,         iseed = iseed, parallel = parallel, progress = progress,         ncores = ncores)    class(out) <- c(\"mc_list\", class(out))    return(out)})(fit_all = structure(list(new(\"lavaan\", version = \"0.6-19\",     call = lavaan::lavaan(model = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(        m = c(-1.0058992908557, 0.473681263238225, 1.0901451247436,         -2.02743293854847, 0.502863171551116, 0.710885262227487,         0.00447210926904418, -0.187744703597052, -0.528653702002812,         -1.18337666530841, -0.32979547620937, -1.07247053911792,         -0.292451089562514, -0.42063448927811, 0.790573459858427,         0.0213968555182177, -0.532992960846149, -1.05107036265389,         -0.890027204814649, 2.49342071088843, 0.39646360373391,         -0.270020722889794, 0.261789170595672, 0.790469656122502,         -0.575454019876166, -1.57943046384856, 1.42402405262115,         -0.773280672758551, -0.219737121401019, -0.836890436241594,         0.95420685080104, -0.536098147323517, -0.956813665014848,         -0.443116110531749, -1.45830805133207, -1.437100423269,         -3.04957092165232, -1.35568837057382, -0.271883099514524,         -0.26615579540397, 1.40047186021849, -0.895400518001046,         -1.14529750799898, -0.0543447052053874, -0.732873359362109,         -0.84840845424305, -0.64913190155761, -1.07297787454812,         -0.420390896555157, -0.39355148021593, -1.59176484173585,         -0.237227871115963, -0.922156163826606, -0.769252464097226,         -0.495745483481408, 0.425971763197159, 2.01500856103583,         -1.10490327280404, 1.60936066511874, -0.982978119751264,         0.919086471868052, 2.32691948545754, 0.0144283333569641,         -1.16776624218704, 0.0943243395400734, 1.49526101044463,         -1.15775654242161, 0.948494382478262, 1.38380457128159,         0.520948446159479, -0.0848088180385032, 0.113013834873792,         -0.148473736655682, 0.903015742469832, 2.58973343267609,         -0.341666841858629, -1.08405836865232, -0.394278838429946,         0.244514780331725, -0.206739411548476, -0.473147381056783,         -0.0211137496023147, -1.51938366460491, 0.0783224641966739,         0.567640645179946, 0.761295543440156, 0.270707237932193,         -0.457910772782194, -0.648626511738338, -1.10097676166057,         0.244922735721186, 0.298415726314921, 1.09751717868351,         0.769222643183293, 0.0240564372473475, 0.882114982058661,         -1.43485812137356, 0.727741888928042, 1.03419106543897,         2.11916362387426), y = c(-0.1439617341926, -0.174277626103084,         0.602224604404354, -1.44887499366459, -0.463904174168501,         0.500059589539494, -0.773951880206804, 0.0517804664566934,         0.0430846805746435, -0.636812687531766, -0.334582095393778,         -1.0983461632776, -1.10731215946008, 0.525175789638999,         0.414653245603842, 0.730487316463909, -1.34408136930753,         -0.379154013094857, 0.137965520381119, 1.22395434592039,         0.0324813218120451, -0.812161380874894, 1.9133151518045,         1.04518815207134, 1.292083721716, -0.720381548920755,         0.165195533219977, -1.69718629157368, -0.660747173763155,         -0.222462342062906, 1.35498501787693, -0.0491610358843584,         -1.49334384335015, 0.357565541111457, -2.1581833540497,         -1.03538755260034, -1.79855196419749, -2.36507475508984,         0.660851637576232, -0.67250052216282, 0.410951705416395,         0.760533257966452, -0.0212725401002647, -0.121076956771822,         0.0784949379362682, -0.0784246990073527, 1.11550997554267,         -0.297558241032477, 0.228249504660866, 0.10421309939811,         -1.12257980686361, -0.0340730006015841, 0.958116411077828,         -1.14291155805925, -0.142425489752799, 1.39262563716402,         0.804316458979331, -1.46470790799051, 0.0514256342834468,         -0.829348978252946, -0.274283453294785, 0.937739407943759,         -0.351683826842485, -0.742409762101558, 0.399683091299982,         1.28857866229072, 0.874490535614432, 0.414756742173082,         0.414046770730831, 1.53440254315624, 1.43358814591565,         0.0939573525239246, -0.362326557452296, -1.12659429205047,         2.51705580505852, -0.896201086603481, -1.51523631210029,         2.438839161316, 0.325791813541597, -0.132172507026923,         -2.60274520612392, -0.0969780594504372, 0.0855764450401389,         0.397582226715701, 1.07391449097986, 2.09861025181797,         1.14783129188257, -0.669534565586153, 0.285524667523424,         -0.722321914484456, -0.343521604348032, -2.32395167916648,         -0.135095644737079, 0.807071187981235, 1.8895994740787,         0.874671746534542, -0.180311268624562, -0.472625773108594,         0.657958641995046, -0.740224694435862), x = c(0.485226820569252,         0.696768778564913, 0.185513915583057, 0.700733515544461,         0.311681028661359, 0.760462361967838, 1.84246362620766,         1.1123628412626, 0.0326639575014441, -1.11444896479736,         0.418057822385083, -0.400235237343163, 1.49349310261748,         -1.60708093984972, -0.415751788401515, 0.42200837321742,         -0.151736536534977, -0.60615111526422, -0.304721068966714,         0.629536099884472, 0.895171980275539, 0.660212631820405,         2.27348352044748, 1.17349757263239, 0.287709728313787,         -0.659770093821306, 2.91914013071762, 0.677415500438328,         -0.684320344136007, 0.186492083080971, -0.324393300483657,         -0.274704218225806, -0.933503340589868, 0.116845344986082,         0.319160238648117, -1.07754212275943, -3.23315213292314,         -0.254874652654534, 0.0295178303214797, 0.594273774110513,         0.0591351681787969, 0.413398894737046, -1.09777217457042,         0.711175257270441, 0.718888729854143, 0.251651069028968,         1.35727443615177, 0.404468471278607, 0.264364269837939,         0.268043904143697, 0.436930577039483, 1.06012390548736,         0.452190396528715, 0.663198615687065, -1.13637355399084,         -0.370497517092117, 1.47696958979247, -1.22390375051376,         0.258068387396106, 0.405002805433516, 0.97580332180945,         -0.348876736539909, 0.158625439491262, -1.76325506654115,         0.338596047099905, -0.666565029559273, -0.238646624327644,         -1.18776528245719, 0.384935321768578, 0.66657951565448,         -0.304613889457735, 1.8250110640863, 0.670559370567588,         0.948632573255153, 2.04940300167091, -0.651113609237535,         0.808619272846293, 0.986580613954563, -0.00617079609070003,         0.319052357931912, -1.01182190274184, 0.470167547726389,         -0.700970331629097, 0.813682862526491, -0.811430783992772,         0.31939748709946, -0.846522653163624, -0.245763179128733,         -1.55285901110546, 0.128434032925753, 0.985443389404868,         0.183247523067191, -1.76622921343046, -0.620533696615944,         1.65604303699874, 1.80980538558388, -1.17503676801214,         -0.366703258827641, 0.353625448927287, 0.319156220867898        )), class = \"data.frame\", row.names = c(NA, -100L)),         model.type = \"sem\", int.ov.free = TRUE, int.lv.free = FALSE,         auto.fix.first = TRUE, auto.fix.single = TRUE, auto.var = TRUE,         auto.cov.lv.x = TRUE, auto.cov.y = TRUE, auto.th = TRUE,         auto.delta = TRUE, auto.efa = TRUE), timing = list(init = c(elapsed = 0),         ov.names = c(elapsed = 0.00199999999999889), Options = c(elapsed = 0.00100000000000122),         Data = c(elapsed = 0.000999999999997669), ParTable = c(elapsed = 0.00300000000000011),         SampleStats = c(elapsed = 0.00100000000000122), h1 = c(elapsed = 0),         bounds = c(elapsed = 0.00100000000000122), start = c(elapsed = 0),         Model = c(elapsed = 0.00399999999999778), cache = c(elapsed = 0),         optim = c(elapsed = 0.00200000000000244), implied = c(elapsed = 0),         loglik = c(elapsed = 0), vcov = c(elapsed = 0.000999999999997669),         test = c(elapsed = 0), Fit = c(elapsed = 0.00100000000000122),         baseline = c(elapsed = 0.0120000000000005), rotation = c(elapsed = 0),         total = c(elapsed = 0.0289999999999999)), Options = list(        model.type = \"sem\", mimic = \"lavaan\", meanstructure = FALSE,         int.ov.free = TRUE, int.lv.free = FALSE, marker.int.zero = FALSE,         conditional.x = FALSE, fixed.x = TRUE, orthogonal = FALSE,         orthogonal.x = FALSE, orthogonal.y = FALSE, std.lv = FALSE,         correlation = FALSE, effect.coding = \"\", ceq.simple = FALSE,         parameterization = \"delta\", auto.fix.first = TRUE, auto.fix.single = TRUE,         auto.var = TRUE, auto.cov.lv.x = TRUE, auto.cov.y = TRUE,         auto.th = TRUE, auto.delta = TRUE, auto.efa = TRUE, rotation = \"geomin\",         rotation.se = \"bordered\", rotation.args = list(orthogonal = FALSE,             row.weights = \"none\", std.ov = TRUE, geomin.epsilon = 0.001,             orthomax.gamma = 1, cf.gamma = 0, oblimin.gamma = 0,             promax.kappa = 4, target = structure(numeric(0), dim = c(0L,             0L)), target.mask = structure(numeric(0), dim = c(0L,             0L)), rstarts = 30L, algorithm = \"gpa\", reflect = TRUE,             order.lv.by = \"index\", gpa.tol = 1e-05, tol = 1e-08,             warn = FALSE, verbose = FALSE, jac.init.rot = TRUE,             max.iter = 10000L), std.ov = FALSE, missing = \"listwise\",         sampling.weights.normalization = \"total\", samplestats = TRUE,         sample.cov.rescale = TRUE, sample.cov.robust = FALSE,         sample.icov = TRUE, ridge = FALSE, ridge.constant = \"default\",         group.label = NULL, group.equal = character(0), group.partial = character(0),         group.w.free = FALSE, level.label = NULL, estimator = \"ML\",         estimator.orig = \"ML\", estimator.args = list(), likelihood = \"normal\",         link = \"default\", representation = \"LISREL\", do.fit = TRUE,         bounds = \"none\", rstarts = 0L, se = \"standard\", test = \"standard\",         information = c(\"expected\", \"expected\"), h1.information = c(\"structured\",         \"structured\"), observed.information = c(\"hessian\", \"hessian\"        ), information.meat = \"first.order\", h1.information.meat = \"structured\",         omega.information = \"expected\", omega.h1.information = \"unstructured\",         omega.information.meat = \"first.order\", omega.h1.information.meat = \"unstructured\",         scaled.test = \"standard\", ug2.old.approach = FALSE, bootstrap = 1000L,         gamma.n.minus.one = FALSE, gamma.unbiased = FALSE, control = list(),         optim.method = \"nlminb\", optim.attempts = 4L, optim.force.converged = FALSE,         optim.gradient = \"analytic\", optim.init_nelder_mead = FALSE,         optim.var.transform = \"none\", optim.parscale = \"none\",         optim.partrace = FALSE, optim.dx.tol = 0.001, optim.bounds = list(            lower = character(0), upper = character(0)), em.iter.max = 10000L,         em.fx.tol = 1e-08, em.dx.tol = 1e-04, em.zerovar.offset = 1e-04,         em.h1.iter.max = 500L, em.h1.tol = 1e-05, em.h1.warn = TRUE,         optim.gn.iter.max = 200L, optim.gn.stephalf.max = 10L,         optim.gn.tol.x = 1e-05, integration.ngh = 21L, parallel = \"no\",         ncpus = 1L, cl = NULL, iseed = NULL, zero.add = c(0.5,         0), zero.keep.margins = TRUE, zero.cell.warn = FALSE,         allow.empty.cell = FALSE, cat.wls.w = TRUE, start = \"default\",         check.start = TRUE, check.post = TRUE, check.gradient = TRUE,         check.vcov = TRUE, check.lv.names = TRUE, check.lv.interaction = TRUE,         check.delta.cat.mediator = TRUE, h1 = TRUE, baseline = TRUE,         baseline.conditional.x.free.slopes = TRUE, implied = TRUE,         loglik = TRUE, store.vcov = \"default\", parser = \"new\",         categorical = FALSE, .categorical = FALSE, .clustered = FALSE,         .multilevel = FALSE), ParTable = list(id = 1:6, lhs = c(\"m\",     \"y\", \"y\", \"m\", \"y\", \"x\"), op = c(\"~\", \"~\", \"~\", \"~~\", \"~~\",     \"~~\"), rhs = c(\"x\", \"m\", \"x\", \"m\", \"y\", \"x\"), user = c(1L,     1L, 1L, 0L, 0L, 0L), block = c(1L, 1L, 1L, 1L, 1L, 1L), group = c(1L,     1L, 1L, 1L, 1L, 1L), free = c(1L, 2L, 3L, 4L, 5L, 0L), ustart = c(NA_real_,     NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), exo = c(0L,     0L, 0L, 0L, 0L, 1L), label = c(\"\", \"\", \"\", \"\", \"\", \"\"), plabel = c(\".p1.\",     \".p2.\", \".p3.\", \".p4.\", \".p5.\", \".p6.\"), start = c(0.381643498727351,     0.469027749026988, 0.098223671094075, 0.902771360088879,     0.783387828134702, 0.912677459948807), est = c(0.381643498727351,     0.469027749026988, 0.098223671094075, 0.902771360088879,     0.783387828134702, 0.912677459948807), se = c(0.0994558249164696,     0.0931535742690534, 0.0992336074200752, 0.12767115011597,     0.11078776911461, 0)), pta = list(names = c(\"id\", \"lhs\",     \"op\", \"rhs\", \"user\", \"block\", \"group\", \"free\", \"ustart\",     \"exo\", \"label\", \"plabel\", \"start\", \"est\", \"se\"), vidx = list(        ov = list(1:3), ov.x = list(3L), ov.nox = list(1:2),         ov.model = list(1:3), ov.y = list(2L), ov.num = list(            1:3), ov.ord = list(integer(0)), ov.ind = list(integer(0)),         ov.orphan = list(3L), ov.interaction = list(integer(0)),         ov.efa = list(integer(0)), th = list(integer(0)), th.mean = list(            1:2), lv = list(integer(0)), lv.regular = list(integer(0)),         lv.formative = list(integer(0)), lv.x = list(integer(0)),         lv.y = list(integer(0)), lv.nox = list(integer(0)), lv.nonnormal = list(            integer(0)), lv.interaction = list(integer(0)), lv.efa = list(            integer(0)), lv.rv = list(integer(0)), lv.ind = list(            integer(0)), lv.marker = list(integer(0)), eqs.y = list(            integer(0)), eqs.x = list(integer(0))), meanstructure = FALSE,         nblocks = 1L, ngroups = 1L, nlevels = 1L, nvar = list(            3L), nfac = list(0L), nfac.nonnormal = list(0L),         th.idx = list(c(0, 0)), vnames = list(ov = list(c(\"m\",         \"y\", \"x\")), ov.x = list(\"x\"), ov.nox = list(c(\"m\", \"y\"        )), ov.model = list(c(\"m\", \"y\", \"x\")), ov.y = list(\"y\"),             ov.num = list(c(\"m\", \"y\", \"x\")), ov.ord = list(character(0)),             ov.ind = list(character(0)), ov.orphan = list(\"x\"),             ov.interaction = list(character(0)), ov.efa = list(                character(0)), th = list(character(0)), th.mean = list(                c(\"m\", \"y\")), lv = list(character(0)), lv.regular = list(                character(0)), lv.formative = list(character(0)),             lv.x = list(character(0)), lv.y = list(character(0)),             lv.nox = list(character(0)), lv.nonnormal = list(                character(0)), lv.interaction = list(character(0)),             lv.efa = list(character(0)), lv.rv = list(character(0)),             lv.ind = list(character(0)), lv.marker = list(structure(character(0), names = character(0))),             eqs.y = list(c(\"m\", \"y\")), eqs.x = list(c(\"x\", \"m\"            )))), Data = new(\"lavData\", data.type = \"full\", group = character(0),         ngroups = 1L, group.label = character(0), block.label = character(0),         cluster = character(0), nlevels = 1L, level.label = character(0),         std.ov = FALSE, nobs = list(100L), norig = list(100L),         ov.names = list(c(\"m\", \"y\", \"x\")), ov.names.x = list(            \"x\"), ov.names.l = list(), ordered = character(0),         weights = list(NULL), sampling.weights = character(0),         ov = list(name = c(\"m\", \"y\", \"x\"), idx = 1:3, nobs = c(100L,         100L, 100L), type = c(\"numeric\", \"numeric\", \"numeric\"        ), exo = c(0L, 0L, 1L), user = c(0L, 0L, 0L), mean = c(-0.103160069776609,         -0.0158623933219053, 0.154603672070928), var = c(1.04616609954854,         1.06275605009657, 0.921896424190714), nlev = c(0L, 0L,         0L), lnam = c(\"\", \"\", \"\")), case.idx = list(1:100), missing = \"listwise\",         Mp = list(NULL), Rp = list(NULL), Lp = list(NULL), eXo = list(            structure(c(0.485226820569252, 0.696768778564913,             0.185513915583057, 0.700733515544461, 0.311681028661359,             0.760462361967838, 1.84246362620766, 1.1123628412626,             0.0326639575014441, -1.11444896479736, 0.418057822385083,             -0.400235237343163, 1.49349310261748, -1.60708093984972,             -0.415751788401515, 0.42200837321742, -0.151736536534977,             -0.60615111526422, -0.304721068966714, 0.629536099884472,             0.895171980275539, 0.660212631820405, 2.27348352044748,             1.17349757263239, 0.287709728313787, -0.659770093821306,             2.91914013071762, 0.677415500438328, -0.684320344136007,             0.186492083080971, -0.324393300483657, -0.274704218225806,             -0.933503340589868, 0.116845344986082, 0.319160238648117,             -1.07754212275943, -3.23315213292314, -0.254874652654534,             0.0295178303214797, 0.594273774110513, 0.0591351681787969,             0.413398894737046, -1.09777217457042, 0.711175257270441,             0.718888729854143, 0.251651069028968, 1.35727443615177,             0.404468471278607, 0.264364269837939, 0.268043904143697,             0.436930577039483, 1.06012390548736, 0.452190396528715,             0.663198615687065, -1.13637355399084, -0.370497517092117,             1.47696958979247, -1.22390375051376, 0.258068387396106,             0.405002805433516, 0.97580332180945, -0.348876736539909,             0.158625439491262, -1.76325506654115, 0.338596047099905,             -0.666565029559273, -0.238646624327644, -1.18776528245719,             0.384935321768578, 0.66657951565448, -0.304613889457735,             1.8250110640863, 0.670559370567588, 0.948632573255153,             2.04940300167091, -0.651113609237535, 0.808619272846293,             0.986580613954563, -0.00617079609070003, 0.319052357931912,             -1.01182190274184, 0.470167547726389, -0.700970331629097,             0.813682862526491, -0.811430783992772, 0.31939748709946,             -0.846522653163624, -0.245763179128733, -1.55285901110546,             0.128434032925753, 0.985443389404868, 0.183247523067191,             -1.76622921343046, -0.620533696615944, 1.65604303699874,             1.80980538558388, -1.17503676801214, -0.366703258827641,             0.353625448927287, 0.319156220867898), dim = c(100L,             1L))), X = list(structure(c(-1.0058992908557, 0.473681263238225,         1.0901451247436, -2.02743293854847, 0.502863171551116,         0.710885262227487, 0.00447210926904418, -0.187744703597052,         -0.528653702002812, -1.18337666530841, -0.32979547620937,         -1.07247053911792, -0.292451089562514, -0.42063448927811,         0.790573459858427, 0.0213968555182177, -0.532992960846149,         -1.05107036265389, -0.890027204814649, 2.49342071088843,         0.39646360373391, -0.270020722889794, 0.261789170595672,         0.790469656122502, -0.575454019876166, -1.57943046384856,         1.42402405262115, -0.773280672758551, -0.219737121401019,         -0.836890436241594, 0.95420685080104, -0.536098147323517,         -0.956813665014848, -0.443116110531749, -1.45830805133207,         -1.437100423269, -3.04957092165232, -1.35568837057382,         -0.271883099514524, -0.26615579540397, 1.40047186021849,         -0.895400518001046, -1.14529750799898, -0.0543447052053874,         -0.732873359362109, -0.84840845424305, -0.64913190155761,         -1.07297787454812, -0.420390896555157, -0.39355148021593,         -1.59176484173585, -0.237227871115963, -0.922156163826606,         -0.769252464097226, -0.495745483481408, 0.425971763197159,         2.01500856103583, -1.10490327280404, 1.60936066511874,         -0.982978119751264, 0.919086471868052, 2.32691948545754,         0.0144283333569641, -1.16776624218704, 0.0943243395400734,         1.49526101044463, -1.15775654242161, 0.948494382478262,         1.38380457128159, 0.520948446159479, -0.0848088180385032,         0.113013834873792, -0.148473736655682, 0.903015742469832,         2.58973343267609, -0.341666841858629, -1.08405836865232,         -0.394278838429946, 0.244514780331725, -0.206739411548476,         -0.473147381056783, -0.0211137496023147, -1.51938366460491,         0.0783224641966739, 0.567640645179946, 0.761295543440156,         0.270707237932193, -0.457910772782194, -0.648626511738338,         -1.10097676166057, 0.244922735721186, 0.298415726314921,         1.09751717868351, 0.769222643183293, 0.0240564372473475,         0.882114982058661, -1.43485812137356, 0.727741888928042,         1.03419106543897, 2.11916362387426, -0.1439617341926,         -0.174277626103084, 0.602224604404354, -1.44887499366459,         -0.463904174168501, 0.500059589539494, -0.773951880206804,         0.0517804664566934, 0.0430846805746435, -0.636812687531766,         -0.334582095393778, -1.0983461632776, -1.10731215946008,         0.525175789638999, 0.414653245603842, 0.730487316463909,         -1.34408136930753, -0.379154013094857, 0.137965520381119,         1.22395434592039, 0.0324813218120451, -0.812161380874894,         1.9133151518045, 1.04518815207134, 1.292083721716, -0.720381548920755,         0.165195533219977, -1.69718629157368, -0.660747173763155,         -0.222462342062906, 1.35498501787693, -0.0491610358843584,         -1.49334384335015, 0.357565541111457, -2.1581833540497,         -1.03538755260034, -1.79855196419749, -2.36507475508984,         0.660851637576232, -0.67250052216282, 0.410951705416395,         0.760533257966452, -0.0212725401002647, -0.121076956771822,         0.0784949379362682, -0.0784246990073527, 1.11550997554267,         -0.297558241032477, 0.228249504660866, 0.10421309939811,         -1.12257980686361, -0.0340730006015841, 0.958116411077828,         -1.14291155805925, -0.142425489752799, 1.39262563716402,         0.804316458979331, -1.46470790799051, 0.0514256342834468,         -0.829348978252946, -0.274283453294785, 0.937739407943759,         -0.351683826842485, -0.742409762101558, 0.399683091299982,         1.28857866229072, 0.874490535614432, 0.414756742173082,         0.414046770730831, 1.53440254315624, 1.43358814591565,         0.0939573525239246, -0.362326557452296, -1.12659429205047,         2.51705580505852, -0.896201086603481, -1.51523631210029,         2.438839161316, 0.325791813541597, -0.132172507026923,         -2.60274520612392, -0.0969780594504372, 0.0855764450401389,         0.397582226715701, 1.07391449097986, 2.09861025181797,         1.14783129188257, -0.669534565586153, 0.285524667523424,         -0.722321914484456, -0.343521604348032, -2.32395167916648,         -0.135095644737079, 0.807071187981235, 1.8895994740787,         0.874671746534542, -0.180311268624562, -0.472625773108594,         0.657958641995046, -0.740224694435862, 0.485226820569252,         0.696768778564913, 0.185513915583057, 0.700733515544461,         0.311681028661359, 0.760462361967838, 1.84246362620766,         1.1123628412626, 0.0326639575014441, -1.11444896479736,         0.418057822385083, -0.400235237343163, 1.49349310261748,         -1.60708093984972, -0.415751788401515, 0.42200837321742,         -0.151736536534977, -0.60615111526422, -0.304721068966714,         0.629536099884472, 0.895171980275539, 0.660212631820405,         2.27348352044748, 1.17349757263239, 0.287709728313787,         -0.659770093821306, 2.91914013071762, 0.677415500438328,         -0.684320344136007, 0.186492083080971, -0.324393300483657,         -0.274704218225806, -0.933503340589868, 0.116845344986082,         0.319160238648117, -1.07754212275943, -3.23315213292314,         -0.254874652654534, 0.0295178303214797, 0.594273774110513,         0.0591351681787969, 0.413398894737046, -1.09777217457042,         0.711175257270441, 0.718888729854143, 0.251651069028968,         1.35727443615177, 0.404468471278607, 0.264364269837939,         0.268043904143697, 0.436930577039483, 1.06012390548736,         0.452190396528715, 0.663198615687065, -1.13637355399084,         -0.370497517092117, 1.47696958979247, -1.22390375051376,         0.258068387396106, 0.405002805433516, 0.97580332180945,         -0.348876736539909, 0.158625439491262, -1.76325506654115,         0.338596047099905, -0.666565029559273, -0.238646624327644,         -1.18776528245719, 0.384935321768578, 0.66657951565448,         -0.304613889457735, 1.8250110640863, 0.670559370567588,         0.948632573255153, 2.04940300167091, -0.651113609237535,         0.808619272846293, 0.986580613954563, -0.00617079609070003,         0.319052357931912, -1.01182190274184, 0.470167547726389,         -0.700970331629097, 0.813682862526491, -0.811430783992772,         0.31939748709946, -0.846522653163624, -0.245763179128733,         -1.55285901110546, 0.128434032925753, 0.985443389404868,         0.183247523067191, -1.76622921343046, -0.620533696615944,         1.65604303699874, 1.80980538558388, -1.17503676801214,         -0.366703258827641, 0.353625448927287, 0.319156220867898        ), dim = c(100L, 3L)))), SampleStats = new(\"lavSampleStats\",         var = list(c(1.03570443855305, 1.05212848959561, 0.912677459948807        )), cov = list(structure(c(1.03570443855305, 0.519987137074394,         0.348317419024455, 0.519987137074394, 1.05212848959561,         0.253017065632918, 0.348317419024455, 0.253017065632918,         0.912677459948807), dim = c(3L, 3L))), mean = list(c(-0.103160069776609,         -0.0158623933219053, 0.154603672070928)), th = list(NULL),         th.idx = list(NULL), th.names = list(NULL), res.cov = list(            NULL), res.var = list(NULL), res.th = list(NULL),         res.th.nox = list(NULL), res.slopes = list(NULL), res.int = list(            NULL), mean.x = list(0.154603672070928), cov.x = list(            structure(0.912677459948807, dim = c(1L, 1L))), bifreq = list(            NULL), group.w = list(1), nobs = list(100L), ntotal = 100L,         ngroups = 1L, x.idx = list(3L), icov = list(structure(c(1.38851515201267,         -0.598717177089378, -0.363938373971515, -0.598717177089378,         1.27650694086104, -0.125383197908438, -0.363938373971515,         -0.125383197908438, 1.26933140650275), dim = c(3L, 3L        ))), cov.log.det = list(-0.437786088847947), res.icov = list(            NULL), res.cov.log.det = list(NULL), ridge = 0, WLS.obs = list(            c(1.03570443855305, 0.519987137074394, 0.348317419024455,             1.05212848959561, 0.253017065632918, 0.912677459948807            )), WLS.V = list(NULL), WLS.VD = list(NULL), NACOV = list(            NULL), NACOV.user = FALSE, missing.flag = FALSE,         missing = list(NULL), missing.h1 = list(NULL), YLp = list(            NULL), zero.cell.tables = list(NULL)), Model = new(\"lavModel\",         GLIST = list(lambda = structure(c(1, 0, 0, 0, 1, 0, 0,         0, 1), dim = c(3L, 3L)), theta = structure(c(0, 0, 0,         0, 0, 0, 0, 0, 0), dim = c(3L, 3L)), psi = structure(c(0.902771360088879,         0, 0, 0, 0.783387828134702, 0, 0, 0, 0.912677459948807        ), dim = c(3L, 3L)), beta = structure(c(0, 0.469027749026988,         0, 0, 0, 0, 0.381643498727351, 0.098223671094075, 0), dim = c(3L,         3L))), dimNames = list(list(c(\"m\", \"y\", \"x\"), c(\"m\",         \"y\", \"x\")), list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")),             list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")), list(c(\"m\",             \"y\", \"x\"), c(\"m\", \"y\", \"x\"))), isSymmetric = c(FALSE,         TRUE, TRUE, FALSE), mmSize = c(9L, NA, NA, 9L), representation = \"LISREL\",         modprop = list(uvreg = FALSE, uvord = FALSE, mvreg = FALSE,             nexo = 0L, acyclic = TRUE, bowfree = TRUE), meanstructure = FALSE,         correlation = FALSE, categorical = FALSE, multilevel = FALSE,         group.w.free = FALSE, link = \"default\", nblocks = 1L,         ngroups = 1L, nefa = 0L, nmat = 4L, nvar = 3L, num.idx = list(            1:3), th.idx = list(NULL), nx.free = 5L, nx.unco = 5L,         nx.user = 6L, m.free.idx = list(integer(0), integer(0),             c(1L, 5L), c(2L, 7L, 8L)), x.free.idx = list(integer(0),             integer(0), 4:5, c(2L, 1L, 3L)), x.unco.idx = list(            integer(0), integer(0), 4:5, c(2L, 1L, 3L)), m.user.idx = list(            integer(0), integer(0), c(1L, 5L, 9L), c(2L, 7L,             8L)), x.user.idx = list(integer(0), integer(0), 4:6,             c(2L, 1L, 3L)), x.def.idx = integer(0), x.ceq.idx = integer(0),         x.cin.idx = integer(0), x.free.var.idx = 4:5, ceq.simple.only = FALSE,         ceq.simple.K = structure(numeric(0), dim = c(0L, 0L)),         eq.constraints = FALSE, eq.constraints.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints.k0 = numeric(0), def.function = function ()         NULL, ceq.function = function ()         NULL, ceq.jacobian = function ()         NULL, ceq.JAC = structure(numeric(0), dim = c(0L, 5L)),         ceq.rhs = numeric(0), ceq.linear.idx = integer(0), ceq.nonlinear.idx = integer(0),         cin.simple.only = FALSE, cin.function = function ()         NULL, cin.jacobian = function ()         NULL, cin.JAC = structure(numeric(0), dim = c(0L, 5L)),         cin.rhs = numeric(0), cin.linear.idx = integer(0), cin.nonlinear.idx = integer(0),         ceq.efa.JAC = structure(numeric(0), dim = c(0L, 0L)),         con.jac = structure(numeric(0), dim = c(0L, 0L)), con.lambda = numeric(0),         nexo = 1L, conditional.x = FALSE, fixed.x = TRUE, parameterization = \"delta\",         ov.x.dummy.ov.idx = list(3L), ov.x.dummy.lv.idx = list(            3L), ov.y.dummy.ov.idx = list(1:2), ov.y.dummy.lv.idx = list(            1:2), ov.efa.idx = list(NULL), lv.efa.idx = list(            NULL), rv.ov = list(), rv.lv = list(), H = list(),         lv.order = list(), estimator = \"ML\", estimator.args = list()),     Cache = list(NULL), Fit = new(\"Fit\", npar = 5L, x = c(0.381643498727351,     0.469027749026988, 0.098223671094075, 0.902771360088879,     0.783387828134702), partrace = structure(numeric(0), dim = c(0L,     0L)), start = c(0.381643498727351, 0.469027749026988, 0.098223671094075,     0.902771360088879, 0.783387828134702, 0.912677459948807),         est = c(0.381643498727351, 0.469027749026988, 0.098223671094075,         0.902771360088879, 0.783387828134702, 0.912677459948807        ), se = c(0.0994558249164696, 0.0931535742690534, 0.0992336074200752,         0.12767115011597, 0.11078776911461, 0), fx = 0, fx.group = 0,         logl = NA_real_, logl.group = NA_real_, iterations = 1L,         converged = TRUE, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14),         Sigma.hat = list(structure(c(1.03570443855305, 0.519987137074394,         0.348317419024455, 0.519987137074394, 1.05212848959561,         0.253017065632918, 0.348317419024455, 0.253017065632918,         0.912677459948807), dim = c(3L, 3L))), Mu.hat = list(            NULL), TH = list(NULL), test = structure(list(standard = list(            test = \"standard\", stat = 0, stat.group = 0, df = 0L,             refdistr = \"chisq\", pvalue = NA_real_)), info = list(            ngroups = 1L, group.label = character(0), information = c(\"expected\",             \"expected\"), h1.information = c(\"structured\", \"structured\"            ), observed.information = c(\"hessian\", \"hessian\")))),     boot = list(), optim = list(x = c(0.381643498727351, 0.469027749026988,     0.098223671094075, 0.902771360088879, 0.783387828134702),         dx = c(0, 0, 0, 0, 0), npar = 5L, iterations = 1L, converged = TRUE,         warn.txt = \"\", parscale = c(1, 1, 1, 1, 1), fx = 0, fx.group = 0,         logl.group = NA_real_, logl = NA_real_, control = list(            eval.max = 20000L, iter.max = 10000L, trace = 0L,             step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14)),     loglik = list(loglik = -266.467038987407, loglik.group = -266.467038987407,         npar = 5L, ntotal = 100L, AIC = 542.934077974814, BIC = 555.959928904755,         BIC2 = 540.168672889496, estimator = \"ML\", conditional.x = FALSE,         fixed.x = TRUE), implied = list(cov = list(structure(c(1.03570443855305,     0.519987137074394, 0.348317419024455, 0.519987137074394,     1.05212848959561, 0.253017065632918, 0.348317419024455, 0.253017065632918,     0.912677459948807), dim = c(3L, 3L))), mean = list(NULL),         th = list(NULL), group.w = list(NULL)), vcov = list(se = \"standard\",         information = \"expected\", vcov = structure(c(0.00989146110981546,         2.2681322062401e-18, 8.24795726052656e-19, 5.12520452510104e-18,         4.02952513001792e-19, 2.4998013168347e-18, 0.00867758839910004,         -0.00331174519714841, 3.03327378539044e-18, 1.3837617557218e-18,         3.75030647046888e-19, -0.00331174519714841, 0.00984730884160161,         -5.43914614785516e-19, 1.78842588230775e-18, 4.76483632134788e-18,         4.2182537685871e-18, -1.74261773708545e-18, 0.0162999225719345,         -1.04646486609863e-19, 4.98724502683523e-19, 1.3837617557218e-18,         2.58905604424697e-18, -1.04646486609863e-19, 0.0122739297853921        ), dim = c(5L, 5L))), test = structure(list(standard = list(        test = \"standard\", stat = 0, stat.group = 0, df = 0L,         refdistr = \"chisq\", pvalue = NA_real_)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\"))),     h1 = list(implied = list(cov = list(structure(c(1.03570443855305,     0.519987137074394, 0.348317419024455, 0.519987137074394,     1.05212848959561, 0.253017065632918, 0.348317419024455, 0.253017065632918,     0.912677459948807), dim = c(3L, 3L))), mean = list(c(-0.103160069776609,     -0.0158623933219053, 0.154603672070928)), th = list(NULL),         group.w = list(1)), logl = list(loglik = -266.467038987407,         loglik.group = -266.467038987407)), baseline = list(partable = list(        id = 1:3, lhs = c(\"m\", \"y\", \"x\"), op = c(\"~~\", \"~~\",         \"~~\"), rhs = c(\"m\", \"y\", \"x\"), user = c(1L, 1L, 1L),         block = c(1L, 1L, 1L), group = c(1L, 1L, 1L), free = c(1L,         2L, 0L), ustart = c(1.03570443855305, 1.05212848959561,         0.912677459948807), exo = c(0L, 0L, 1L), label = c(\"\",         \"\", \"\"), lower = c(0, 0, 0.912677459948807), upper = c(Inf,         Inf, 0.912677459948807), start = c(1.03570443855305,         1.05212848959561, 0.912677459948807), est = c(1.03570443855305,         1.05212848959561, 0.912677459948807), se = c(0.146470726361174,         0.148793437934523, 0)), test = structure(list(standard = list(        test = \"standard\", stat = 43.2310410488771, stat.group = 43.2310410488771,         df = 3L, refdistr = \"chisq\", pvalue = 2.19813867108343e-09)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\")))),     internal = list(), external = list()), new(\"lavaan\", version = \"0.6-19\",     call = lavaan::lavaan(model = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(        m = c(-0.257809716466977, -1.27679128645229, 0.0417539024774709,         0.930529644374821, 0.557320722786814, -0.692166865367821,         -0.939274449272328, 1.68758164539185, -0.320021387136598,         0.722736325747294, 1.08696505157531, 0.171554944096819,         -0.406084738901945, 0.273273924442898, -0.578942473936388,         0.909732644799622, -0.953925916232302, 1.62686486248796,         -0.407542116007663, -0.224553255258458, 0.576556170194857,         -0.0198423203404459, -0.0916619666490127, -1.50816234572148,         -0.174241484823815, -0.938029583131136, 0.928662700189895,         -0.840560169178208, 1.06637561383764, -0.558884240508369,         0.338681474580503, 1.07168756605309, -0.576803202046139,         1.01950490723839, 0.0473866323088989, -1.44098487054193,         -0.340634469696, 1.69994597739946, -0.327584720460549,         -0.676616234773644, 0.0787841731927249, 0.705978328563829,         0.715812826780308, 1.08620391357595, -0.0744154801576535,         0.772794118903362, -1.28374861763219, -2.17786452842703,         -0.269487742712578, -0.300347325770247, -2.62635552205575,         0.197660502643827, -1.09002008904231, -0.422243208979879,         -1.46294041116351, 0.700649828063935, 1.55960579541675,         -1.69693622842964, 0.178772686798053, 2.043539216178,         0.680542796051261, 1.50284397455591, -0.0949903320836854,         -0.112814860635238, -0.26919738698994, 1.78552462184234,         -1.48127680219839, 0.380375930477497, 0.356067745465296,         1.87771752195261, -0.646856233384368, -1.97120955991676,         0.308143239463555, -0.230179974145403, -1.07795558945667,         -0.107795585681388, -0.129482844764958, -1.29623517698958,         0.350113758822859, -0.620500978817218, -2.03909530352893,         -2.3872095406538, -0.448313812713761, 1.35509975543578,         0.960779648387702, 0.978455772675148, 0.33026116382822,         0.647546065087784, -1.50685401887726, 0.0865744481403767,         1.570913867796, -3.00985846923776, -0.61753648425174,         1.32986385897889, 0.518230979454976, 0.601748573964633,         0.345910315077762, 0.760888825641675, -0.240811990339615,         -1.16035794292427), y = c(-1.19135789258439, -0.607086341005705,         -0.344060190093909, -0.31360760280103, 0.640175146926015,         -0.213196392482659, 0.79760306542824, -0.127458830395686,         -0.608428327270797, 0.296462080432809, -0.675699447934353,         -0.160785042341766, -0.816336600011713, -1.72327297092188,         -0.535281428595674, -0.00765373905760863, 0.504252652768121,         0.290293398421208, 0.279048146683646, 0.0112439636534965,         -0.782874281888901, 0.314097024690366, -0.137704261235468,         -0.610267273940993, 0.482754152828057, -0.370320007780895,         1.83711945518766, -0.320207869670493, -0.552807217421982,         0.363031624793193, -0.889723127628635, -1.12596728225233,         -0.989827090143935, -0.135156944128649, -0.502422245847366,         0.671002166714933, 1.24615343604938, 1.47878632390233,         -1.26696576554576, -0.318262612371445, 0.461251449812912,         0.234319865433172, 0.506642364182273, -0.275113574856366,         -1.1523196355089, 1.60555795178744, -0.410322767817899,         -1.44261499715763, 0.146949268211736, 1.63598725465829,         -0.99909896430973, 1.32114252865484, 0.639318072702142,         -0.563746491712262, -0.0710896951888477, -0.213631541678839,         -0.496420443744945, -1.88914122076051, -0.0394093687246016,         2.57807132340186, 0.431038410226631, 0.0561439072327621,         0.152015405319829, 0.548056818220597, -1.25627629638571,         -0.0206175507163967, -2.42211981133594, -0.909283759946111,         -0.590510681738354, 0.686052294710227, 0.89774915490782,         -0.216018726494471, 0.390474315164319, -0.605815891489038,         -0.573798023956782, 0.420348323013462, -0.501247083246725,         0.269064048092409, 1.12547954741865, -1.32047313229652,         -1.66639182067291, -0.148538371524439, -1.68533218467757,         1.04102930892646, 0.682605683525256, 3.25695951166719,         -2.1988419377994, -0.404377490884628, -0.169701059508333,         1.49329651567534, 1.51264727973354, -2.74193258577351,         1.63059880130779, -0.856905261795034, -0.70478471721872,         0.263513612781986, 2.10036995898208, 0.818927439813178,         0.512135540197413, 0.916380125290656), x = c(0.984779968314556,         -1.22473787596427, 0.709726218065825, -0.109219992578064,         1.78260789538833, -0.243444679602975, -1.52710702225461,         0.491834371466622, 0.354503660926992, -0.0176263476303775,         -1.05655032211723, -0.838914666078269, -0.0126257164904259,         1.03811014600433, -0.364457713905061, -0.871449472185395,         -2.7042030254467, 0.494249836540647, 0.427340324999113,         1.30919086010968, 1.4667226423107, -0.143056066294616,         1.29851372621074, 0.00131354755592194, -0.676410075685581,         -0.848196596885468, -0.346941100407436, 0.227479443027071,         -0.0274014036111113, 0.200877790585033, 0.198942671822796,         0.71459935608369, -0.273181774889849, 1.63534745793173,         0.437693886479643, -1.19353585074908, -0.276649804199181,         0.515883050535119, -0.411055332086343, 0.344995049472574,         0.434395860831138, 1.30347768300503, -0.651695910733076,         -0.0168808623279884, -0.567692455293591, -1.12713286976328,         -1.84897031117903, 0.19552905518189, 0.601565225195587,         0.639158159789933, -1.38999281746208, -1.12967785339758,         -1.14115419483757, -0.688671499600886, 0.170197818152129,         0.59448342725741, -0.815032650724957, -2.86434683706673,         0.95382348170826, 0.615284770613444, -0.700870700550263,         -1.07366134146979, -0.299991196799737, 0.108106562802571,         0.723200763587674, 1.39009509607427, -0.848883398378404,         0.290722844643498, 1.33417603370242, -0.901342155259083,         -0.222763412932851, -1.7714680282034, 0.287422250114445,         -0.641191762323999, -0.924937642238947, -0.779977469185323,         0.444503373594371, -2.16246900261166, -0.425510899920945,         -1.01371765920455, -0.962119028303747, 0.474634627277364,         0.351754269604537, -0.107020356246981, 0.537517256600346,         -0.60210489844813, -2.02329764533368, 1.15442128059814,         -0.230692997694109, -0.365088768214911, 0.157517929375723,         0.765932222984396, 0.426086966202313, 0.927265399965311,         0.0461345928404875, -0.504285643091111, -0.300449408355562,         0.822915978645871, -0.849268796129039, -0.953610095681196        )), class = \"data.frame\", row.names = c(NA, -100L)),         model.type = \"sem\", int.ov.free = TRUE, int.lv.free = FALSE,         auto.fix.first = TRUE, auto.fix.single = TRUE, auto.var = TRUE,         auto.cov.lv.x = TRUE, auto.cov.y = TRUE, auto.th = TRUE,         auto.delta = TRUE, auto.efa = TRUE), timing = list(init = c(elapsed = 0),         ov.names = c(elapsed = 0.00700000000000145), Options = c(elapsed = 0.00199999999999889),         Data = c(elapsed = 0.00100000000000122), ParTable = c(elapsed = 0.00300000000000011),         SampleStats = c(elapsed = 0.00100000000000122), h1 = c(elapsed = 0),         bounds = c(elapsed = 0), start = c(elapsed = 0.000999999999997669),         Model = c(elapsed = 0.00300000000000011), cache = c(elapsed = 0.00100000000000122),         optim = c(elapsed = 0.00199999999999889), implied = c(elapsed = 0),         loglik = c(elapsed = 0), vcov = c(elapsed = 0.00100000000000122),         test = c(elapsed = 0), Fit = c(elapsed = 0.00100000000000122),         baseline = c(elapsed = 0.0119999999999969), rotation = c(elapsed = 0),         total = c(elapsed = 0.0350000000000001)), Options = list(        model.type = \"sem\", mimic = \"lavaan\", meanstructure = FALSE,         int.ov.free = TRUE, int.lv.free = FALSE, marker.int.zero = FALSE,         conditional.x = FALSE, fixed.x = TRUE, orthogonal = FALSE,         orthogonal.x = FALSE, orthogonal.y = FALSE, std.lv = FALSE,         correlation = FALSE, effect.coding = \"\", ceq.simple = FALSE,         parameterization = \"delta\", auto.fix.first = TRUE, auto.fix.single = TRUE,         auto.var = TRUE, auto.cov.lv.x = TRUE, auto.cov.y = TRUE,         auto.th = TRUE, auto.delta = TRUE, auto.efa = TRUE, rotation = \"geomin\",         rotation.se = \"bordered\", rotation.args = list(orthogonal = FALSE,             row.weights = \"none\", std.ov = TRUE, geomin.epsilon = 0.001,             orthomax.gamma = 1, cf.gamma = 0, oblimin.gamma = 0,             promax.kappa = 4, target = structure(numeric(0), dim = c(0L,             0L)), target.mask = structure(numeric(0), dim = c(0L,             0L)), rstarts = 30L, algorithm = \"gpa\", reflect = TRUE,             order.lv.by = \"index\", gpa.tol = 1e-05, tol = 1e-08,             warn = FALSE, verbose = FALSE, jac.init.rot = TRUE,             max.iter = 10000L), std.ov = FALSE, missing = \"listwise\",         sampling.weights.normalization = \"total\", samplestats = TRUE,         sample.cov.rescale = TRUE, sample.cov.robust = FALSE,         sample.icov = TRUE, ridge = FALSE, ridge.constant = \"default\",         group.label = NULL, group.equal = character(0), group.partial = character(0),         group.w.free = FALSE, level.label = NULL, estimator = \"ML\",         estimator.orig = \"ML\", estimator.args = list(), likelihood = \"normal\",         link = \"default\", representation = \"LISREL\", do.fit = TRUE,         bounds = \"none\", rstarts = 0L, se = \"standard\", test = \"standard\",         information = c(\"expected\", \"expected\"), h1.information = c(\"structured\",         \"structured\"), observed.information = c(\"hessian\", \"hessian\"        ), information.meat = \"first.order\", h1.information.meat = \"structured\",         omega.information = \"expected\", omega.h1.information = \"unstructured\",         omega.information.meat = \"first.order\", omega.h1.information.meat = \"unstructured\",         scaled.test = \"standard\", ug2.old.approach = FALSE, bootstrap = 1000L,         gamma.n.minus.one = FALSE, gamma.unbiased = FALSE, control = list(),         optim.method = \"nlminb\", optim.attempts = 4L, optim.force.converged = FALSE,         optim.gradient = \"analytic\", optim.init_nelder_mead = FALSE,         optim.var.transform = \"none\", optim.parscale = \"none\",         optim.partrace = FALSE, optim.dx.tol = 0.001, optim.bounds = list(            lower = character(0), upper = character(0)), em.iter.max = 10000L,         em.fx.tol = 1e-08, em.dx.tol = 1e-04, em.zerovar.offset = 1e-04,         em.h1.iter.max = 500L, em.h1.tol = 1e-05, em.h1.warn = TRUE,         optim.gn.iter.max = 200L, optim.gn.stephalf.max = 10L,         optim.gn.tol.x = 1e-05, integration.ngh = 21L, parallel = \"no\",         ncpus = 1L, cl = NULL, iseed = NULL, zero.add = c(0.5,         0), zero.keep.margins = TRUE, zero.cell.warn = FALSE,         allow.empty.cell = FALSE, cat.wls.w = TRUE, start = \"default\",         check.start = TRUE, check.post = TRUE, check.gradient = TRUE,         check.vcov = TRUE, check.lv.names = TRUE, check.lv.interaction = TRUE,         check.delta.cat.mediator = TRUE, h1 = TRUE, baseline = TRUE,         baseline.conditional.x.free.slopes = TRUE, implied = TRUE,         loglik = TRUE, store.vcov = \"default\", parser = \"new\",         categorical = FALSE, .categorical = FALSE, .clustered = FALSE,         .multilevel = FALSE), ParTable = list(id = 1:6, lhs = c(\"m\",     \"y\", \"y\", \"m\", \"y\", \"x\"), op = c(\"~\", \"~\", \"~\", \"~~\", \"~~\",     \"~~\"), rhs = c(\"x\", \"m\", \"x\", \"m\", \"y\", \"x\"), user = c(1L,     1L, 1L, 0L, 0L, 0L), block = c(1L, 1L, 1L, 1L, 1L, 1L), group = c(1L,     1L, 1L, 1L, 1L, 1L), free = c(1L, 2L, 3L, 4L, 5L, 0L), ustart = c(NA_real_,     NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), exo = c(0L,     0L, 0L, 0L, 0L, 1L), label = c(\"\", \"\", \"\", \"\", \"\", \"\"), plabel = c(\".p1.\",     \".p2.\", \".p3.\", \".p4.\", \".p5.\", \".p6.\"), start = c(0.382732763516548,     0.416877762692203, -0.156180658350468, 0.987979633670854,     0.888854580485179, 0.854279640318141), est = c(0.382732763516548,     0.416877762692203, -0.156180658350468, 0.987979633670854,     0.888854580485179, 0.854279640318141), se = c(0.107540974595692,     0.0948508793109487, 0.108270959204186, 0.139721419728572,     0.125703020269959, 0)), pta = list(names = c(\"id\", \"lhs\",     \"op\", \"rhs\", \"user\", \"block\", \"group\", \"free\", \"ustart\",     \"exo\", \"label\", \"plabel\", \"start\", \"est\", \"se\"), vidx = list(        ov = list(1:3), ov.x = list(3L), ov.nox = list(1:2),         ov.model = list(1:3), ov.y = list(2L), ov.num = list(            1:3), ov.ord = list(integer(0)), ov.ind = list(integer(0)),         ov.orphan = list(3L), ov.interaction = list(integer(0)),         ov.efa = list(integer(0)), th = list(integer(0)), th.mean = list(            1:2), lv = list(integer(0)), lv.regular = list(integer(0)),         lv.formative = list(integer(0)), lv.x = list(integer(0)),         lv.y = list(integer(0)), lv.nox = list(integer(0)), lv.nonnormal = list(            integer(0)), lv.interaction = list(integer(0)), lv.efa = list(            integer(0)), lv.rv = list(integer(0)), lv.ind = list(            integer(0)), lv.marker = list(integer(0)), eqs.y = list(            integer(0)), eqs.x = list(integer(0))), meanstructure = FALSE,         nblocks = 1L, ngroups = 1L, nlevels = 1L, nvar = list(            3L), nfac = list(0L), nfac.nonnormal = list(0L),         th.idx = list(c(0, 0)), vnames = list(ov = list(c(\"m\",         \"y\", \"x\")), ov.x = list(\"x\"), ov.nox = list(c(\"m\", \"y\"        )), ov.model = list(c(\"m\", \"y\", \"x\")), ov.y = list(\"y\"),             ov.num = list(c(\"m\", \"y\", \"x\")), ov.ord = list(character(0)),             ov.ind = list(character(0)), ov.orphan = list(\"x\"),             ov.interaction = list(character(0)), ov.efa = list(                character(0)), th = list(character(0)), th.mean = list(                c(\"m\", \"y\")), lv = list(character(0)), lv.regular = list(                character(0)), lv.formative = list(character(0)),             lv.x = list(character(0)), lv.y = list(character(0)),             lv.nox = list(character(0)), lv.nonnormal = list(                character(0)), lv.interaction = list(character(0)),             lv.efa = list(character(0)), lv.rv = list(character(0)),             lv.ind = list(character(0)), lv.marker = list(structure(character(0), names = character(0))),             eqs.y = list(c(\"m\", \"y\")), eqs.x = list(c(\"x\", \"m\"            )))), Data = new(\"lavData\", data.type = \"full\", group = character(0),         ngroups = 1L, group.label = character(0), block.label = character(0),         cluster = character(0), nlevels = 1L, level.label = character(0),         std.ov = FALSE, nobs = list(100L), norig = list(100L),         ov.names = list(c(\"m\", \"y\", \"x\")), ov.names.x = list(            \"x\"), ov.names.l = list(), ordered = character(0),         weights = list(NULL), sampling.weights = character(0),         ov = list(name = c(\"m\", \"y\", \"x\"), idx = 1:3, nobs = c(100L,         100L, 100L), type = c(\"numeric\", \"numeric\", \"numeric\"        ), exo = c(0L, 0L, 1L), user = c(0L, 0L, 0L), mean = c(-0.0487949089166442,         -0.043264571547434, -0.136877005738466), var = c(1.12436186576559,         1.07127513076495, 0.862908727594082), nlev = c(0L, 0L,         0L), lnam = c(\"\", \"\", \"\")), case.idx = list(1:100), missing = \"listwise\",         Mp = list(NULL), Rp = list(NULL), Lp = list(NULL), eXo = list(            structure(c(0.984779968314556, -1.22473787596427,             0.709726218065825, -0.109219992578064, 1.78260789538833,             -0.243444679602975, -1.52710702225461, 0.491834371466622,             0.354503660926992, -0.0176263476303775, -1.05655032211723,             -0.838914666078269, -0.0126257164904259, 1.03811014600433,             -0.364457713905061, -0.871449472185395, -2.7042030254467,             0.494249836540647, 0.427340324999113, 1.30919086010968,             1.4667226423107, -0.143056066294616, 1.29851372621074,             0.00131354755592194, -0.676410075685581, -0.848196596885468,             -0.346941100407436, 0.227479443027071, -0.0274014036111113,             0.200877790585033, 0.198942671822796, 0.71459935608369,             -0.273181774889849, 1.63534745793173, 0.437693886479643,             -1.19353585074908, -0.276649804199181, 0.515883050535119,             -0.411055332086343, 0.344995049472574, 0.434395860831138,             1.30347768300503, -0.651695910733076, -0.0168808623279884,             -0.567692455293591, -1.12713286976328, -1.84897031117903,             0.19552905518189, 0.601565225195587, 0.639158159789933,             -1.38999281746208, -1.12967785339758, -1.14115419483757,             -0.688671499600886, 0.170197818152129, 0.59448342725741,             -0.815032650724957, -2.86434683706673, 0.95382348170826,             0.615284770613444, -0.700870700550263, -1.07366134146979,             -0.299991196799737, 0.108106562802571, 0.723200763587674,             1.39009509607427, -0.848883398378404, 0.290722844643498,             1.33417603370242, -0.901342155259083, -0.222763412932851,             -1.7714680282034, 0.287422250114445, -0.641191762323999,             -0.924937642238947, -0.779977469185323, 0.444503373594371,             -2.16246900261166, -0.425510899920945, -1.01371765920455,             -0.962119028303747, 0.474634627277364, 0.351754269604537,             -0.107020356246981, 0.537517256600346, -0.60210489844813,             -2.02329764533368, 1.15442128059814, -0.230692997694109,             -0.365088768214911, 0.157517929375723, 0.765932222984396,             0.426086966202313, 0.927265399965311, 0.0461345928404875,             -0.504285643091111, -0.300449408355562, 0.822915978645871,             -0.849268796129039, -0.953610095681196), dim = c(100L,             1L))), X = list(structure(c(-0.257809716466977, -1.27679128645229,         0.0417539024774709, 0.930529644374821, 0.557320722786814,         -0.692166865367821, -0.939274449272328, 1.68758164539185,         -0.320021387136598, 0.722736325747294, 1.08696505157531,         0.171554944096819, -0.406084738901945, 0.273273924442898,         -0.578942473936388, 0.909732644799622, -0.953925916232302,         1.62686486248796, -0.407542116007663, -0.224553255258458,         0.576556170194857, -0.0198423203404459, -0.0916619666490127,         -1.50816234572148, -0.174241484823815, -0.938029583131136,         0.928662700189895, -0.840560169178208, 1.06637561383764,         -0.558884240508369, 0.338681474580503, 1.07168756605309,         -0.576803202046139, 1.01950490723839, 0.0473866323088989,         -1.44098487054193, -0.340634469696, 1.69994597739946,         -0.327584720460549, -0.676616234773644, 0.0787841731927249,         0.705978328563829, 0.715812826780308, 1.08620391357595,         -0.0744154801576535, 0.772794118903362, -1.28374861763219,         -2.17786452842703, -0.269487742712578, -0.300347325770247,         -2.62635552205575, 0.197660502643827, -1.09002008904231,         -0.422243208979879, -1.46294041116351, 0.700649828063935,         1.55960579541675, -1.69693622842964, 0.178772686798053,         2.043539216178, 0.680542796051261, 1.50284397455591,         -0.0949903320836854, -0.112814860635238, -0.26919738698994,         1.78552462184234, -1.48127680219839, 0.380375930477497,         0.356067745465296, 1.87771752195261, -0.646856233384368,         -1.97120955991676, 0.308143239463555, -0.230179974145403,         -1.07795558945667, -0.107795585681388, -0.129482844764958,         -1.29623517698958, 0.350113758822859, -0.620500978817218,         -2.03909530352893, -2.3872095406538, -0.448313812713761,         1.35509975543578, 0.960779648387702, 0.978455772675148,         0.33026116382822, 0.647546065087784, -1.50685401887726,         0.0865744481403767, 1.570913867796, -3.00985846923776,         -0.61753648425174, 1.32986385897889, 0.518230979454976,         0.601748573964633, 0.345910315077762, 0.760888825641675,         -0.240811990339615, -1.16035794292427, -1.19135789258439,         -0.607086341005705, -0.344060190093909, -0.31360760280103,         0.640175146926015, -0.213196392482659, 0.79760306542824,         -0.127458830395686, -0.608428327270797, 0.296462080432809,         -0.675699447934353, -0.160785042341766, -0.816336600011713,         -1.72327297092188, -0.535281428595674, -0.00765373905760863,         0.504252652768121, 0.290293398421208, 0.279048146683646,         0.0112439636534965, -0.782874281888901, 0.314097024690366,         -0.137704261235468, -0.610267273940993, 0.482754152828057,         -0.370320007780895, 1.83711945518766, -0.320207869670493,         -0.552807217421982, 0.363031624793193, -0.889723127628635,         -1.12596728225233, -0.989827090143935, -0.135156944128649,         -0.502422245847366, 0.671002166714933, 1.24615343604938,         1.47878632390233, -1.26696576554576, -0.318262612371445,         0.461251449812912, 0.234319865433172, 0.506642364182273,         -0.275113574856366, -1.1523196355089, 1.60555795178744,         -0.410322767817899, -1.44261499715763, 0.146949268211736,         1.63598725465829, -0.99909896430973, 1.32114252865484,         0.639318072702142, -0.563746491712262, -0.0710896951888477,         -0.213631541678839, -0.496420443744945, -1.88914122076051,         -0.0394093687246016, 2.57807132340186, 0.431038410226631,         0.0561439072327621, 0.152015405319829, 0.548056818220597,         -1.25627629638571, -0.0206175507163967, -2.42211981133594,         -0.909283759946111, -0.590510681738354, 0.686052294710227,         0.89774915490782, -0.216018726494471, 0.390474315164319,         -0.605815891489038, -0.573798023956782, 0.420348323013462,         -0.501247083246725, 0.269064048092409, 1.12547954741865,         -1.32047313229652, -1.66639182067291, -0.148538371524439,         -1.68533218467757, 1.04102930892646, 0.682605683525256,         3.25695951166719, -2.1988419377994, -0.404377490884628,         -0.169701059508333, 1.49329651567534, 1.51264727973354,         -2.74193258577351, 1.63059880130779, -0.856905261795034,         -0.70478471721872, 0.263513612781986, 2.10036995898208,         0.818927439813178, 0.512135540197413, 0.916380125290656,         0.984779968314556, -1.22473787596427, 0.709726218065825,         -0.109219992578064, 1.78260789538833, -0.243444679602975,         -1.52710702225461, 0.491834371466622, 0.354503660926992,         -0.0176263476303775, -1.05655032211723, -0.838914666078269,         -0.0126257164904259, 1.03811014600433, -0.364457713905061,         -0.871449472185395, -2.7042030254467, 0.494249836540647,         0.427340324999113, 1.30919086010968, 1.4667226423107,         -0.143056066294616, 1.29851372621074, 0.00131354755592194,         -0.676410075685581, -0.848196596885468, -0.346941100407436,         0.227479443027071, -0.0274014036111113, 0.200877790585033,         0.198942671822796, 0.71459935608369, -0.273181774889849,         1.63534745793173, 0.437693886479643, -1.19353585074908,         -0.276649804199181, 0.515883050535119, -0.411055332086343,         0.344995049472574, 0.434395860831138, 1.30347768300503,         -0.651695910733076, -0.0168808623279884, -0.567692455293591,         -1.12713286976328, -1.84897031117903, 0.19552905518189,         0.601565225195587, 0.639158159789933, -1.38999281746208,         -1.12967785339758, -1.14115419483757, -0.688671499600886,         0.170197818152129, 0.59448342725741, -0.815032650724957,         -2.86434683706673, 0.95382348170826, 0.615284770613444,         -0.700870700550263, -1.07366134146979, -0.299991196799737,         0.108106562802571, 0.723200763587674, 1.39009509607427,         -0.848883398378404, 0.290722844643498, 1.33417603370242,         -0.901342155259083, -0.222763412932851, -1.7714680282034,         0.287422250114445, -0.641191762323999, -0.924937642238947,         -0.779977469185323, 0.444503373594371, -2.16246900261166,         -0.425510899920945, -1.01371765920455, -0.962119028303747,         0.474634627277364, 0.351754269604537, -0.107020356246981,         0.537517256600346, -0.60210489844813, -2.02329764533368,         1.15442128059814, -0.230692997694109, -0.365088768214911,         0.157517929375723, 0.765932222984396, 0.426086966202313,         0.927265399965311, 0.0461345928404875, -0.504285643091111,         -0.300449408355562, 0.822915978645871, -0.849268796129039,         -0.953610095681196), dim = c(100L, 3L)))), SampleStats = new(\"lavSampleStats\",         var = list(c(1.11311824710794, 1.0605623794573, 0.854279640318141        )), cov = list(structure(c(1.11311824710794, 0.412969290287502,         0.326960807554885, 0.412969290287502, 1.0605623794573,         0.00288073330122793, 0.326960807554885, 0.00288073330122793,         0.854279640318141), dim = c(3L, 3L))), mean = list(c(-0.0487949089166442,         -0.043264571547434, -0.136877005738466)), th = list(NULL),         th.idx = list(NULL), th.names = list(NULL), res.cov = list(            NULL), res.var = list(NULL), res.th = list(NULL),         res.th.nox = list(NULL), res.slopes = list(NULL), res.int = list(            NULL), mean.x = list(-0.136877005738466), cov.x = list(            structure(0.854279640318141, dim = c(1L, 1L))), bifreq = list(            NULL), group.w = list(1), nobs = list(100L), ntotal = 100L,         ngroups = 1L, x.idx = list(3L), icov = list(structure(c(1.20768461253508,         -0.469005585215808, -0.460638926185499, -0.469005585215808,         1.12504342324945, 0.175710022515963, -0.460638926185499,         0.175710022515963, 1.34628597862322), dim = c(3L, 3L))),         cov.log.det = list(-0.287411519609176), res.icov = list(            NULL), res.cov.log.det = list(NULL), ridge = 0, WLS.obs = list(            c(1.11311824710794, 0.412969290287502, 0.326960807554885,             1.0605623794573, 0.00288073330122793, 0.854279640318141            )), WLS.V = list(NULL), WLS.VD = list(NULL), NACOV = list(            NULL), NACOV.user = FALSE, missing.flag = FALSE,         missing = list(NULL), missing.h1 = list(NULL), YLp = list(            NULL), zero.cell.tables = list(NULL)), Model = new(\"lavModel\",         GLIST = list(lambda = structure(c(1, 0, 0, 0, 1, 0, 0,         0, 1), dim = c(3L, 3L)), theta = structure(c(0, 0, 0,         0, 0, 0, 0, 0, 0), dim = c(3L, 3L)), psi = structure(c(0.987979633670854,         0, 0, 0, 0.888854580485179, 0, 0, 0, 0.854279640318141        ), dim = c(3L, 3L)), beta = structure(c(0, 0.416877762692203,         0, 0, 0, 0, 0.382732763516548, -0.156180658350468, 0), dim = c(3L,         3L))), dimNames = list(list(c(\"m\", \"y\", \"x\"), c(\"m\",         \"y\", \"x\")), list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")),             list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")), list(c(\"m\",             \"y\", \"x\"), c(\"m\", \"y\", \"x\"))), isSymmetric = c(FALSE,         TRUE, TRUE, FALSE), mmSize = c(9L, NA, NA, 9L), representation = \"LISREL\",         modprop = list(uvreg = FALSE, uvord = FALSE, mvreg = FALSE,             nexo = 0L, acyclic = TRUE, bowfree = TRUE), meanstructure = FALSE,         correlation = FALSE, categorical = FALSE, multilevel = FALSE,         group.w.free = FALSE, link = \"default\", nblocks = 1L,         ngroups = 1L, nefa = 0L, nmat = 4L, nvar = 3L, num.idx = list(            1:3), th.idx = list(NULL), nx.free = 5L, nx.unco = 5L,         nx.user = 6L, m.free.idx = list(integer(0), integer(0),             c(1L, 5L), c(2L, 7L, 8L)), x.free.idx = list(integer(0),             integer(0), 4:5, c(2L, 1L, 3L)), x.unco.idx = list(            integer(0), integer(0), 4:5, c(2L, 1L, 3L)), m.user.idx = list(            integer(0), integer(0), c(1L, 5L, 9L), c(2L, 7L,             8L)), x.user.idx = list(integer(0), integer(0), 4:6,             c(2L, 1L, 3L)), x.def.idx = integer(0), x.ceq.idx = integer(0),         x.cin.idx = integer(0), x.free.var.idx = 4:5, ceq.simple.only = FALSE,         ceq.simple.K = structure(numeric(0), dim = c(0L, 0L)),         eq.constraints = FALSE, eq.constraints.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints.k0 = numeric(0), def.function = function ()         NULL, ceq.function = function ()         NULL, ceq.jacobian = function ()         NULL, ceq.JAC = structure(numeric(0), dim = c(0L, 5L)),         ceq.rhs = numeric(0), ceq.linear.idx = integer(0), ceq.nonlinear.idx = integer(0),         cin.simple.only = FALSE, cin.function = function ()         NULL, cin.jacobian = function ()         NULL, cin.JAC = structure(numeric(0), dim = c(0L, 5L)),         cin.rhs = numeric(0), cin.linear.idx = integer(0), cin.nonlinear.idx = integer(0),         ceq.efa.JAC = structure(numeric(0), dim = c(0L, 0L)),         con.jac = structure(numeric(0), dim = c(0L, 0L)), con.lambda = numeric(0),         nexo = 1L, conditional.x = FALSE, fixed.x = TRUE, parameterization = \"delta\",         ov.x.dummy.ov.idx = list(3L), ov.x.dummy.lv.idx = list(            3L), ov.y.dummy.ov.idx = list(1:2), ov.y.dummy.lv.idx = list(            1:2), ov.efa.idx = list(NULL), lv.efa.idx = list(            NULL), rv.ov = list(), rv.lv = list(), H = list(),         lv.order = list(), estimator = \"ML\", estimator.args = list()),     Cache = list(NULL), Fit = new(\"Fit\", npar = 5L, x = c(0.382732763516548,     0.416877762692203, -0.156180658350468, 0.987979633670854,     0.888854580485179), partrace = structure(numeric(0), dim = c(0L,     0L)), start = c(0.382732763516548, 0.416877762692203, -0.156180658350468,     0.987979633670854, 0.888854580485179, 0.854279640318141),         est = c(0.382732763516548, 0.416877762692203, -0.156180658350468,         0.987979633670854, 0.888854580485179, 0.854279640318141        ), se = c(0.107540974595692, 0.0948508793109487, 0.108270959204186,         0.139721419728572, 0.125703020269959, 0), fx = 0, fx.group = 0,         logl = NA_real_, logl.group = NA_real_, iterations = 1L,         converged = TRUE, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14),         Sigma.hat = list(structure(c(1.11311824710794, 0.412969290287501,         0.326960807554885, 0.412969290287501, 1.0605623794573,         0.0028807333012279, 0.326960807554885, 0.0028807333012279,         0.854279640318141), dim = c(3L, 3L))), Mu.hat = list(            NULL), TH = list(NULL), test = structure(list(standard = list(            test = \"standard\", stat = 0, stat.group = 0, df = 0L,             refdistr = \"chisq\", pvalue = NA_real_)), info = list(            ngroups = 1L, group.label = character(0), information = c(\"expected\",             \"expected\"), h1.information = c(\"structured\", \"structured\"            ), observed.information = c(\"hessian\", \"hessian\")))),     boot = list(), optim = list(x = c(0.382732763516548, 0.416877762692203,     -0.156180658350468, 0.987979633670854, 0.888854580485179),         dx = c(-1.01801695855898e-32, -6.24524556097322e-17,         -3.90327847560826e-17, -1.05879109084131e-32, 2.24320990030547e-17        ), npar = 5L, iterations = 1L, converged = TRUE, warn.txt = \"\",         parscale = c(1, 1, 1, 1, 1), fx = 0, fx.group = 0, logl.group = NA_real_,         logl = NA_real_, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14)),     loglik = list(loglik = -277.291965216153, loglik.group = -277.291965216153,         npar = 5L, ntotal = 100L, AIC = 564.583930432305, BIC = 577.609781362246,         BIC2 = 561.818525346987, estimator = \"ML\", conditional.x = FALSE,         fixed.x = TRUE), implied = list(cov = list(structure(c(1.11311824710794,     0.412969290287501, 0.326960807554885, 0.412969290287501,     1.0605623794573, 0.0028807333012279, 0.326960807554885, 0.0028807333012279,     0.854279640318141), dim = c(3L, 3L))), mean = list(NULL),         th = list(NULL), group.w = list(NULL)), vcov = list(se = \"standard\",         information = \"expected\", vcov = structure(c(0.0115650612169912,         -1.39842217145212e-18, 7.79692256878977e-18, 4.45520128746835e-19,         -2.89446791489086e-19, -5.89278722952597e-19, 0.00899668930606015,         -0.00344332776060817, 1.1909758261372e-17, 9.60295791984522e-18,         6.26848996928536e-18, -0.00344332776060817, 0.0117226006069944,         -4.67936794158809e-18, -3.96303917515144e-18, -3.8448872377298e-18,         1.04847007615604e-17, -3.85657525999532e-18, 0.0195220751309679,         -4.42910730273688e-19, -2.89446791489085e-19, 9.60295791984522e-18,         -3.96303917515144e-18, -4.42910730273686e-19, 0.0158012493049897        ), dim = c(5L, 5L))), test = structure(list(standard = list(        test = \"standard\", stat = 0, stat.group = 0, df = 0L,         refdistr = \"chisq\", pvalue = NA_real_)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\"))),     h1 = list(implied = list(cov = list(structure(c(1.11311824710794,     0.412969290287502, 0.326960807554885, 0.412969290287502,     1.0605623794573, 0.00288073330122793, 0.326960807554885,     0.00288073330122793, 0.854279640318141), dim = c(3L, 3L))),         mean = list(c(-0.0487949089166442, -0.043264571547434,         -0.136877005738466)), th = list(NULL), group.w = list(            1)), logl = list(loglik = -277.291965216153, loglik.group = -277.291965216153)),     baseline = list(partable = list(id = 1:3, lhs = c(\"m\", \"y\",     \"x\"), op = c(\"~~\", \"~~\", \"~~\"), rhs = c(\"m\", \"y\", \"x\"), user = c(1L,     1L, 1L), block = c(1L, 1L, 1L), group = c(1L, 1L, 1L), free = c(1L,     2L, 0L), ustart = c(1.11311824710794, 1.0605623794573, 0.854279640318142    ), exo = c(0L, 0L, 1L), label = c(\"\", \"\", \"\"), lower = c(0,     0, 0.854279640318142), upper = c(Inf, Inf, 0.854279640318142    ), start = c(1.11311824710794, 1.0605623794573, 0.854279640318142    ), est = c(1.11311824710794, 1.0605623794573, 0.854279640318142    ), se = c(0.157418692158501, 0.14998617007712, 0)), test = structure(list(        standard = list(test = \"standard\", stat = 29.5879451023585,             stat.group = 29.5879451023585, df = 3L, refdistr = \"chisq\",             pvalue = 1.68482257145719e-06)), info = list(ngroups = 1L,         group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\")))),     internal = list(), external = list()), new(\"lavaan\", version = \"0.6-19\",     call = lavaan::lavaan(model = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(        m = c(-0.00814020044688141, 0.167967123785712, -1.62795691792796,         1.29184300116025, -0.0184771657057447, 0.0602646127259461,         0.725188301153378, 1.34475932700033, -0.924720817674869,         0.8585689644652, -0.367376802654177, 0.334478865020355,         0.268955257449183, -0.104544232883729, -0.688138540694256,         -0.540841310970137, 1.47073091934107, 0.148470798946109,         -0.967787270823859, -0.903808887074359, 0.668133193620937,         0.604331309662094, -1.15168026338836, 0.206222254668794,         0.99116603584873, 1.99054338410479, -0.882761357325375,         -0.524241896341522, 0.626560343347583, -0.443542059954015,         1.32322003409493, 1.04208148767555, -1.76382714479686,         0.593140478525365, -1.13954427723008, -1.07446172205123,         0.742103981147505, 0.113453836261409, -0.20386550804415,         1.18285116175094, -0.206975458589128, -0.603106957845612,         -0.0136219806943186, -0.368899470442482, -0.145617356072917,         -1.509428927284, -0.098961230938763, -0.307778299915731,         -0.400318763504034, -0.509476404888851, -0.661448645526099,         -0.476949809812821, -0.650907463449429, 0.887948987414941,         -0.461480758929118, 0.0300088418960022, 0.974343735492169,         -0.373264881674288, -0.409631941887088, 0.610507127221665,         -1.35747752028585, 0.670727022593124, -0.661739595404534,         -1.37280181664836, -1.71495841282725, -0.487213940591002,         -1.0436052737614, -1.14184811269305, 0.967998777927062,         -0.720881132642448, 0.939581910758106, 0.260931884431455,         -0.904542093866316, -0.504700255000248, -0.846810810685631,         0.396831551887176, -0.25823098613616, 1.14959238662516,         0.0166062712863464, -2.22699081404222, -0.238869777198553,         -2.06530908673775, 0.786103926946834, -0.429941001625563,         -0.526210421074268, -0.285738338683871, 0.00929319036382326,         -1.58362444467265, 0.553006415994647, -0.742233490838131,         -0.264600420758326, 0.967117853860525, 0.762238128475713,         1.63253102208454, 0.00871746369110592, -0.415118371631495,         2.08798330702898, -0.309609457462997, 1.21651143641959,         1.11527626871649), y = c(0.389886673115764, 1.31843409056788,         -0.994970123526719, -0.420504588403101, -0.321530441363213,         -0.443768312278922, 0.646647025424089, -0.135881700440692,         0.127239060610954, -0.578667243346392, 1.33657546929283,         1.42266221623004, -0.254190191454151, 0.0690297140111326,         -0.667659946681306, -1.3152232490055, -1.56942776288785,         0.0525029308099555, -0.513661749400436, 0.970420206410657,         -1.39405431524841, -0.271291043761853, 0.186295125941764,         0.399627330992032, 0.601024949816664, 0.457676866485655,         -0.267356972173323, -0.466420972447583, 0.411713584660471,         -0.722272394684956, 1.69093740222961, 1.4389724870837,         0.275752996927813, -0.0214075904225611, -0.833335456257173,         -0.840581914041809, 1.56109626357356, -0.202838641867873,         -0.0173782388208663, 0.921544097368724, 0.483861574076099,         -0.533365332591791, 2.02485487137291, -0.98768366878004,         -1.30824343040963, -0.718079281632652, 1.48117032930771,         -0.108206026592038, -0.105133843681358, 0.492817191242108,         -0.416437632387497, -0.14867106171104, 0.721124870707462,         0.525160929442882, -0.88216167351009, 0.357018827927476,         -0.458112556836835, -1.44955072702983, -0.311087927071662,         -0.648179084141866, -0.175644622285204, 0.208103252488642,         -0.994535042154295, 0.719069622435714, -0.952690510454673,         0.987625550179094, -0.62002814663546, -0.856089716737864,         0.807426088080981, 0.531468718128727, 2.81306088317972,         -0.765823473827937, -0.611125964328616, 0.681027204222692,         -0.127553611787498, 0.0361714382197732, -1.25742457860655,         0.333471059467234, -0.15169844253015, -1.18431679703132,         1.27680746181135, -1.43270617940003, -0.971847634677628,         0.214953152143963, -0.360060031374152, -0.319838343097406,         0.55506477005216, -3.30906570708085, -0.20297890390857,         -0.504009926941532, 0.391896752939163, 0.257520584079299,         -0.489356378531118, 1.13891723062622, 0.021199614718457,         -0.111838423833238, 2.04561103315638, -0.624381421726574,         -0.473584327671255, -0.550885291594103), x = c(-1.02393278779038,         -1.38765057998806, -0.0492211144061267, 1.81096073048314,         -0.0995100657082667, 0.777237124297383, -1.10259632518001,         -0.221644782701794, 0.5660949625959, -0.354959345255063,         0.785262601468044, 0.694047378599404, -0.632729895584955,         -0.771958641961308, 2.3578173876011, -0.19254933635981,         0.00661933421419712, -0.0545460246273611, -0.568206880540376,         -0.926975943696645, -1.1357351813807, 0.913962339054452,         -0.986062833322873, 0.66748541348963, 1.40659548970662,         1.15777896011788, -0.138753197573533, -0.539321850960138,         -1.07889349906152, -0.0185621399511091, -0.232615685678704,         0.15629354251416, -0.604009754754033, 0.629035120121665,         0.714169570852022, 1.07588610128876, 2.24975551737932,         0.197890598879292, -0.575546318478704, -0.0773208650045946,         -1.62791988910102, 0.129923153969037, -0.425673133260061,         0.406011748521125, -0.268810185638072, -1.38098453629771,         0.0365833213445593, -1.35324453117639, 0.897006193942258,         -1.82935971226393, -0.141876944171991, 0.457981777842779,         -1.51961751308999, 1.39905531466027, -0.885339190903023,         -0.506330291221321, 0.163332105966331, -0.337143856258392,         -1.03595153200983, 0.409337928216715, -0.524223458216886,         0.506500373524185, -0.504722862774708, -0.957250328953504,         -0.0946343584532563, 0.649439317610584, 0.242321799327066,         -0.0589340902617142, -1.94779407157618, 1.4514436318915,         -0.0399396776377224, -0.863997691069911, -0.201690239712518,         0.261255562727432, -1.51835138330586, 0.717308632275803,         0.246832728096417, 1.20276704630509, 0.986039270447351,         -0.537940599062239, -0.490282741813956, -0.995516172562447,         -0.361702928254615, 0.944354811296923, 1.79220701161545,         0.928409395864299, -1.82993766963068, 0.821878106163116,         1.0362687620034, 0.617420144129801, -0.854930363118786,         1.06451051848471, 0.729481458103667, 0.66265658435809,         -0.381407202704243, 0.845891777793581, 0.111591884445813,         -0.0677702616560359, 1.48709809651828, 0.75722337664623        )), class = \"data.frame\", row.names = c(NA, -100L)),         model.type = \"sem\", int.ov.free = TRUE, int.lv.free = FALSE,         auto.fix.first = TRUE, auto.fix.single = TRUE, auto.var = TRUE,         auto.cov.lv.x = TRUE, auto.cov.y = TRUE, auto.th = TRUE,         auto.delta = TRUE, auto.efa = TRUE), timing = list(init = c(elapsed = 0),         ov.names = c(elapsed = 0.00199999999999889), Options = c(elapsed = 0.00100000000000122),         Data = c(elapsed = 0.00100000000000122), ParTable = c(elapsed = 0.00300000000000011),         SampleStats = c(elapsed = 0.000999999999997669), h1 = c(elapsed = 0),         bounds = c(elapsed = 0), start = c(elapsed = 0.00100000000000122),         Model = c(elapsed = 0.00400000000000134), cache = c(elapsed = 0),         optim = c(elapsed = 0.00199999999999889), implied = c(elapsed = 0),         loglik = c(elapsed = 0), vcov = c(elapsed = 0.00100000000000122),         test = c(elapsed = 0), Fit = c(elapsed = 0.000999999999997669),         baseline = c(elapsed = 0.0120000000000005), rotation = c(elapsed = 0),         total = c(elapsed = 0.0289999999999999)), Options = list(        model.type = \"sem\", mimic = \"lavaan\", meanstructure = FALSE,         int.ov.free = TRUE, int.lv.free = FALSE, marker.int.zero = FALSE,         conditional.x = FALSE, fixed.x = TRUE, orthogonal = FALSE,         orthogonal.x = FALSE, orthogonal.y = FALSE, std.lv = FALSE,         correlation = FALSE, effect.coding = \"\", ceq.simple = FALSE,         parameterization = \"delta\", auto.fix.first = TRUE, auto.fix.single = TRUE,         auto.var = TRUE, auto.cov.lv.x = TRUE, auto.cov.y = TRUE,         auto.th = TRUE, auto.delta = TRUE, auto.efa = TRUE, rotation = \"geomin\",         rotation.se = \"bordered\", rotation.args = list(orthogonal = FALSE,             row.weights = \"none\", std.ov = TRUE, geomin.epsilon = 0.001,             orthomax.gamma = 1, cf.gamma = 0, oblimin.gamma = 0,             promax.kappa = 4, target = structure(numeric(0), dim = c(0L,             0L)), target.mask = structure(numeric(0), dim = c(0L,             0L)), rstarts = 30L, algorithm = \"gpa\", reflect = TRUE,             order.lv.by = \"index\", gpa.tol = 1e-05, tol = 1e-08,             warn = FALSE, verbose = FALSE, jac.init.rot = TRUE,             max.iter = 10000L), std.ov = FALSE, missing = \"listwise\",         sampling.weights.normalization = \"total\", samplestats = TRUE,         sample.cov.rescale = TRUE, sample.cov.robust = FALSE,         sample.icov = TRUE, ridge = FALSE, ridge.constant = \"default\",         group.label = NULL, group.equal = character(0), group.partial = character(0),         group.w.free = FALSE, level.label = NULL, estimator = \"ML\",         estimator.orig = \"ML\", estimator.args = list(), likelihood = \"normal\",         link = \"default\", representation = \"LISREL\", do.fit = TRUE,         bounds = \"none\", rstarts = 0L, se = \"standard\", test = \"standard\",         information = c(\"expected\", \"expected\"), h1.information = c(\"structured\",         \"structured\"), observed.information = c(\"hessian\", \"hessian\"        ), information.meat = \"first.order\", h1.information.meat = \"structured\",         omega.information = \"expected\", omega.h1.information = \"unstructured\",         omega.information.meat = \"first.order\", omega.h1.information.meat = \"unstructured\",         scaled.test = \"standard\", ug2.old.approach = FALSE, bootstrap = 1000L,         gamma.n.minus.one = FALSE, gamma.unbiased = FALSE, control = list(),         optim.method = \"nlminb\", optim.attempts = 4L, optim.force.converged = FALSE,         optim.gradient = \"analytic\", optim.init_nelder_mead = FALSE,         optim.var.transform = \"none\", optim.parscale = \"none\",         optim.partrace = FALSE, optim.dx.tol = 0.001, optim.bounds = list(            lower = character(0), upper = character(0)), em.iter.max = 10000L,         em.fx.tol = 1e-08, em.dx.tol = 1e-04, em.zerovar.offset = 1e-04,         em.h1.iter.max = 500L, em.h1.tol = 1e-05, em.h1.warn = TRUE,         optim.gn.iter.max = 200L, optim.gn.stephalf.max = 10L,         optim.gn.tol.x = 1e-05, integration.ngh = 21L, parallel = \"no\",         ncpus = 1L, cl = NULL, iseed = NULL, zero.add = c(0.5,         0), zero.keep.margins = TRUE, zero.cell.warn = FALSE,         allow.empty.cell = FALSE, cat.wls.w = TRUE, start = \"default\",         check.start = TRUE, check.post = TRUE, check.gradient = TRUE,         check.vcov = TRUE, check.lv.names = TRUE, check.lv.interaction = TRUE,         check.delta.cat.mediator = TRUE, h1 = TRUE, baseline = TRUE,         baseline.conditional.x.free.slopes = TRUE, implied = TRUE,         loglik = TRUE, store.vcov = \"default\", parser = \"new\",         categorical = FALSE, .categorical = FALSE, .clustered = FALSE,         .multilevel = FALSE), ParTable = list(id = 1:6, lhs = c(\"m\",     \"y\", \"y\", \"m\", \"y\", \"x\"), op = c(\"~\", \"~\", \"~\", \"~~\", \"~~\",     \"~~\"), rhs = c(\"x\", \"m\", \"x\", \"m\", \"y\", \"x\"), user = c(1L,     1L, 1L, 0L, 0L, 0L), block = c(1L, 1L, 1L, 1L, 1L, 1L), group = c(1L,     1L, 1L, 1L, 1L, 1L), free = c(1L, 2L, 3L, 4L, 5L, 0L), ustart = c(NA_real_,     NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), exo = c(0L,     0L, 0L, 0L, 0L, 1L), label = c(\"\", \"\", \"\", \"\", \"\", \"\"), plabel = c(\".p1.\",     \".p2.\", \".p3.\", \".p4.\", \".p5.\", \".p6.\"), start = c(0.239791041380513,     0.427344314295511, -0.138146119270245, 0.757965645698087,     0.695840755762764, 0.844471000315694), est = c(0.239791041380513,     0.427344314295511, -0.138146119270245, 0.757965645698087,     0.695840755762764, 0.844471000315694), se = c(0.0947397841406611,     0.0958142644685547, 0.0936366886258517, 0.107192529595912,     0.0984067434051644, 0)), pta = list(names = c(\"id\", \"lhs\",     \"op\", \"rhs\", \"user\", \"block\", \"group\", \"free\", \"ustart\",     \"exo\", \"label\", \"plabel\", \"start\", \"est\", \"se\"), vidx = list(        ov = list(1:3), ov.x = list(3L), ov.nox = list(1:2),         ov.model = list(1:3), ov.y = list(2L), ov.num = list(            1:3), ov.ord = list(integer(0)), ov.ind = list(integer(0)),         ov.orphan = list(3L), ov.interaction = list(integer(0)),         ov.efa = list(integer(0)), th = list(integer(0)), th.mean = list(            1:2), lv = list(integer(0)), lv.regular = list(integer(0)),         lv.formative = list(integer(0)), lv.x = list(integer(0)),         lv.y = list(integer(0)), lv.nox = list(integer(0)), lv.nonnormal = list(            integer(0)), lv.interaction = list(integer(0)), lv.efa = list(            integer(0)), lv.rv = list(integer(0)), lv.ind = list(            integer(0)), lv.marker = list(integer(0)), eqs.y = list(            integer(0)), eqs.x = list(integer(0))), meanstructure = FALSE,         nblocks = 1L, ngroups = 1L, nlevels = 1L, nvar = list(            3L), nfac = list(0L), nfac.nonnormal = list(0L),         th.idx = list(c(0, 0)), vnames = list(ov = list(c(\"m\",         \"y\", \"x\")), ov.x = list(\"x\"), ov.nox = list(c(\"m\", \"y\"        )), ov.model = list(c(\"m\", \"y\", \"x\")), ov.y = list(\"y\"),             ov.num = list(c(\"m\", \"y\", \"x\")), ov.ord = list(character(0)),             ov.ind = list(character(0)), ov.orphan = list(\"x\"),             ov.interaction = list(character(0)), ov.efa = list(                character(0)), th = list(character(0)), th.mean = list(                c(\"m\", \"y\")), lv = list(character(0)), lv.regular = list(                character(0)), lv.formative = list(character(0)),             lv.x = list(character(0)), lv.y = list(character(0)),             lv.nox = list(character(0)), lv.nonnormal = list(                character(0)), lv.interaction = list(character(0)),             lv.efa = list(character(0)), lv.rv = list(character(0)),             lv.ind = list(character(0)), lv.marker = list(structure(character(0), names = character(0))),             eqs.y = list(c(\"m\", \"y\")), eqs.x = list(c(\"x\", \"m\"            )))), Data = new(\"lavData\", data.type = \"full\", group = character(0),         ngroups = 1L, group.label = character(0), block.label = character(0),         cluster = character(0), nlevels = 1L, level.label = character(0),         std.ov = FALSE, nobs = list(100L), norig = list(100L),         ov.names = list(c(\"m\", \"y\", \"x\")), ov.names.x = list(            \"x\"), ov.names.l = list(), ordered = character(0),         weights = list(NULL), sampling.weights = character(0),         ov = list(name = c(\"m\", \"y\", \"x\"), idx = 1:3, nobs = c(100L,         100L, 100L), type = c(\"numeric\", \"numeric\", \"numeric\"        ), exo = c(0L, 0L, 1L), user = c(0L, 0L, 0L), mean = c(-0.0783774811983872,         -0.0399137706954752, 0.0181244354063178), var = c(0.814669203668364,         0.843775220906822, 0.853001010419893), nlev = c(0L, 0L,         0L), lnam = c(\"\", \"\", \"\")), case.idx = list(1:100), missing = \"listwise\",         Mp = list(NULL), Rp = list(NULL), Lp = list(NULL), eXo = list(            structure(c(-1.02393278779038, -1.38765057998806,             -0.0492211144061267, 1.81096073048314, -0.0995100657082667,             0.777237124297383, -1.10259632518001, -0.221644782701794,             0.5660949625959, -0.354959345255063, 0.785262601468044,             0.694047378599404, -0.632729895584955, -0.771958641961308,             2.3578173876011, -0.19254933635981, 0.00661933421419712,             -0.0545460246273611, -0.568206880540376, -0.926975943696645,             -1.1357351813807, 0.913962339054452, -0.986062833322873,             0.66748541348963, 1.40659548970662, 1.15777896011788,             -0.138753197573533, -0.539321850960138, -1.07889349906152,             -0.0185621399511091, -0.232615685678704, 0.15629354251416,             -0.604009754754033, 0.629035120121665, 0.714169570852022,             1.07588610128876, 2.24975551737932, 0.197890598879292,             -0.575546318478704, -0.0773208650045946, -1.62791988910102,             0.129923153969037, -0.425673133260061, 0.406011748521125,             -0.268810185638072, -1.38098453629771, 0.0365833213445593,             -1.35324453117639, 0.897006193942258, -1.82935971226393,             -0.141876944171991, 0.457981777842779, -1.51961751308999,             1.39905531466027, -0.885339190903023, -0.506330291221321,             0.163332105966331, -0.337143856258392, -1.03595153200983,             0.409337928216715, -0.524223458216886, 0.506500373524185,             -0.504722862774708, -0.957250328953504, -0.0946343584532563,             0.649439317610584, 0.242321799327066, -0.0589340902617142,             -1.94779407157618, 1.4514436318915, -0.0399396776377224,             -0.863997691069911, -0.201690239712518, 0.261255562727432,             -1.51835138330586, 0.717308632275803, 0.246832728096417,             1.20276704630509, 0.986039270447351, -0.537940599062239,             -0.490282741813956, -0.995516172562447, -0.361702928254615,             0.944354811296923, 1.79220701161545, 0.928409395864299,             -1.82993766963068, 0.821878106163116, 1.0362687620034,             0.617420144129801, -0.854930363118786, 1.06451051848471,             0.729481458103667, 0.66265658435809, -0.381407202704243,             0.845891777793581, 0.111591884445813, -0.0677702616560359,             1.48709809651828, 0.75722337664623), dim = c(100L,             1L))), X = list(structure(c(-0.00814020044688141,         0.167967123785712, -1.62795691792796, 1.29184300116025,         -0.0184771657057447, 0.0602646127259461, 0.725188301153378,         1.34475932700033, -0.924720817674869, 0.8585689644652,         -0.367376802654177, 0.334478865020355, 0.268955257449183,         -0.104544232883729, -0.688138540694256, -0.540841310970137,         1.47073091934107, 0.148470798946109, -0.967787270823859,         -0.903808887074359, 0.668133193620937, 0.604331309662094,         -1.15168026338836, 0.206222254668794, 0.99116603584873,         1.99054338410479, -0.882761357325375, -0.524241896341522,         0.626560343347583, -0.443542059954015, 1.32322003409493,         1.04208148767555, -1.76382714479686, 0.593140478525365,         -1.13954427723008, -1.07446172205123, 0.742103981147505,         0.113453836261409, -0.20386550804415, 1.18285116175094,         -0.206975458589128, -0.603106957845612, -0.0136219806943186,         -0.368899470442482, -0.145617356072917, -1.509428927284,         -0.098961230938763, -0.307778299915731, -0.400318763504034,         -0.509476404888851, -0.661448645526099, -0.476949809812821,         -0.650907463449429, 0.887948987414941, -0.461480758929118,         0.0300088418960022, 0.974343735492169, -0.373264881674288,         -0.409631941887088, 0.610507127221665, -1.35747752028585,         0.670727022593124, -0.661739595404534, -1.37280181664836,         -1.71495841282725, -0.487213940591002, -1.0436052737614,         -1.14184811269305, 0.967998777927062, -0.720881132642448,         0.939581910758106, 0.260931884431455, -0.904542093866316,         -0.504700255000248, -0.846810810685631, 0.396831551887176,         -0.25823098613616, 1.14959238662516, 0.0166062712863464,         -2.22699081404222, -0.238869777198553, -2.06530908673775,         0.786103926946834, -0.429941001625563, -0.526210421074268,         -0.285738338683871, 0.00929319036382326, -1.58362444467265,         0.553006415994647, -0.742233490838131, -0.264600420758326,         0.967117853860525, 0.762238128475713, 1.63253102208454,         0.00871746369110592, -0.415118371631495, 2.08798330702898,         -0.309609457462997, 1.21651143641959, 1.11527626871649,         0.389886673115764, 1.31843409056788, -0.994970123526719,         -0.420504588403101, -0.321530441363213, -0.443768312278922,         0.646647025424089, -0.135881700440692, 0.127239060610954,         -0.578667243346392, 1.33657546929283, 1.42266221623004,         -0.254190191454151, 0.0690297140111326, -0.667659946681306,         -1.3152232490055, -1.56942776288785, 0.0525029308099555,         -0.513661749400436, 0.970420206410657, -1.39405431524841,         -0.271291043761853, 0.186295125941764, 0.399627330992032,         0.601024949816664, 0.457676866485655, -0.267356972173323,         -0.466420972447583, 0.411713584660471, -0.722272394684956,         1.69093740222961, 1.4389724870837, 0.275752996927813,         -0.0214075904225611, -0.833335456257173, -0.840581914041809,         1.56109626357356, -0.202838641867873, -0.0173782388208663,         0.921544097368724, 0.483861574076099, -0.533365332591791,         2.02485487137291, -0.98768366878004, -1.30824343040963,         -0.718079281632652, 1.48117032930771, -0.108206026592038,         -0.105133843681358, 0.492817191242108, -0.416437632387497,         -0.14867106171104, 0.721124870707462, 0.525160929442882,         -0.88216167351009, 0.357018827927476, -0.458112556836835,         -1.44955072702983, -0.311087927071662, -0.648179084141866,         -0.175644622285204, 0.208103252488642, -0.994535042154295,         0.719069622435714, -0.952690510454673, 0.987625550179094,         -0.62002814663546, -0.856089716737864, 0.807426088080981,         0.531468718128727, 2.81306088317972, -0.765823473827937,         -0.611125964328616, 0.681027204222692, -0.127553611787498,         0.0361714382197732, -1.25742457860655, 0.333471059467234,         -0.15169844253015, -1.18431679703132, 1.27680746181135,         -1.43270617940003, -0.971847634677628, 0.214953152143963,         -0.360060031374152, -0.319838343097406, 0.55506477005216,         -3.30906570708085, -0.20297890390857, -0.504009926941532,         0.391896752939163, 0.257520584079299, -0.489356378531118,         1.13891723062622, 0.021199614718457, -0.111838423833238,         2.04561103315638, -0.624381421726574, -0.473584327671255,         -0.550885291594103, -1.02393278779038, -1.38765057998806,         -0.0492211144061267, 1.81096073048314, -0.0995100657082667,         0.777237124297383, -1.10259632518001, -0.221644782701794,         0.5660949625959, -0.354959345255063, 0.785262601468044,         0.694047378599404, -0.632729895584955, -0.771958641961308,         2.3578173876011, -0.19254933635981, 0.00661933421419712,         -0.0545460246273611, -0.568206880540376, -0.926975943696645,         -1.1357351813807, 0.913962339054452, -0.986062833322873,         0.66748541348963, 1.40659548970662, 1.15777896011788,         -0.138753197573533, -0.539321850960138, -1.07889349906152,         -0.0185621399511091, -0.232615685678704, 0.15629354251416,         -0.604009754754033, 0.629035120121665, 0.714169570852022,         1.07588610128876, 2.24975551737932, 0.197890598879292,         -0.575546318478704, -0.0773208650045946, -1.62791988910102,         0.129923153969037, -0.425673133260061, 0.406011748521125,         -0.268810185638072, -1.38098453629771, 0.0365833213445593,         -1.35324453117639, 0.897006193942258, -1.82935971226393,         -0.141876944171991, 0.457981777842779, -1.51961751308999,         1.39905531466027, -0.885339190903023, -0.506330291221321,         0.163332105966331, -0.337143856258392, -1.03595153200983,         0.409337928216715, -0.524223458216886, 0.506500373524185,         -0.504722862774708, -0.957250328953504, -0.0946343584532563,         0.649439317610584, 0.242321799327066, -0.0589340902617142,         -1.94779407157618, 1.4514436318915, -0.0399396776377224,         -0.863997691069911, -0.201690239712518, 0.261255562727432,         -1.51835138330586, 0.717308632275803, 0.246832728096417,         1.20276704630509, 0.986039270447351, -0.537940599062239,         -0.490282741813956, -0.995516172562447, -0.361702928254615,         0.944354811296923, 1.79220701161545, 0.928409395864299,         -1.82993766963068, 0.821878106163116, 1.0362687620034,         0.617420144129801, -0.854930363118786, 1.06451051848471,         0.729481458103667, 0.66265658435809, -0.381407202704243,         0.845891777793581, 0.111591884445813, -0.0677702616560359,         1.48709809651828, 0.75722337664623), dim = c(100L, 3L        )))), SampleStats = new(\"lavSampleStats\", var = list(        c(0.806522511631681, 0.835337468697754, 0.844471000315694        )), cov = list(structure(c(0.806522511631681, 0.316688692924327,     0.202496580581344, 0.316688692924327, 0.835337468697754,     -0.0301246291541546, 0.202496580581344, -0.0301246291541546,     0.844471000315694), dim = c(3L, 3L))), mean = list(c(-0.0783774811983872,     -0.0399137706954752, 0.0181244354063178)), th = list(NULL),         th.idx = list(NULL), th.names = list(NULL), res.cov = list(            NULL), res.var = list(NULL), res.th = list(NULL),         res.th.nox = list(NULL), res.slopes = list(NULL), res.int = list(            NULL), mean.x = list(0.0181244354063178), cov.x = list(            structure(0.844471000315694, dim = c(1L, 1L))), bifreq = list(            NULL), group.w = list(1), nobs = list(100L), ntotal = 100L,         ngroups = 1L, x.idx = list(3L), icov = list(structure(c(1.58177065860306,         -0.614140966530577, -0.401202549725769, -0.614140966530577,         1.43711041889724, 0.19853122733349, -0.401202549725769,         0.19853122733349, 1.28746022496034), dim = c(3L, 3L))),         cov.log.det = list(-0.808796543478701), res.icov = list(            NULL), res.cov.log.det = list(NULL), ridge = 0, WLS.obs = list(            c(0.806522511631681, 0.316688692924327, 0.202496580581344,             0.835337468697754, -0.0301246291541546, 0.844471000315694            )), WLS.V = list(NULL), WLS.VD = list(NULL), NACOV = list(            NULL), NACOV.user = FALSE, missing.flag = FALSE,         missing = list(NULL), missing.h1 = list(NULL), YLp = list(            NULL), zero.cell.tables = list(NULL)), Model = new(\"lavModel\",         GLIST = list(lambda = structure(c(1, 0, 0, 0, 1, 0, 0,         0, 1), dim = c(3L, 3L)), theta = structure(c(0, 0, 0,         0, 0, 0, 0, 0, 0), dim = c(3L, 3L)), psi = structure(c(0.757965645698087,         0, 0, 0, 0.695840755762764, 0, 0, 0, 0.844471000315694        ), dim = c(3L, 3L)), beta = structure(c(0, 0.427344314295511,         0, 0, 0, 0, 0.239791041380513, -0.138146119270245, 0), dim = c(3L,         3L))), dimNames = list(list(c(\"m\", \"y\", \"x\"), c(\"m\",         \"y\", \"x\")), list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")),             list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")), list(c(\"m\",             \"y\", \"x\"), c(\"m\", \"y\", \"x\"))), isSymmetric = c(FALSE,         TRUE, TRUE, FALSE), mmSize = c(9L, NA, NA, 9L), representation = \"LISREL\",         modprop = list(uvreg = FALSE, uvord = FALSE, mvreg = FALSE,             nexo = 0L, acyclic = TRUE, bowfree = TRUE), meanstructure = FALSE,         correlation = FALSE, categorical = FALSE, multilevel = FALSE,         group.w.free = FALSE, link = \"default\", nblocks = 1L,         ngroups = 1L, nefa = 0L, nmat = 4L, nvar = 3L, num.idx = list(            1:3), th.idx = list(NULL), nx.free = 5L, nx.unco = 5L,         nx.user = 6L, m.free.idx = list(integer(0), integer(0),             c(1L, 5L), c(2L, 7L, 8L)), x.free.idx = list(integer(0),             integer(0), 4:5, c(2L, 1L, 3L)), x.unco.idx = list(            integer(0), integer(0), 4:5, c(2L, 1L, 3L)), m.user.idx = list(            integer(0), integer(0), c(1L, 5L, 9L), c(2L, 7L,             8L)), x.user.idx = list(integer(0), integer(0), 4:6,             c(2L, 1L, 3L)), x.def.idx = integer(0), x.ceq.idx = integer(0),         x.cin.idx = integer(0), x.free.var.idx = 4:5, ceq.simple.only = FALSE,         ceq.simple.K = structure(numeric(0), dim = c(0L, 0L)),         eq.constraints = FALSE, eq.constraints.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints.k0 = numeric(0), def.function = function ()         NULL, ceq.function = function ()         NULL, ceq.jacobian = function ()         NULL, ceq.JAC = structure(numeric(0), dim = c(0L, 5L)),         ceq.rhs = numeric(0), ceq.linear.idx = integer(0), ceq.nonlinear.idx = integer(0),         cin.simple.only = FALSE, cin.function = function ()         NULL, cin.jacobian = function ()         NULL, cin.JAC = structure(numeric(0), dim = c(0L, 5L)),         cin.rhs = numeric(0), cin.linear.idx = integer(0), cin.nonlinear.idx = integer(0),         ceq.efa.JAC = structure(numeric(0), dim = c(0L, 0L)),         con.jac = structure(numeric(0), dim = c(0L, 0L)), con.lambda = numeric(0),         nexo = 1L, conditional.x = FALSE, fixed.x = TRUE, parameterization = \"delta\",         ov.x.dummy.ov.idx = list(3L), ov.x.dummy.lv.idx = list(            3L), ov.y.dummy.ov.idx = list(1:2), ov.y.dummy.lv.idx = list(            1:2), ov.efa.idx = list(NULL), lv.efa.idx = list(            NULL), rv.ov = list(), rv.lv = list(), H = list(),         lv.order = list(), estimator = \"ML\", estimator.args = list()),     Cache = list(NULL), Fit = new(\"Fit\", npar = 5L, x = c(0.239791041380513,     0.427344314295511, -0.138146119270245, 0.757965645698087,     0.695840755762764), partrace = structure(numeric(0), dim = c(0L,     0L)), start = c(0.239791041380513, 0.427344314295511, -0.138146119270245,     0.757965645698087, 0.695840755762764, 0.844471000315694),         est = c(0.239791041380513, 0.427344314295511, -0.138146119270245,         0.757965645698087, 0.695840755762764, 0.844471000315694        ), se = c(0.0947397841406611, 0.0958142644685547, 0.0936366886258517,         0.107192529595912, 0.0984067434051644, 0), fx = 0, fx.group = 0,         logl = NA_real_, logl.group = NA_real_, iterations = 1L,         converged = TRUE, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14),         Sigma.hat = list(structure(c(0.806522511631681, 0.316688692924327,         0.202496580581344, 0.316688692924327, 0.835337468697754,         -0.0301246291541546, 0.202496580581344, -0.0301246291541546,         0.844471000315694), dim = c(3L, 3L))), Mu.hat = list(            NULL), TH = list(NULL), test = structure(list(standard = list(            test = \"standard\", stat = 0, stat.group = 0, df = 0L,             refdistr = \"chisq\", pvalue = NA_real_)), info = list(            ngroups = 1L, group.label = character(0), information = c(\"expected\",             \"expected\"), h1.information = c(\"structured\", \"structured\"            ), observed.information = c(\"hessian\", \"hessian\")))),     boot = list(), optim = list(x = c(0.239791041380513, 0.427344314295511,     -0.138146119270245, 0.757965645698087, 0.695840755762764),         dx = c(3.61787533049007e-34, 1.12623155136243e-33, -1.49579350873915e-17,         -4.40334739987605e-35, -2.9696172112745e-18), npar = 5L,         iterations = 1L, converged = TRUE, warn.txt = \"\", parscale = c(1,         1, 1, 1, 1), fx = 0, fx.group = 0, logl.group = NA_real_,         logl = NA_real_, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14)),     loglik = list(loglik = -251.800123606806, loglik.group = -251.800123606806,         npar = 5L, ntotal = 100L, AIC = 513.600247213612, BIC = 526.626098143553,         BIC2 = 510.834842128294, estimator = \"ML\", conditional.x = FALSE,         fixed.x = TRUE), implied = list(cov = list(structure(c(0.806522511631681,     0.316688692924327, 0.202496580581344, 0.316688692924327,     0.835337468697754, -0.0301246291541546, 0.202496580581344,     -0.0301246291541546, 0.844471000315694), dim = c(3L, 3L))),         mean = list(NULL), th = list(NULL), group.w = list(NULL)),     vcov = list(se = \"standard\", information = \"expected\", vcov = structure(c(0.00897562669901906,     -4.53988510141855e-18, 4.7959233615038e-18, 1.05819477703013e-18,     -1.60174639485735e-19, -4.4642425969964e-18, 0.00918037327565015,     -0.00220137126802998, 7.54971664537236e-18, 5.48325980745653e-18,     5.3497853181661e-18, -0.00220137126802998, 0.00876782945681471,     -1.77580635632306e-18, -8.13606702622815e-18, 3.70367442558854e-19,     4.75477651250628e-18, -1.20489573151594e-18, 0.0114902384011704,     -4.61091481343749e-19, 8.10739261730744e-20, 7.33893633194204e-18,     -8.13809125550729e-18, 1.56582053065407e-19, 0.00968388714760987    ), dim = c(5L, 5L))), test = structure(list(standard = list(        test = \"standard\", stat = 0, stat.group = 0, df = 0L,         refdistr = \"chisq\", pvalue = NA_real_)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\"))),     h1 = list(implied = list(cov = list(structure(c(0.806522511631681,     0.316688692924327, 0.202496580581344, 0.316688692924327,     0.835337468697754, -0.0301246291541546, 0.202496580581344,     -0.0301246291541546, 0.844471000315694), dim = c(3L, 3L))),         mean = list(c(-0.0783774811983872, -0.0399137706954752,         0.0181244354063178)), th = list(NULL), group.w = list(            1)), logl = list(loglik = -251.800123606806, loglik.group = -251.800123606806)),     baseline = list(partable = list(id = 1:3, lhs = c(\"m\", \"y\",     \"x\"), op = c(\"~~\", \"~~\", \"~~\"), rhs = c(\"m\", \"y\", \"x\"), user = c(1L,     1L, 1L), block = c(1L, 1L, 1L), group = c(1L, 1L, 1L), free = c(1L,     2L, 0L), ustart = c(0.806522511631681, 0.835337468697753,     0.844471000315694), exo = c(0L, 0L, 1L), label = c(\"\", \"\",     \"\"), lower = c(0, 0, 0.844471000315694), upper = c(Inf, Inf,     0.844471000315694), start = c(0.806522511631681, 0.835337468697753,     0.844471000315694), est = c(0.806522511631681, 0.835337468697753,     0.844471000315694), se = c(0.114059507430874, 0.118134557739077,     0)), test = structure(list(standard = list(test = \"standard\",         stat = 24.4808709974141, stat.group = 24.4808709974141,         df = 3L, refdistr = \"chisq\", pvalue = 1.98226736205509e-05)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\")))),     internal = list(), external = list()), new(\"lavaan\", version = \"0.6-19\",     call = lavaan::lavaan(model = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(        m = c(-2.70768557567576, -0.576424186391143, -1.39468505766435,         0.352940010333777, -0.751073663742573, 1.10112215068494,         0.64327302939098, -0.14938407921516, 0.300648055349008,         -0.402390064288113, 0.105217507177305, -1.34330869257752,         0.634499444507559, -0.417056234145238, -0.689444327136714,         -0.177541921664477, 2.06030020004644, -1.57880113086557,         -0.0350236098318482, 0.421299816312967, -1.39203840499182,         -0.501157870159741, 0.535716829619804, -0.123625729763123,         -0.93091594519879, 0.623417442289001, 0.0387895076971012,         0.135281955102164, -0.994372384112306, -0.984797486284789,         -0.0679221207565718, 1.03860556835361, -0.0482831620584835,         -0.926342120663365, 0.935881382705561, 0.786099292294036,         -1.29113001718605, 1.45573724598723, 1.4725233179124,         -0.927198688152777, 1.63230692596192, -1.34583275813779,         0.0793030738542954, -1.05886647219432, -0.464410287779807,         -0.0216609328844941, 0.735259680279112, -0.601296999843413,         -2.92027803029758, 0.136387789921684, -0.825163111975978,         -0.0939501666089703, -0.692458238792383, 0.750387203782311,         0.265360417649642, 1.11331484146445, -0.638097303562536,         -0.410304001023256, 0.370062000967495, 0.338711965605387,         1.93018245881115, -2.34793004513222, 1.00522674280094,         -0.0883997024919002, 0.714544663803622, -0.424617963014997,         -2.70709761303748, 0.607543177964685, 0.222261024312942,         -0.902112703574491, -0.648147130507864, -0.00760114071435173,         2.62525924505497, -0.144851885573487, -0.859565159915909,         2.12241524335178, -0.0997657574931206, -0.66638718599577,         -1.53849269361302, -0.889098393887787, 1.62988543708224,         0.431822900600543, 0.714607860490375, 0.506755630638367,         -0.463928148243183, 0.78965053201951, 0.145108781075116,         -0.082828795105383, 1.14089526314909, 0.0363021530959265,         0.272123282993949, -1.13202707172738, 1.29955264357712,         0.843436834835929, -1.16451599782668, -0.253034129698682,         0.298175122998673, -0.187784712338332, 0.596964924803611,         -0.589869024170972), y = c(-2.39769214926222, -0.0271342381632562,         -2.03028139257948, 0.726717192533257, 0.233237262702031,         -1.0999819020536, 1.1347663421693, -0.269107905915993,         -0.433218417307571, 0.184868219745804, 1.16165570068378,         0.683788110201355, -0.722453643499035, -0.587583077061067,         -0.217952081664757, -0.0315967642682094, 0.644737605177446,         -2.81772939060932, -0.258598007143378, -0.812822059738883,         -0.667331874948201, -0.976063148516166, 0.166004231550086,         -0.703990248958998, -0.819096821470398, -0.0154503546527277,         1.16979407197972, 0.688093019469736, -0.698354530105951,         -1.55434238955639, 0.873233537800358, -0.724662329791168,         -1.04818971219779, -1.1353841666862, -0.37410750829602,         -0.389540758166342, 0.469186308533027, 0.635907462971676,         0.116299227257785, 0.11812914235915, 0.987309203667009,         -1.72955113828203, -0.446158508020385, -0.0672072158678249,         1.45681759391999, 1.3591725577366, 1.09317511736965,         -0.311967159825356, -2.95472215999891, -0.564743866294391,         -0.59913543570586, 0.377556344767569, -0.294792905605629,         0.42569332107066, 1.72474936049882, 0.892372947424209,         -0.562012706382335, -0.576259247560327, 0.26758481626852,         -0.535009679036365, 2.14997859366183, -1.42297852912758,         0.0448735454371089, -0.800251220618607, 1.16777950782666,         -1.31845493066848, -1.75948941480594, 0.574418620790539,         0.0173206471367888, -0.233865479351139, -1.46393048092979,         -0.376256834880135, -0.163172666417521, -0.801738294538558,         0.56463160549001, 1.28016615465111, 0.0239779910545641,         -1.14173753966622, -1.251466271066, -1.32475171321478,         0.861296944630143, 0.878536590512995, 0.616414241046165,         -0.281493112410781, 0.246763782323527, 0.730763880374178,         0.802796487275384, -0.423009080928403, -0.450912742006031,         -0.0550878824270805, 0.398274817111832, 0.784201242171063,         0.589446803450392, 0.791545398764313, -0.654366043820853,         1.74097815931376, 1.30780189037663, -0.295073909025553,         0.188147283961327, -0.313714623076159), x = c(0.113254084384586,         -0.565095410492474, 0.0807003872444948, -0.695771406588942,         -1.09620213295198, 0.804440557754521, 0.656644119934708,         -0.568030677344538, 1.27278584148814, -0.192543915756971,         -0.283665218588817, -0.953671712939253, -0.0243506460341634,         -0.136985964857522, 0.0675183911210883, 0.445168359831976,         0.906600388246007, 0.327410566460573, 0.992561626752092,         1.06540057402709, -2.93048205538058, -0.362773742987749,         0.569932538092558, -1.11963547230504, -0.960650358604092,         0.273736471912206, -0.441423288640161, -1.73148781767851,         0.905854843976373, -0.840839641506773, 0.386347854925968,         0.412430114457017, 1.52126864304235, 0.196564235460822,         0.665610352836782, 1.14059109224811, -0.40638112804759,         -1.65556135368929, 0.1429300364911, 1.32591430830883,         -1.40627766063955, 1.01213161499515, -0.0601308429578255,         0.0994814242802729, -0.349221797505872, 1.03685327959033,         1.42415647914164, 1.57084879138618, -0.967400733067285,         0.759285844342793, -0.376189654458143, -0.983409413915195,         0.389895101103217, -0.0179507137482475, 0.791724605090037,         1.79239787563701, 1.03671688493632, -0.695685615560389,         0.139622664969318, 1.41324549389255, 1.17443759629564,         -1.58478158266429, 0.946429920633797, -0.340514085118673,         -0.625362690703707, -1.10120222898271, -0.31179546007352,         0.688656505383638, 1.43527187786736, 0.138907098200222,         -0.0730523864217389, -0.202335938111801, 0.95379933574217,         -1.08119344744204, 0.250018704551322, 1.02162198057182,         1.06185151113365, 0.417070210072757, -1.16236615136998,         -0.821084729814662, -0.720488257715399, -1.44327196869698,         0.0400203344434218, 1.22294668396681, -2.44669391662971,         0.758387891981524, -0.202661654123509, -0.76913384719501,         0.770008811410607, 0.64838515883954, 0.0962173786188587,         -0.919643353169371, -0.704861777237915, -1.61723406227759,         1.88089390836698, -0.155594360847613, -0.754513748781243,         -2.16095244416957, -0.429461680300403, -0.549127904639596        )), class = \"data.frame\", row.names = c(NA, -100L)),         model.type = \"sem\", int.ov.free = TRUE, int.lv.free = FALSE,         auto.fix.first = TRUE, auto.fix.single = TRUE, auto.var = TRUE,         auto.cov.lv.x = TRUE, auto.cov.y = TRUE, auto.th = TRUE,         auto.delta = TRUE, auto.efa = TRUE), timing = list(init = c(elapsed = 0),         ov.names = c(elapsed = 0.00199999999999889), Options = c(elapsed = 0.00100000000000122),         Data = c(elapsed = 0.000999999999997669), ParTable = c(elapsed = 0.00300000000000011),         SampleStats = c(elapsed = 0.00100000000000122), h1 = c(elapsed = 0),         bounds = c(elapsed = 0), start = c(elapsed = 0.00100000000000122),         Model = c(elapsed = 0.00300000000000011), cache = c(elapsed = 0),         optim = c(elapsed = 0.00199999999999889), implied = c(elapsed = 0),         loglik = c(elapsed = 0.00100000000000122), vcov = c(elapsed = 0),         test = c(elapsed = 0), Fit = c(elapsed = 0.000999999999997669),         baseline = c(elapsed = 0.0180000000000007), rotation = c(elapsed = 0),         total = c(elapsed = 0.0339999999999989)), Options = list(        model.type = \"sem\", mimic = \"lavaan\", meanstructure = FALSE,         int.ov.free = TRUE, int.lv.free = FALSE, marker.int.zero = FALSE,         conditional.x = FALSE, fixed.x = TRUE, orthogonal = FALSE,         orthogonal.x = FALSE, orthogonal.y = FALSE, std.lv = FALSE,         correlation = FALSE, effect.coding = \"\", ceq.simple = FALSE,         parameterization = \"delta\", auto.fix.first = TRUE, auto.fix.single = TRUE,         auto.var = TRUE, auto.cov.lv.x = TRUE, auto.cov.y = TRUE,         auto.th = TRUE, auto.delta = TRUE, auto.efa = TRUE, rotation = \"geomin\",         rotation.se = \"bordered\", rotation.args = list(orthogonal = FALSE,             row.weights = \"none\", std.ov = TRUE, geomin.epsilon = 0.001,             orthomax.gamma = 1, cf.gamma = 0, oblimin.gamma = 0,             promax.kappa = 4, target = structure(numeric(0), dim = c(0L,             0L)), target.mask = structure(numeric(0), dim = c(0L,             0L)), rstarts = 30L, algorithm = \"gpa\", reflect = TRUE,             order.lv.by = \"index\", gpa.tol = 1e-05, tol = 1e-08,             warn = FALSE, verbose = FALSE, jac.init.rot = TRUE,             max.iter = 10000L), std.ov = FALSE, missing = \"listwise\",         sampling.weights.normalization = \"total\", samplestats = TRUE,         sample.cov.rescale = TRUE, sample.cov.robust = FALSE,         sample.icov = TRUE, ridge = FALSE, ridge.constant = \"default\",         group.label = NULL, group.equal = character(0), group.partial = character(0),         group.w.free = FALSE, level.label = NULL, estimator = \"ML\",         estimator.orig = \"ML\", estimator.args = list(), likelihood = \"normal\",         link = \"default\", representation = \"LISREL\", do.fit = TRUE,         bounds = \"none\", rstarts = 0L, se = \"standard\", test = \"standard\",         information = c(\"expected\", \"expected\"), h1.information = c(\"structured\",         \"structured\"), observed.information = c(\"hessian\", \"hessian\"        ), information.meat = \"first.order\", h1.information.meat = \"structured\",         omega.information = \"expected\", omega.h1.information = \"unstructured\",         omega.information.meat = \"first.order\", omega.h1.information.meat = \"unstructured\",         scaled.test = \"standard\", ug2.old.approach = FALSE, bootstrap = 1000L,         gamma.n.minus.one = FALSE, gamma.unbiased = FALSE, control = list(),         optim.method = \"nlminb\", optim.attempts = 4L, optim.force.converged = FALSE,         optim.gradient = \"analytic\", optim.init_nelder_mead = FALSE,         optim.var.transform = \"none\", optim.parscale = \"none\",         optim.partrace = FALSE, optim.dx.tol = 0.001, optim.bounds = list(            lower = character(0), upper = character(0)), em.iter.max = 10000L,         em.fx.tol = 1e-08, em.dx.tol = 1e-04, em.zerovar.offset = 1e-04,         em.h1.iter.max = 500L, em.h1.tol = 1e-05, em.h1.warn = TRUE,         optim.gn.iter.max = 200L, optim.gn.stephalf.max = 10L,         optim.gn.tol.x = 1e-05, integration.ngh = 21L, parallel = \"no\",         ncpus = 1L, cl = NULL, iseed = NULL, zero.add = c(0.5,         0), zero.keep.margins = TRUE, zero.cell.warn = FALSE,         allow.empty.cell = FALSE, cat.wls.w = TRUE, start = \"default\",         check.start = TRUE, check.post = TRUE, check.gradient = TRUE,         check.vcov = TRUE, check.lv.names = TRUE, check.lv.interaction = TRUE,         check.delta.cat.mediator = TRUE, h1 = TRUE, baseline = TRUE,         baseline.conditional.x.free.slopes = TRUE, implied = TRUE,         loglik = TRUE, store.vcov = \"default\", parser = \"new\",         categorical = FALSE, .categorical = FALSE, .clustered = FALSE,         .multilevel = FALSE), ParTable = list(id = 1:6, lhs = c(\"m\",     \"y\", \"y\", \"m\", \"y\", \"x\"), op = c(\"~\", \"~\", \"~\", \"~~\", \"~~\",     \"~~\"), rhs = c(\"x\", \"m\", \"x\", \"m\", \"y\", \"x\"), user = c(1L,     1L, 1L, 0L, 0L, 0L), block = c(1L, 1L, 1L, 1L, 1L, 1L), group = c(1L,     1L, 1L, 1L, 1L, 1L), free = c(1L, 2L, 3L, 4L, 5L, 0L), ustart = c(NA_real_,     NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), exo = c(0L,     0L, 0L, 0L, 0L, 1L), label = c(\"\", \"\", \"\", \"\", \"\", \"\"), plabel = c(\".p1.\",     \".p2.\", \".p3.\", \".p4.\", \".p5.\", \".p6.\"), start = c(0.263756087698713,     0.587713838880244, -0.125031439877835, 0.97578634604425,     0.602708371528169, 0.946276192936508), est = c(0.263756087698713,     0.587713838880244, -0.125031439877835, 0.97578634604425,     0.602708371528169, 0.946276192936508), se = c(0.101547307208166,     0.0785916204618162, 0.0824557886004312, 0.137997028455426,     0.085235835317094, 0)), pta = list(names = c(\"id\", \"lhs\",     \"op\", \"rhs\", \"user\", \"block\", \"group\", \"free\", \"ustart\",     \"exo\", \"label\", \"plabel\", \"start\", \"est\", \"se\"), vidx = list(        ov = list(1:3), ov.x = list(3L), ov.nox = list(1:2),         ov.model = list(1:3), ov.y = list(2L), ov.num = list(            1:3), ov.ord = list(integer(0)), ov.ind = list(integer(0)),         ov.orphan = list(3L), ov.interaction = list(integer(0)),         ov.efa = list(integer(0)), th = list(integer(0)), th.mean = list(            1:2), lv = list(integer(0)), lv.regular = list(integer(0)),         lv.formative = list(integer(0)), lv.x = list(integer(0)),         lv.y = list(integer(0)), lv.nox = list(integer(0)), lv.nonnormal = list(            integer(0)), lv.interaction = list(integer(0)), lv.efa = list(            integer(0)), lv.rv = list(integer(0)), lv.ind = list(            integer(0)), lv.marker = list(integer(0)), eqs.y = list(            integer(0)), eqs.x = list(integer(0))), meanstructure = FALSE,         nblocks = 1L, ngroups = 1L, nlevels = 1L, nvar = list(            3L), nfac = list(0L), nfac.nonnormal = list(0L),         th.idx = list(c(0, 0)), vnames = list(ov = list(c(\"m\",         \"y\", \"x\")), ov.x = list(\"x\"), ov.nox = list(c(\"m\", \"y\"        )), ov.model = list(c(\"m\", \"y\", \"x\")), ov.y = list(\"y\"),             ov.num = list(c(\"m\", \"y\", \"x\")), ov.ord = list(character(0)),             ov.ind = list(character(0)), ov.orphan = list(\"x\"),             ov.interaction = list(character(0)), ov.efa = list(                character(0)), th = list(character(0)), th.mean = list(                c(\"m\", \"y\")), lv = list(character(0)), lv.regular = list(                character(0)), lv.formative = list(character(0)),             lv.x = list(character(0)), lv.y = list(character(0)),             lv.nox = list(character(0)), lv.nonnormal = list(                character(0)), lv.interaction = list(character(0)),             lv.efa = list(character(0)), lv.rv = list(character(0)),             lv.ind = list(character(0)), lv.marker = list(structure(character(0), names = character(0))),             eqs.y = list(c(\"m\", \"y\")), eqs.x = list(c(\"x\", \"m\"            )))), Data = new(\"lavData\", data.type = \"full\", group = character(0),         ngroups = 1L, group.label = character(0), block.label = character(0),         cluster = character(0), nlevels = 1L, level.label = character(0),         std.ov = FALSE, nobs = list(100L), norig = list(100L),         ov.names = list(c(\"m\", \"y\", \"x\")), ov.names.x = list(            \"x\"), ov.names.l = list(), ordered = character(0),         weights = list(NULL), sampling.weights = character(0),         ov = list(name = c(\"m\", \"y\", \"x\"), idx = 1:3, nobs = c(100L,         100L, 100L), type = c(\"numeric\", \"numeric\", \"numeric\"        ), exo = c(0L, 0L, 1L), user = c(0L, 0L, 0L), mean = c(-0.0668581545097908,         -0.106350127789543, -0.00754195696291672), var = c(1.05213757681507,         0.950103996638345, 0.955834538319705), nlev = c(0L, 0L,         0L), lnam = c(\"\", \"\", \"\")), case.idx = list(1:100), missing = \"listwise\",         Mp = list(NULL), Rp = list(NULL), Lp = list(NULL), eXo = list(            structure(c(0.113254084384586, -0.565095410492474,             0.0807003872444948, -0.695771406588942, -1.09620213295198,             0.804440557754521, 0.656644119934708, -0.568030677344538,             1.27278584148814, -0.192543915756971, -0.283665218588817,             -0.953671712939253, -0.0243506460341634, -0.136985964857522,             0.0675183911210883, 0.445168359831976, 0.906600388246007,             0.327410566460573, 0.992561626752092, 1.06540057402709,             -2.93048205538058, -0.362773742987749, 0.569932538092558,             -1.11963547230504, -0.960650358604092, 0.273736471912206,             -0.441423288640161, -1.73148781767851, 0.905854843976373,             -0.840839641506773, 0.386347854925968, 0.412430114457017,             1.52126864304235, 0.196564235460822, 0.665610352836782,             1.14059109224811, -0.40638112804759, -1.65556135368929,             0.1429300364911, 1.32591430830883, -1.40627766063955,             1.01213161499515, -0.0601308429578255, 0.0994814242802729,             -0.349221797505872, 1.03685327959033, 1.42415647914164,             1.57084879138618, -0.967400733067285, 0.759285844342793,             -0.376189654458143, -0.983409413915195, 0.389895101103217,             -0.0179507137482475, 0.791724605090037, 1.79239787563701,             1.03671688493632, -0.695685615560389, 0.139622664969318,             1.41324549389255, 1.17443759629564, -1.58478158266429,             0.946429920633797, -0.340514085118673, -0.625362690703707,             -1.10120222898271, -0.31179546007352, 0.688656505383638,             1.43527187786736, 0.138907098200222, -0.0730523864217389,             -0.202335938111801, 0.95379933574217, -1.08119344744204,             0.250018704551322, 1.02162198057182, 1.06185151113365,             0.417070210072757, -1.16236615136998, -0.821084729814662,             -0.720488257715399, -1.44327196869698, 0.0400203344434218,             1.22294668396681, -2.44669391662971, 0.758387891981524,             -0.202661654123509, -0.76913384719501, 0.770008811410607,             0.64838515883954, 0.0962173786188587, -0.919643353169371,             -0.704861777237915, -1.61723406227759, 1.88089390836698,             -0.155594360847613, -0.754513748781243, -2.16095244416957,             -0.429461680300403, -0.549127904639596), dim = c(100L,             1L))), X = list(structure(c(-2.70768557567576, -0.576424186391143,         -1.39468505766435, 0.352940010333777, -0.751073663742573,         1.10112215068494, 0.64327302939098, -0.14938407921516,         0.300648055349008, -0.402390064288113, 0.105217507177305,         -1.34330869257752, 0.634499444507559, -0.417056234145238,         -0.689444327136714, -0.177541921664477, 2.06030020004644,         -1.57880113086557, -0.0350236098318482, 0.421299816312967,         -1.39203840499182, -0.501157870159741, 0.535716829619804,         -0.123625729763123, -0.93091594519879, 0.623417442289001,         0.0387895076971012, 0.135281955102164, -0.994372384112306,         -0.984797486284789, -0.0679221207565718, 1.03860556835361,         -0.0482831620584835, -0.926342120663365, 0.935881382705561,         0.786099292294036, -1.29113001718605, 1.45573724598723,         1.4725233179124, -0.927198688152777, 1.63230692596192,         -1.34583275813779, 0.0793030738542954, -1.05886647219432,         -0.464410287779807, -0.0216609328844941, 0.735259680279112,         -0.601296999843413, -2.92027803029758, 0.136387789921684,         -0.825163111975978, -0.0939501666089703, -0.692458238792383,         0.750387203782311, 0.265360417649642, 1.11331484146445,         -0.638097303562536, -0.410304001023256, 0.370062000967495,         0.338711965605387, 1.93018245881115, -2.34793004513222,         1.00522674280094, -0.0883997024919002, 0.714544663803622,         -0.424617963014997, -2.70709761303748, 0.607543177964685,         0.222261024312942, -0.902112703574491, -0.648147130507864,         -0.00760114071435173, 2.62525924505497, -0.144851885573487,         -0.859565159915909, 2.12241524335178, -0.0997657574931206,         -0.66638718599577, -1.53849269361302, -0.889098393887787,         1.62988543708224, 0.431822900600543, 0.714607860490375,         0.506755630638367, -0.463928148243183, 0.78965053201951,         0.145108781075116, -0.082828795105383, 1.14089526314909,         0.0363021530959265, 0.272123282993949, -1.13202707172738,         1.29955264357712, 0.843436834835929, -1.16451599782668,         -0.253034129698682, 0.298175122998673, -0.187784712338332,         0.596964924803611, -0.589869024170972, -2.39769214926222,         -0.0271342381632562, -2.03028139257948, 0.726717192533257,         0.233237262702031, -1.0999819020536, 1.1347663421693,         -0.269107905915993, -0.433218417307571, 0.184868219745804,         1.16165570068378, 0.683788110201355, -0.722453643499035,         -0.587583077061067, -0.217952081664757, -0.0315967642682094,         0.644737605177446, -2.81772939060932, -0.258598007143378,         -0.812822059738883, -0.667331874948201, -0.976063148516166,         0.166004231550086, -0.703990248958998, -0.819096821470398,         -0.0154503546527277, 1.16979407197972, 0.688093019469736,         -0.698354530105951, -1.55434238955639, 0.873233537800358,         -0.724662329791168, -1.04818971219779, -1.1353841666862,         -0.37410750829602, -0.389540758166342, 0.469186308533027,         0.635907462971676, 0.116299227257785, 0.11812914235915,         0.987309203667009, -1.72955113828203, -0.446158508020385,         -0.0672072158678249, 1.45681759391999, 1.3591725577366,         1.09317511736965, -0.311967159825356, -2.95472215999891,         -0.564743866294391, -0.59913543570586, 0.377556344767569,         -0.294792905605629, 0.42569332107066, 1.72474936049882,         0.892372947424209, -0.562012706382335, -0.576259247560327,         0.26758481626852, -0.535009679036365, 2.14997859366183,         -1.42297852912758, 0.0448735454371089, -0.800251220618607,         1.16777950782666, -1.31845493066848, -1.75948941480594,         0.574418620790539, 0.0173206471367888, -0.233865479351139,         -1.46393048092979, -0.376256834880135, -0.163172666417521,         -0.801738294538558, 0.56463160549001, 1.28016615465111,         0.0239779910545641, -1.14173753966622, -1.251466271066,         -1.32475171321478, 0.861296944630143, 0.878536590512995,         0.616414241046165, -0.281493112410781, 0.246763782323527,         0.730763880374178, 0.802796487275384, -0.423009080928403,         -0.450912742006031, -0.0550878824270805, 0.398274817111832,         0.784201242171063, 0.589446803450392, 0.791545398764313,         -0.654366043820853, 1.74097815931376, 1.30780189037663,         -0.295073909025553, 0.188147283961327, -0.313714623076159,         0.113254084384586, -0.565095410492474, 0.0807003872444948,         -0.695771406588942, -1.09620213295198, 0.804440557754521,         0.656644119934708, -0.568030677344538, 1.27278584148814,         -0.192543915756971, -0.283665218588817, -0.953671712939253,         -0.0243506460341634, -0.136985964857522, 0.0675183911210883,         0.445168359831976, 0.906600388246007, 0.327410566460573,         0.992561626752092, 1.06540057402709, -2.93048205538058,         -0.362773742987749, 0.569932538092558, -1.11963547230504,         -0.960650358604092, 0.273736471912206, -0.441423288640161,         -1.73148781767851, 0.905854843976373, -0.840839641506773,         0.386347854925968, 0.412430114457017, 1.52126864304235,         0.196564235460822, 0.665610352836782, 1.14059109224811,         -0.40638112804759, -1.65556135368929, 0.1429300364911,         1.32591430830883, -1.40627766063955, 1.01213161499515,         -0.0601308429578255, 0.0994814242802729, -0.349221797505872,         1.03685327959033, 1.42415647914164, 1.57084879138618,         -0.967400733067285, 0.759285844342793, -0.376189654458143,         -0.983409413915195, 0.389895101103217, -0.0179507137482475,         0.791724605090037, 1.79239787563701, 1.03671688493632,         -0.695685615560389, 0.139622664969318, 1.41324549389255,         1.17443759629564, -1.58478158266429, 0.946429920633797,         -0.340514085118673, -0.625362690703707, -1.10120222898271,         -0.31179546007352, 0.688656505383638, 1.43527187786736,         0.138907098200222, -0.0730523864217389, -0.202335938111801,         0.95379933574217, -1.08119344744204, 0.250018704551322,         1.02162198057182, 1.06185151113365, 0.417070210072757,         -1.16236615136998, -0.821084729814662, -0.720488257715399,         -1.44327196869698, 0.0400203344434218, 1.22294668396681,         -2.44669391662971, 0.758387891981524, -0.202661654123509,         -0.76913384719501, 0.770008811410607, 0.64838515883954,         0.0962173786188587, -0.919643353169371, -0.704861777237915,         -1.61723406227759, 1.88089390836698, -0.155594360847613,         -0.754513748781243, -2.16095244416957, -0.429461680300403,         -0.549127904639596), dim = c(100L, 3L)))), SampleStats = new(\"lavSampleStats\",         var = list(c(1.04161620104692, 0.940602956671962, 0.946276192936508        )), cov = list(structure(c(1.04161620104692, 0.58096614588402,         0.249586106531366, 0.58096614588402, 0.940602956671962,         0.0283709338757545, 0.249586106531366, 0.0283709338757545,         0.946276192936508), dim = c(3L, 3L))), mean = list(c(-0.0668581545097908,         -0.106350127789543, -0.00754195696291672)), th = list(            NULL), th.idx = list(NULL), th.names = list(NULL),         res.cov = list(NULL), res.var = list(NULL), res.th = list(            NULL), res.th.nox = list(NULL), res.slopes = list(            NULL), res.int = list(NULL), mean.x = list(-0.00754195696291672),         cov.x = list(structure(0.946276192936508, dim = c(1L,         1L))), bifreq = list(NULL), group.w = list(1), nobs = list(            100L), ntotal = 100L, ngroups = 1L, x.idx = list(            3L), icov = list(structure(c(1.59790685278006, -0.975121413014545,         -0.392221898454332, -0.975121413014545, 1.65917721943118,         0.207449316757983, -0.392221898454332, 0.207449316757983,         1.15400515603642), dim = c(3L, 3L))), cov.log.det = list(            -0.586054246657473), res.icov = list(NULL), res.cov.log.det = list(            NULL), ridge = 0, WLS.obs = list(c(1.04161620104692,         0.58096614588402, 0.249586106531366, 0.940602956671962,         0.0283709338757545, 0.946276192936508)), WLS.V = list(            NULL), WLS.VD = list(NULL), NACOV = list(NULL), NACOV.user = FALSE,         missing.flag = FALSE, missing = list(NULL), missing.h1 = list(            NULL), YLp = list(NULL), zero.cell.tables = list(            NULL)), Model = new(\"lavModel\", GLIST = list(lambda = structure(c(1,     0, 0, 0, 1, 0, 0, 0, 1), dim = c(3L, 3L)), theta = structure(c(0,     0, 0, 0, 0, 0, 0, 0, 0), dim = c(3L, 3L)), psi = structure(c(0.97578634604425,     0, 0, 0, 0.602708371528169, 0, 0, 0, 0.946276192936508), dim = c(3L,     3L)), beta = structure(c(0, 0.587713838880244, 0, 0, 0, 0,     0.263756087698713, -0.125031439877835, 0), dim = c(3L, 3L    ))), dimNames = list(list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\"    )), list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")), list(c(\"m\",     \"y\", \"x\"), c(\"m\", \"y\", \"x\")), list(c(\"m\", \"y\", \"x\"), c(\"m\",     \"y\", \"x\"))), isSymmetric = c(FALSE, TRUE, TRUE, FALSE), mmSize = c(9L,     NA, NA, 9L), representation = \"LISREL\", modprop = list(uvreg = FALSE,         uvord = FALSE, mvreg = FALSE, nexo = 0L, acyclic = TRUE,         bowfree = TRUE), meanstructure = FALSE, correlation = FALSE,         categorical = FALSE, multilevel = FALSE, group.w.free = FALSE,         link = \"default\", nblocks = 1L, ngroups = 1L, nefa = 0L,         nmat = 4L, nvar = 3L, num.idx = list(1:3), th.idx = list(            NULL), nx.free = 5L, nx.unco = 5L, nx.user = 6L,         m.free.idx = list(integer(0), integer(0), c(1L, 5L),             c(2L, 7L, 8L)), x.free.idx = list(integer(0), integer(0),             4:5, c(2L, 1L, 3L)), x.unco.idx = list(integer(0),             integer(0), 4:5, c(2L, 1L, 3L)), m.user.idx = list(            integer(0), integer(0), c(1L, 5L, 9L), c(2L, 7L,             8L)), x.user.idx = list(integer(0), integer(0), 4:6,             c(2L, 1L, 3L)), x.def.idx = integer(0), x.ceq.idx = integer(0),         x.cin.idx = integer(0), x.free.var.idx = 4:5, ceq.simple.only = FALSE,         ceq.simple.K = structure(numeric(0), dim = c(0L, 0L)),         eq.constraints = FALSE, eq.constraints.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints.k0 = numeric(0), def.function = function ()         NULL, ceq.function = function ()         NULL, ceq.jacobian = function ()         NULL, ceq.JAC = structure(numeric(0), dim = c(0L, 5L)),         ceq.rhs = numeric(0), ceq.linear.idx = integer(0), ceq.nonlinear.idx = integer(0),         cin.simple.only = FALSE, cin.function = function ()         NULL, cin.jacobian = function ()         NULL, cin.JAC = structure(numeric(0), dim = c(0L, 5L)),         cin.rhs = numeric(0), cin.linear.idx = integer(0), cin.nonlinear.idx = integer(0),         ceq.efa.JAC = structure(numeric(0), dim = c(0L, 0L)),         con.jac = structure(numeric(0), dim = c(0L, 0L)), con.lambda = numeric(0),         nexo = 1L, conditional.x = FALSE, fixed.x = TRUE, parameterization = \"delta\",         ov.x.dummy.ov.idx = list(3L), ov.x.dummy.lv.idx = list(            3L), ov.y.dummy.ov.idx = list(1:2), ov.y.dummy.lv.idx = list(            1:2), ov.efa.idx = list(NULL), lv.efa.idx = list(            NULL), rv.ov = list(), rv.lv = list(), H = list(),         lv.order = list(), estimator = \"ML\", estimator.args = list()),     Cache = list(NULL), Fit = new(\"Fit\", npar = 5L, x = c(0.263756087698713,     0.587713838880244, -0.125031439877835, 0.97578634604425,     0.602708371528169), partrace = structure(numeric(0), dim = c(0L,     0L)), start = c(0.263756087698713, 0.587713838880244, -0.125031439877835,     0.97578634604425, 0.602708371528169, 0.946276192936508),         est = c(0.263756087698713, 0.587713838880244, -0.125031439877835,         0.97578634604425, 0.602708371528169, 0.946276192936508        ), se = c(0.101547307208166, 0.0785916204618162, 0.0824557886004312,         0.137997028455426, 0.085235835317094, 0), fx = 0, fx.group = 0,         logl = NA_real_, logl.group = NA_real_, iterations = 1L,         converged = TRUE, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14),         Sigma.hat = list(structure(c(1.04161620104692, 0.58096614588402,         0.249586106531366, 0.58096614588402, 0.940602956671962,         0.0283709338757545, 0.249586106531366, 0.0283709338757545,         0.946276192936508), dim = c(3L, 3L))), Mu.hat = list(            NULL), TH = list(NULL), test = structure(list(standard = list(            test = \"standard\", stat = 0, stat.group = 0, df = 0L,             refdistr = \"chisq\", pvalue = NA_real_)), info = list(            ngroups = 1L, group.label = character(0), information = c(\"expected\",             \"expected\"), h1.information = c(\"structured\", \"structured\"            ), observed.information = c(\"hessian\", \"hessian\")))),     boot = list(), optim = list(x = c(0.263756087698713, 0.587713838880244,     -0.125031439877835, 0.97578634604425, 0.602708371528169),         dx = c(4.14509393631811e-34, -1.1668354036094e-33, -1.15128546934127e-17,         1.18893704242995e-34, -2.38833384008241e-18), npar = 5L,         iterations = 1L, converged = TRUE, warn.txt = \"\", parscale = c(1,         1, 1, 1, 1), fx = 0, fx.group = 0, logl.group = NA_real_,         logl = NA_real_, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14)),     loglik = list(loglik = -257.246033999823, loglik.group = -257.246033999823,         npar = 5L, ntotal = 100L, AIC = 524.492067999646, BIC = 537.517918929586,         BIC2 = 521.726662914327, estimator = \"ML\", conditional.x = FALSE,         fixed.x = TRUE), implied = list(cov = list(structure(c(1.04161620104692,     0.58096614588402, 0.249586106531366, 0.58096614588402, 0.940602956671962,     0.0283709338757545, 0.249586106531366, 0.0283709338757545,     0.946276192936508), dim = c(3L, 3L))), mean = list(NULL),         th = list(NULL), group.w = list(NULL)), vcov = list(se = \"standard\",         information = \"expected\", vcov = structure(c(0.0103118556012296,         -4.31398387866009e-18, -4.79849817395093e-18, -1.12753118039912e-17,         -1.03107283781019e-19, -3.77494668748721e-18, 0.00617664280681417,         -0.00162912714183771, -7.09635829027425e-18, -6.23067602751374e-18,         -3.09449937387509e-18, -0.00162912714183771, 0.00679895707371899,         1.91764219528452e-18, -3.49924239349476e-18, -8.48339730886234e-18,         -9.62235714960355e-18, 2.74310234334466e-18, 0.0190431798625278,         -1.47377057741061e-19, 3.36113449690754e-19, -5.29997030378141e-18,         -3.24478103585796e-18, 6.20628117811153e-19, 0.00726514762220277        ), dim = c(5L, 5L))), test = structure(list(standard = list(        test = \"standard\", stat = 0, stat.group = 0, df = 0L,         refdistr = \"chisq\", pvalue = NA_real_)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\"))),     h1 = list(implied = list(cov = list(structure(c(1.04161620104692,     0.58096614588402, 0.249586106531366, 0.58096614588402, 0.940602956671962,     0.0283709338757545, 0.249586106531366, 0.0283709338757545,     0.946276192936508), dim = c(3L, 3L))), mean = list(c(-0.0668581545097908,     -0.106350127789543, -0.00754195696291672)), th = list(NULL),         group.w = list(1)), logl = list(loglik = -257.246033999823,         loglik.group = -257.246033999823)), baseline = list(partable = list(        id = 1:3, lhs = c(\"m\", \"y\", \"x\"), op = c(\"~~\", \"~~\",         \"~~\"), rhs = c(\"m\", \"y\", \"x\"), user = c(1L, 1L, 1L),         block = c(1L, 1L, 1L), group = c(1L, 1L, 1L), free = c(1L,         2L, 0L), ustart = c(1.04161620104692, 0.940602956671963,         0.946276192936509), exo = c(0L, 0L, 1L), label = c(\"\",         \"\", \"\"), lower = c(0, 0, 0.946276192936509), upper = c(Inf,         Inf, 0.946276192936509), start = c(1.04161620104692,         0.940602956671963, 0.946276192936509), est = c(1.04161620104692,         0.940602956671963, 0.946276192936509), se = c(0.147306775830809,         0.133021345813372, 0)), test = structure(list(standard = list(        test = \"standard\", stat = 51.037283308709, stat.group = 51.037283308709,         df = 3L, refdistr = \"chisq\", pvalue = 4.80342432496172e-11)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\")))),     internal = list(), external = list()), new(\"lavaan\", version = \"0.6-19\",     call = lavaan::lavaan(model = \"\\nm ~ x\\ny ~ m + x\\n\", data = structure(list(        m = c(-1.93960688121213, 1.80629361592663, 1.42154630779917,         -1.51842735713593, 1.48902964768093, 1.49141160257004,         0.598507987371281, 0.381806883049413, 0.197205743233356,         0.794564009492286, -0.744718391949799, -1.22400644991473,         -0.941635207268024, 0.0256886315562456, 0.0888956447301062,         0.642053177178128, 0.772408047831361, 1.33482200620076,         1.03095143776001, 1.33423576708279, 0.568184710143821,         -0.617505044147246, 0.886986084942816, 0.481428843330528,         -0.2979061143484, -1.42696270253796, 0.540485412736717,         0.266985431350899, -0.550892050724136, 0.993308034386241,         1.12084539144617, 1.12571467858157, -2.31454096135433,         -0.782402069166377, 0.424264400117935, -0.863443992435243,         0.64720562432109, 0.310047584634312, 0.787023186242303,         -0.581948040485713, -0.0833292992419118, 0.708328466165495,         1.20383215771471, -0.28566124135585, 0.198893215271352,         -1.54422589948569, 0.991716669168178, 0.246849781340447,         0.428898213061036, -0.272173580550484, 1.86541338703072,         -0.259959342788965, 0.0239123345097733, -0.118567913398039,         0.206761755765737, -0.686422721803577, 0.204951554252457,         0.46949270428276, -1.49424112181172, 0.536837029018374,         -0.703728316442963, 1.4035897938097, 1.30626617972699,         -1.82322297248636, 0.676320422538179, 0.25387522808601,         -0.621087178581455, -0.487016001593305, -1.09061482068991,         0.437215251492525, -1.88543914377571, -0.548027418070103,         0.613679828278171, -0.172297934891305, 0.532971594949359,         0.419085239694755, 2.2253875405536, -0.981747486845679,         1.70028468465349, -1.14881241878608, -0.732161409680165,         -1.16335961364633, -1.63285741878866, 1.51132547756466,         0.576682787113246, 1.1935149845777, -0.585161855935361,         0.0620289832351641, 1.1340178684818, 1.066635589194,         0.801534799134544, 0.134941585426804, -1.35950790866225,         0.259113073336045, -0.233169660248937, -0.612499779028082,         1.94785526097089, -0.499098503590761, 0.768563416510753,         0.82648109276748), y = c(-0.0594767133664763, 1.22124174600818,         2.41962774380316, -0.373713946733307, 0.321478588682759,         0.834483395499648, 0.878736918798367, -1.70613283356462,         0.0158419754615937, 0.433244323231134, -0.578993614135739,         -0.567516767404625, -2.19577251099275, 0.31269373407875,         0.0470713101876, -0.105429002622095, -2.09445535692347,         0.31129032658712, 0.617847315777489, 0.605490850901496,         -0.243055081621224, -0.0301995316217546, -0.345014022157379,         0.846309573028908, 0.566152156470317, 0.115775568675721,         0.962063870223155, -0.171458393591615, -0.297050612358097,         1.5749191866564, 1.08951395206491, 0.86326685771666,         -0.0494683549848034, -0.934065457898941, 0.234010835048536,         0.695417863320383, 0.107278591061355, 0.271935788378825,         0.266488849356989, 0.777641220788783, 0.0756176914418674,         0.412396034471769, 0.0119604272669417, -0.505230157480132,         -1.25953276140883, -0.417400600383708, 1.23007743707499,         -1.03478389602492, 0.562032497459854, 0.148780053175554,         1.10185964144276, -0.0680912356166115, 1.42784990468616,         0.229108632124669, 1.31738622064278, 0.0473808367022872,         0.524510390900592, -0.232679995359172, 1.58327362036932,         0.216616273407547, -0.782690897558324, 1.0329778635781,         1.00749351911579, -0.284829131222528, -0.454187712684133,         0.00813183976657374, 1.05283438235465, -0.661726999568911,         -0.85377744328572, 0.747075617178128, -1.46756140509395,         0.708502506805348, 0.672708184643465, -0.00859664246550657,         -1.11197895685701, -0.0911128338430799, 2.87444577160583,         -0.73847487123867, 1.41685099208688, -1.37526113777773,         -1.7436699467112, 0.0326772892990257, 0.438725114584459,         -0.581809842248721, 1.02105885587716, 0.883353418833466,         -0.609708441715208, 1.54593972571461, -0.303472136865922,         0.431612378397331, 0.979710185440064, -0.869979208784131,         0.27804226124745, 0.0306968079848499, 0.947888826529705,         -0.32642552407672, 0.337307621931564, -1.41046915143887,         -0.804828235608586, 0.284153316388028), x = c(-2.00627595919716,         -1.55956853741809, 1.96270156915108, -0.178318223605633,         1.35762067316143, 1.64899204713817, 0.119484570593628,         0.00362061633761048, 0.19644344592465, 0.679739506730702,         0.801124844964395, -2.01520057977609, 0.0473959880866878,         0.613096606859849, -0.170018481053399, 0.225759524431785,         0.892404141125057, -0.147613098756459, 1.53718231037047,         0.452619354870756, -1.59569425257054, -0.187165292033729,         0.567634468128946, 0.162679116763597, -1.37198301292582,         -1.88395251169133, -0.0680470081647294, 0.687306933852914,         -0.708000728772153, 0.377677268816157, 0.580757739274482,         0.974626092393341, 0.587452509331047, 0.245278778823427,         -1.5660037041717, -0.508128148093857, 0.85827885392439,         0.451866719214799, -0.897904236853133, 0.31901114488487,         -0.0939645105797747, 1.26430832492208, -0.0340093652786424,         -0.388169030127935, -0.260454831909338, -0.877434514087113,         1.29275143050665, 0.165187853607552, -0.603207075711496,         0.398603900801511, 0.858952125458656, -0.421912468569384,         -0.305488889429697, -0.0591880145084799, -2.00187218795239,         0.155436421357447, 0.0425622275156778, -0.262039198794157,         -1.0211932583223, 1.06535710343492, -0.457590837875523,         0.135303912879276, 2.11278759570127, -0.591833695386405,         -0.668737894045782, 0.153878740931465, -0.285391611599252,         -0.492696439200976, 0.409771539388102, 0.229356450786856,         -1.07462563331733, -1.38075085443847, 0.598233241445688,         -0.839468642147749, -0.955425060047348, 1.23621807067256,         0.0759841521696002, -0.539572907634778, 0.77353811942751,         1.30430052382949, 0.985109974109274, -1.01172151068618,         -0.606029025718392, 0.316726055506865, -1.36469110864529,         -0.381966279527664, -0.0142927411517516, -0.0654181319989657,         0.223432418861722, 0.183182166678893, 0.890661242229158,         -0.0530718448200924, -0.829858115515082, -0.121029097825109,         -0.209658043434838, 0.0395895617127639, 1.48099019747618,         0.566660058392043, 1.78958035863141, 1.11404785115473        )), class = \"data.frame\", row.names = c(NA, -100L)),         model.type = \"sem\", int.ov.free = TRUE, int.lv.free = FALSE,         auto.fix.first = TRUE, auto.fix.single = TRUE, auto.var = TRUE,         auto.cov.lv.x = TRUE, auto.cov.y = TRUE, auto.th = TRUE,         auto.delta = TRUE, auto.efa = TRUE), timing = list(init = c(elapsed = 0),         ov.names = c(elapsed = 0.000999999999997669), Options = c(elapsed = 0.00200000000000244),         Data = c(elapsed = 0.000999999999997669), ParTable = c(elapsed = 0.00300000000000011),         SampleStats = c(elapsed = 0.00100000000000122), h1 = c(elapsed = 0),         bounds = c(elapsed = 0), start = c(elapsed = 0.00100000000000122),         Model = c(elapsed = 0.00399999999999778), cache = c(elapsed = 0),         optim = c(elapsed = 0.00200000000000244), implied = c(elapsed = 0),         loglik = c(elapsed = 0.000999999999997669), vcov = c(elapsed = 0),         test = c(elapsed = 0.00100000000000122), Fit = c(elapsed = 0),         baseline = c(elapsed = 0.0120000000000005), rotation = c(elapsed = 0),         total = c(elapsed = 0.0289999999999999)), Options = list(        model.type = \"sem\", mimic = \"lavaan\", meanstructure = FALSE,         int.ov.free = TRUE, int.lv.free = FALSE, marker.int.zero = FALSE,         conditional.x = FALSE, fixed.x = TRUE, orthogonal = FALSE,         orthogonal.x = FALSE, orthogonal.y = FALSE, std.lv = FALSE,         correlation = FALSE, effect.coding = \"\", ceq.simple = FALSE,         parameterization = \"delta\", auto.fix.first = TRUE, auto.fix.single = TRUE,         auto.var = TRUE, auto.cov.lv.x = TRUE, auto.cov.y = TRUE,         auto.th = TRUE, auto.delta = TRUE, auto.efa = TRUE, rotation = \"geomin\",         rotation.se = \"bordered\", rotation.args = list(orthogonal = FALSE,             row.weights = \"none\", std.ov = TRUE, geomin.epsilon = 0.001,             orthomax.gamma = 1, cf.gamma = 0, oblimin.gamma = 0,             promax.kappa = 4, target = structure(numeric(0), dim = c(0L,             0L)), target.mask = structure(numeric(0), dim = c(0L,             0L)), rstarts = 30L, algorithm = \"gpa\", reflect = TRUE,             order.lv.by = \"index\", gpa.tol = 1e-05, tol = 1e-08,             warn = FALSE, verbose = FALSE, jac.init.rot = TRUE,             max.iter = 10000L), std.ov = FALSE, missing = \"listwise\",         sampling.weights.normalization = \"total\", samplestats = TRUE,         sample.cov.rescale = TRUE, sample.cov.robust = FALSE,         sample.icov = TRUE, ridge = FALSE, ridge.constant = \"default\",         group.label = NULL, group.equal = character(0), group.partial = character(0),         group.w.free = FALSE, level.label = NULL, estimator = \"ML\",         estimator.orig = \"ML\", estimator.args = list(), likelihood = \"normal\",         link = \"default\", representation = \"LISREL\", do.fit = TRUE,         bounds = \"none\", rstarts = 0L, se = \"standard\", test = \"standard\",         information = c(\"expected\", \"expected\"), h1.information = c(\"structured\",         \"structured\"), observed.information = c(\"hessian\", \"hessian\"        ), information.meat = \"first.order\", h1.information.meat = \"structured\",         omega.information = \"expected\", omega.h1.information = \"unstructured\",         omega.information.meat = \"first.order\", omega.h1.information.meat = \"unstructured\",         scaled.test = \"standard\", ug2.old.approach = FALSE, bootstrap = 1000L,         gamma.n.minus.one = FALSE, gamma.unbiased = FALSE, control = list(),         optim.method = \"nlminb\", optim.attempts = 4L, optim.force.converged = FALSE,         optim.gradient = \"analytic\", optim.init_nelder_mead = FALSE,         optim.var.transform = \"none\", optim.parscale = \"none\",         optim.partrace = FALSE, optim.dx.tol = 0.001, optim.bounds = list(            lower = character(0), upper = character(0)), em.iter.max = 10000L,         em.fx.tol = 1e-08, em.dx.tol = 1e-04, em.zerovar.offset = 1e-04,         em.h1.iter.max = 500L, em.h1.tol = 1e-05, em.h1.warn = TRUE,         optim.gn.iter.max = 200L, optim.gn.stephalf.max = 10L,         optim.gn.tol.x = 1e-05, integration.ngh = 21L, parallel = \"no\",         ncpus = 1L, cl = NULL, iseed = NULL, zero.add = c(0.5,         0), zero.keep.margins = TRUE, zero.cell.warn = FALSE,         allow.empty.cell = FALSE, cat.wls.w = TRUE, start = \"default\",         check.start = TRUE, check.post = TRUE, check.gradient = TRUE,         check.vcov = TRUE, check.lv.names = TRUE, check.lv.interaction = TRUE,         check.delta.cat.mediator = TRUE, h1 = TRUE, baseline = TRUE,         baseline.conditional.x.free.slopes = TRUE, implied = TRUE,         loglik = TRUE, store.vcov = \"default\", parser = \"new\",         categorical = FALSE, .categorical = FALSE, .clustered = FALSE,         .multilevel = FALSE), ParTable = list(id = 1:6, lhs = c(\"m\",     \"y\", \"y\", \"m\", \"y\", \"x\"), op = c(\"~\", \"~\", \"~\", \"~~\", \"~~\",     \"~~\"), rhs = c(\"x\", \"m\", \"x\", \"m\", \"y\", \"x\"), user = c(1L,     1L, 1L, 0L, 0L, 0L), block = c(1L, 1L, 1L, 1L, 1L, 1L), group = c(1L,     1L, 1L, 1L, 1L, 1L), free = c(1L, 2L, 3L, 4L, 5L, 0L), ustart = c(NA_real_,     NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), exo = c(0L,     0L, 0L, 0L, 0L, 1L), label = c(\"\", \"\", \"\", \"\", \"\", \"\"), plabel = c(\".p1.\",     \".p2.\", \".p3.\", \".p4.\", \".p5.\", \".p6.\"), start = c(0.489618860121005,     0.444405478931198, -0.161030312058264, 0.780793049091196,     0.641180760057012, 0.799955644613156), est = c(0.489618860121005,     0.444405478931198, -0.161030312058264, 0.780793049091196,     0.641180760057012, 0.799955644613156), se = c(0.0987950113849194,     0.0906196273199333, 0.0999190624269902, 0.110420811943141,     0.0906766526805316, 0)), pta = list(names = c(\"id\", \"lhs\",     \"op\", \"rhs\", \"user\", \"block\", \"group\", \"free\", \"ustart\",     \"exo\", \"label\", \"plabel\", \"start\", \"est\", \"se\"), vidx = list(        ov = list(1:3), ov.x = list(3L), ov.nox = list(1:2),         ov.model = list(1:3), ov.y = list(2L), ov.num = list(            1:3), ov.ord = list(integer(0)), ov.ind = list(integer(0)),         ov.orphan = list(3L), ov.interaction = list(integer(0)),         ov.efa = list(integer(0)), th = list(integer(0)), th.mean = list(            1:2), lv = list(integer(0)), lv.regular = list(integer(0)),         lv.formative = list(integer(0)), lv.x = list(integer(0)),         lv.y = list(integer(0)), lv.nox = list(integer(0)), lv.nonnormal = list(            integer(0)), lv.interaction = list(integer(0)), lv.efa = list(            integer(0)), lv.rv = list(integer(0)), lv.ind = list(            integer(0)), lv.marker = list(integer(0)), eqs.y = list(            integer(0)), eqs.x = list(integer(0))), meanstructure = FALSE,         nblocks = 1L, ngroups = 1L, nlevels = 1L, nvar = list(            3L), nfac = list(0L), nfac.nonnormal = list(0L),         th.idx = list(c(0, 0)), vnames = list(ov = list(c(\"m\",         \"y\", \"x\")), ov.x = list(\"x\"), ov.nox = list(c(\"m\", \"y\"        )), ov.model = list(c(\"m\", \"y\", \"x\")), ov.y = list(\"y\"),             ov.num = list(c(\"m\", \"y\", \"x\")), ov.ord = list(character(0)),             ov.ind = list(character(0)), ov.orphan = list(\"x\"),             ov.interaction = list(character(0)), ov.efa = list(                character(0)), th = list(character(0)), th.mean = list(                c(\"m\", \"y\")), lv = list(character(0)), lv.regular = list(                character(0)), lv.formative = list(character(0)),             lv.x = list(character(0)), lv.y = list(character(0)),             lv.nox = list(character(0)), lv.nonnormal = list(                character(0)), lv.interaction = list(character(0)),             lv.efa = list(character(0)), lv.rv = list(character(0)),             lv.ind = list(character(0)), lv.marker = list(structure(character(0), names = character(0))),             eqs.y = list(c(\"m\", \"y\")), eqs.x = list(c(\"x\", \"m\"            )))), Data = new(\"lavData\", data.type = \"full\", group = character(0),         ngroups = 1L, group.label = character(0), block.label = character(0),         cluster = character(0), nlevels = 1L, level.label = character(0),         std.ov = FALSE, nobs = list(100L), norig = list(100L),         ov.names = list(c(\"m\", \"y\", \"x\")), ov.names.x = list(            \"x\"), ov.names.l = list(), ordered = character(0),         weights = list(NULL), sampling.weights = character(0),         ov = list(name = c(\"m\", \"y\", \"x\"), idx = 1:3, nobs = c(100L,         100L, 100L), type = c(\"numeric\", \"numeric\", \"numeric\"        ), exo = c(0L, 0L, 1L), user = c(0L, 0L, 0L), mean = c(0.136707716165141,         0.142607773170426, 0.0307662984937208), var = c(0.982387594416989,         0.806003471919454, 0.808036004659753), nlev = c(0L, 0L,         0L), lnam = c(\"\", \"\", \"\")), case.idx = list(1:100), missing = \"listwise\",         Mp = list(NULL), Rp = list(NULL), Lp = list(NULL), eXo = list(            structure(c(-2.00627595919716, -1.55956853741809,             1.96270156915108, -0.178318223605633, 1.35762067316143,             1.64899204713817, 0.119484570593628, 0.00362061633761048,             0.19644344592465, 0.679739506730702, 0.801124844964395,             -2.01520057977609, 0.0473959880866878, 0.613096606859849,             -0.170018481053399, 0.225759524431785, 0.892404141125057,             -0.147613098756459, 1.53718231037047, 0.452619354870756,             -1.59569425257054, -0.187165292033729, 0.567634468128946,             0.162679116763597, -1.37198301292582, -1.88395251169133,             -0.0680470081647294, 0.687306933852914, -0.708000728772153,             0.377677268816157, 0.580757739274482, 0.974626092393341,             0.587452509331047, 0.245278778823427, -1.5660037041717,             -0.508128148093857, 0.85827885392439, 0.451866719214799,             -0.897904236853133, 0.31901114488487, -0.0939645105797747,             1.26430832492208, -0.0340093652786424, -0.388169030127935,             -0.260454831909338, -0.877434514087113, 1.29275143050665,             0.165187853607552, -0.603207075711496, 0.398603900801511,             0.858952125458656, -0.421912468569384, -0.305488889429697,             -0.0591880145084799, -2.00187218795239, 0.155436421357447,             0.0425622275156778, -0.262039198794157, -1.0211932583223,             1.06535710343492, -0.457590837875523, 0.135303912879276,             2.11278759570127, -0.591833695386405, -0.668737894045782,             0.153878740931465, -0.285391611599252, -0.492696439200976,             0.409771539388102, 0.229356450786856, -1.07462563331733,             -1.38075085443847, 0.598233241445688, -0.839468642147749,             -0.955425060047348, 1.23621807067256, 0.0759841521696002,             -0.539572907634778, 0.77353811942751, 1.30430052382949,             0.985109974109274, -1.01172151068618, -0.606029025718392,             0.316726055506865, -1.36469110864529, -0.381966279527664,             -0.0142927411517516, -0.0654181319989657, 0.223432418861722,             0.183182166678893, 0.890661242229158, -0.0530718448200924,             -0.829858115515082, -0.121029097825109, -0.209658043434838,             0.0395895617127639, 1.48099019747618, 0.566660058392043,             1.78958035863141, 1.11404785115473), dim = c(100L,             1L))), X = list(structure(c(-1.93960688121213, 1.80629361592663,         1.42154630779917, -1.51842735713593, 1.48902964768093,         1.49141160257004, 0.598507987371281, 0.381806883049413,         0.197205743233356, 0.794564009492286, -0.744718391949799,         -1.22400644991473, -0.941635207268024, 0.0256886315562456,         0.0888956447301062, 0.642053177178128, 0.772408047831361,         1.33482200620076, 1.03095143776001, 1.33423576708279,         0.568184710143821, -0.617505044147246, 0.886986084942816,         0.481428843330528, -0.2979061143484, -1.42696270253796,         0.540485412736717, 0.266985431350899, -0.550892050724136,         0.993308034386241, 1.12084539144617, 1.12571467858157,         -2.31454096135433, -0.782402069166377, 0.424264400117935,         -0.863443992435243, 0.64720562432109, 0.310047584634312,         0.787023186242303, -0.581948040485713, -0.0833292992419118,         0.708328466165495, 1.20383215771471, -0.28566124135585,         0.198893215271352, -1.54422589948569, 0.991716669168178,         0.246849781340447, 0.428898213061036, -0.272173580550484,         1.86541338703072, -0.259959342788965, 0.0239123345097733,         -0.118567913398039, 0.206761755765737, -0.686422721803577,         0.204951554252457, 0.46949270428276, -1.49424112181172,         0.536837029018374, -0.703728316442963, 1.4035897938097,         1.30626617972699, -1.82322297248636, 0.676320422538179,         0.25387522808601, -0.621087178581455, -0.487016001593305,         -1.09061482068991, 0.437215251492525, -1.88543914377571,         -0.548027418070103, 0.613679828278171, -0.172297934891305,         0.532971594949359, 0.419085239694755, 2.2253875405536,         -0.981747486845679, 1.70028468465349, -1.14881241878608,         -0.732161409680165, -1.16335961364633, -1.63285741878866,         1.51132547756466, 0.576682787113246, 1.1935149845777,         -0.585161855935361, 0.0620289832351641, 1.1340178684818,         1.066635589194, 0.801534799134544, 0.134941585426804,         -1.35950790866225, 0.259113073336045, -0.233169660248937,         -0.612499779028082, 1.94785526097089, -0.499098503590761,         0.768563416510753, 0.82648109276748, -0.0594767133664763,         1.22124174600818, 2.41962774380316, -0.373713946733307,         0.321478588682759, 0.834483395499648, 0.878736918798367,         -1.70613283356462, 0.0158419754615937, 0.433244323231134,         -0.578993614135739, -0.567516767404625, -2.19577251099275,         0.31269373407875, 0.0470713101876, -0.105429002622095,         -2.09445535692347, 0.31129032658712, 0.617847315777489,         0.605490850901496, -0.243055081621224, -0.0301995316217546,         -0.345014022157379, 0.846309573028908, 0.566152156470317,         0.115775568675721, 0.962063870223155, -0.171458393591615,         -0.297050612358097, 1.5749191866564, 1.08951395206491,         0.86326685771666, -0.0494683549848034, -0.934065457898941,         0.234010835048536, 0.695417863320383, 0.107278591061355,         0.271935788378825, 0.266488849356989, 0.777641220788783,         0.0756176914418674, 0.412396034471769, 0.0119604272669417,         -0.505230157480132, -1.25953276140883, -0.417400600383708,         1.23007743707499, -1.03478389602492, 0.562032497459854,         0.148780053175554, 1.10185964144276, -0.0680912356166115,         1.42784990468616, 0.229108632124669, 1.31738622064278,         0.0473808367022872, 0.524510390900592, -0.232679995359172,         1.58327362036932, 0.216616273407547, -0.782690897558324,         1.0329778635781, 1.00749351911579, -0.284829131222528,         -0.454187712684133, 0.00813183976657374, 1.05283438235465,         -0.661726999568911, -0.85377744328572, 0.747075617178128,         -1.46756140509395, 0.708502506805348, 0.672708184643465,         -0.00859664246550657, -1.11197895685701, -0.0911128338430799,         2.87444577160583, -0.73847487123867, 1.41685099208688,         -1.37526113777773, -1.7436699467112, 0.0326772892990257,         0.438725114584459, -0.581809842248721, 1.02105885587716,         0.883353418833466, -0.609708441715208, 1.54593972571461,         -0.303472136865922, 0.431612378397331, 0.979710185440064,         -0.869979208784131, 0.27804226124745, 0.0306968079848499,         0.947888826529705, -0.32642552407672, 0.337307621931564,         -1.41046915143887, -0.804828235608586, 0.284153316388028,         -2.00627595919716, -1.55956853741809, 1.96270156915108,         -0.178318223605633, 1.35762067316143, 1.64899204713817,         0.119484570593628, 0.00362061633761048, 0.19644344592465,         0.679739506730702, 0.801124844964395, -2.01520057977609,         0.0473959880866878, 0.613096606859849, -0.170018481053399,         0.225759524431785, 0.892404141125057, -0.147613098756459,         1.53718231037047, 0.452619354870756, -1.59569425257054,         -0.187165292033729, 0.567634468128946, 0.162679116763597,         -1.37198301292582, -1.88395251169133, -0.0680470081647294,         0.687306933852914, -0.708000728772153, 0.377677268816157,         0.580757739274482, 0.974626092393341, 0.587452509331047,         0.245278778823427, -1.5660037041717, -0.508128148093857,         0.85827885392439, 0.451866719214799, -0.897904236853133,         0.31901114488487, -0.0939645105797747, 1.26430832492208,         -0.0340093652786424, -0.388169030127935, -0.260454831909338,         -0.877434514087113, 1.29275143050665, 0.165187853607552,         -0.603207075711496, 0.398603900801511, 0.858952125458656,         -0.421912468569384, -0.305488889429697, -0.0591880145084799,         -2.00187218795239, 0.155436421357447, 0.0425622275156778,         -0.262039198794157, -1.0211932583223, 1.06535710343492,         -0.457590837875523, 0.135303912879276, 2.11278759570127,         -0.591833695386405, -0.668737894045782, 0.153878740931465,         -0.285391611599252, -0.492696439200976, 0.409771539388102,         0.229356450786856, -1.07462563331733, -1.38075085443847,         0.598233241445688, -0.839468642147749, -0.955425060047348,         1.23621807067256, 0.0759841521696002, -0.539572907634778,         0.77353811942751, 1.30430052382949, 0.985109974109274,         -1.01172151068618, -0.606029025718392, 0.316726055506865,         -1.36469110864529, -0.381966279527664, -0.0142927411517516,         -0.0654181319989657, 0.223432418861722, 0.183182166678893,         0.890661242229158, -0.0530718448200924, -0.829858115515082,         -0.121029097825109, -0.209658043434838, 0.0395895617127639,         1.48099019747618, 0.566660058392043, 1.78958035863141,         1.11404785115473), dim = c(100L, 3L)))), SampleStats = new(\"lavSampleStats\",         var = list(c(0.97256371847282, 0.79794343720026, 0.799955644613156        )), cov = list(structure(c(0.97256371847282, 0.369141359964062,         0.391673370862857, 0.369141359964062, 0.79794343720026,         0.0452446848780789, 0.391673370862857, 0.0452446848780789,         0.799955644613156), dim = c(3L, 3L))), mean = list(c(0.136707716165141,         0.142607773170426, 0.0307662984937208)), th = list(NULL),         th.idx = list(NULL), th.names = list(NULL), res.cov = list(            NULL), res.var = list(NULL), res.th = list(NULL),         res.th.nox = list(NULL), res.slopes = list(NULL), res.int = list(            NULL), mean.x = list(0.0307662984937208), cov.x = list(            structure(0.799955644613156, dim = c(1L, 1L))), bifreq = list(            NULL), group.w = list(1), nobs = list(100L), ntotal = 100L,         ngroups = 1L, x.idx = list(3L), icov = list(structure(c(1.58876868852685,         -0.69310482568392, -0.738689804003927, -0.69310482568392,         1.55962259365219, 0.251146512948931, -0.738689804003927,         0.251146512948931, 1.59754117534559), dim = c(3L, 3L))),         cov.log.det = list(-0.915088008145045), res.icov = list(            NULL), res.cov.log.det = list(NULL), ridge = 0, WLS.obs = list(            c(0.97256371847282, 0.369141359964062, 0.391673370862857,             0.79794343720026, 0.0452446848780789, 0.799955644613156            )), WLS.V = list(NULL), WLS.VD = list(NULL), NACOV = list(            NULL), NACOV.user = FALSE, missing.flag = FALSE,         missing = list(NULL), missing.h1 = list(NULL), YLp = list(            NULL), zero.cell.tables = list(NULL)), Model = new(\"lavModel\",         GLIST = list(lambda = structure(c(1, 0, 0, 0, 1, 0, 0,         0, 1), dim = c(3L, 3L)), theta = structure(c(0, 0, 0,         0, 0, 0, 0, 0, 0), dim = c(3L, 3L)), psi = structure(c(0.780793049091196,         0, 0, 0, 0.641180760057012, 0, 0, 0, 0.799955644613156        ), dim = c(3L, 3L)), beta = structure(c(0, 0.444405478931198,         0, 0, 0, 0, 0.489618860121005, -0.161030312058264, 0), dim = c(3L,         3L))), dimNames = list(list(c(\"m\", \"y\", \"x\"), c(\"m\",         \"y\", \"x\")), list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")),             list(c(\"m\", \"y\", \"x\"), c(\"m\", \"y\", \"x\")), list(c(\"m\",             \"y\", \"x\"), c(\"m\", \"y\", \"x\"))), isSymmetric = c(FALSE,         TRUE, TRUE, FALSE), mmSize = c(9L, NA, NA, 9L), representation = \"LISREL\",         modprop = list(uvreg = FALSE, uvord = FALSE, mvreg = FALSE,             nexo = 0L, acyclic = TRUE, bowfree = TRUE), meanstructure = FALSE,         correlation = FALSE, categorical = FALSE, multilevel = FALSE,         group.w.free = FALSE, link = \"default\", nblocks = 1L,         ngroups = 1L, nefa = 0L, nmat = 4L, nvar = 3L, num.idx = list(            1:3), th.idx = list(NULL), nx.free = 5L, nx.unco = 5L,         nx.user = 6L, m.free.idx = list(integer(0), integer(0),             c(1L, 5L), c(2L, 7L, 8L)), x.free.idx = list(integer(0),             integer(0), 4:5, c(2L, 1L, 3L)), x.unco.idx = list(            integer(0), integer(0), 4:5, c(2L, 1L, 3L)), m.user.idx = list(            integer(0), integer(0), c(1L, 5L, 9L), c(2L, 7L,             8L)), x.user.idx = list(integer(0), integer(0), 4:6,             c(2L, 1L, 3L)), x.def.idx = integer(0), x.ceq.idx = integer(0),         x.cin.idx = integer(0), x.free.var.idx = 4:5, ceq.simple.only = FALSE,         ceq.simple.K = structure(numeric(0), dim = c(0L, 0L)),         eq.constraints = FALSE, eq.constraints.K = structure(numeric(0), dim = c(0L,         0L)), eq.constraints.k0 = numeric(0), def.function = function ()         NULL, ceq.function = function ()         NULL, ceq.jacobian = function ()         NULL, ceq.JAC = structure(numeric(0), dim = c(0L, 5L)),         ceq.rhs = numeric(0), ceq.linear.idx = integer(0), ceq.nonlinear.idx = integer(0),         cin.simple.only = FALSE, cin.function = function ()         NULL, cin.jacobian = function ()         NULL, cin.JAC = structure(numeric(0), dim = c(0L, 5L)),         cin.rhs = numeric(0), cin.linear.idx = integer(0), cin.nonlinear.idx = integer(0),         ceq.efa.JAC = structure(numeric(0), dim = c(0L, 0L)),         con.jac = structure(numeric(0), dim = c(0L, 0L)), con.lambda = numeric(0),         nexo = 1L, conditional.x = FALSE, fixed.x = TRUE, parameterization = \"delta\",         ov.x.dummy.ov.idx = list(3L), ov.x.dummy.lv.idx = list(            3L), ov.y.dummy.ov.idx = list(1:2), ov.y.dummy.lv.idx = list(            1:2), ov.efa.idx = list(NULL), lv.efa.idx = list(            NULL), rv.ov = list(), rv.lv = list(), H = list(),         lv.order = list(), estimator = \"ML\", estimator.args = list()),     Cache = list(NULL), Fit = new(\"Fit\", npar = 5L, x = c(0.489618860121005,     0.444405478931198, -0.161030312058264, 0.780793049091196,     0.641180760057012), partrace = structure(numeric(0), dim = c(0L,     0L)), start = c(0.489618860121005, 0.444405478931198, -0.161030312058264,     0.780793049091196, 0.641180760057012, 0.799955644613156),         est = c(0.489618860121005, 0.444405478931198, -0.161030312058264,         0.780793049091196, 0.641180760057012, 0.799955644613156        ), se = c(0.0987950113849194, 0.0906196273199333, 0.0999190624269902,         0.110420811943141, 0.0906766526805316, 0), fx = 0, fx.group = 0,         logl = NA_real_, logl.group = NA_real_, iterations = 1L,         converged = TRUE, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14),         Sigma.hat = list(structure(c(0.97256371847282, 0.369141359964063,         0.391673370862857, 0.369141359964063, 0.79794343720026,         0.0452446848780789, 0.391673370862857, 0.0452446848780789,         0.799955644613156), dim = c(3L, 3L))), Mu.hat = list(            NULL), TH = list(NULL), test = structure(list(standard = list(            test = \"standard\", stat = 0, stat.group = 0, df = 0L,             refdistr = \"chisq\", pvalue = NA_real_)), info = list(            ngroups = 1L, group.label = character(0), information = c(\"expected\",             \"expected\"), h1.information = c(\"structured\", \"structured\"            ), observed.information = c(\"hessian\", \"hessian\")))),     boot = list(), optim = list(x = c(0.489618860121005, 0.444405478931198,     -0.161030312058264, 0.780793049091196, 0.641180760057012),         dx = c(-2.90350920201311e-33, 9.62635206460407e-18, -1.08220557074892e-17,         9.1055955767077e-17, -3.60572332274535e-17), npar = 5L,         iterations = 1L, converged = TRUE, warn.txt = \"\", parscale = c(1,         1, 1, 1, 1), fx = 0, fx.group = 0, logl.group = NA_real_,         logl = NA_real_, control = list(eval.max = 20000L, iter.max = 10000L,             trace = 0L, step.min = 1, step.max = 1, abs.tol = 2.22044604925031e-15,             rel.tol = 1e-10, x.tol = 1.5e-08, xf.tol = 2.2e-14)),     loglik = list(loglik = -249.193256087925, loglik.group = -249.193256087925,         npar = 5L, ntotal = 100L, AIC = 508.38651217585, BIC = 521.412363105791,         BIC2 = 505.621107090532, estimator = \"ML\", conditional.x = FALSE,         fixed.x = TRUE), implied = list(cov = list(structure(c(0.97256371847282,     0.369141359964063, 0.391673370862857, 0.369141359964063,     0.79794343720026, 0.0452446848780789, 0.391673370862857,     0.0452446848780789, 0.799955644613156), dim = c(3L, 3L))),         mean = list(NULL), th = list(NULL), group.w = list(NULL)),     vcov = list(se = \"standard\", information = \"expected\", vcov = structure(c(0.00976045427454636,     -4.69843039650757e-18, 3.08372580933549e-18, -8.75275677002381e-18,     -1.24872592844169e-19, -4.21500217502654e-18, 0.0082119168556036,     -0.00402070937024911, 5.57963915121196e-19, 7.16678185655507e-19,     2.2760445383705e-18, -0.00402070937024911, 0.00998381903628876,     -3.50621609765978e-19, -5.70898458815372e-18, -1.0378469724135e-17,     -1.13563738294386e-18, 8.7412048586466e-19, 0.0121927557101825,     3.84006809671836e-20, -3.08693339955219e-20, 7.16678185655508e-19,     -5.12368034650813e-18, 3.84006809671839e-20, 0.00822225534134575    ), dim = c(5L, 5L))), test = structure(list(standard = list(        test = \"standard\", stat = 0, stat.group = 0, df = 0L,         refdistr = \"chisq\", pvalue = NA_real_)), info = list(        ngroups = 1L, group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\"))),     h1 = list(implied = list(cov = list(structure(c(0.97256371847282,     0.369141359964062, 0.391673370862857, 0.369141359964062,     0.79794343720026, 0.0452446848780789, 0.391673370862857,     0.0452446848780789, 0.799955644613156), dim = c(3L, 3L))),         mean = list(c(0.136707716165141, 0.142607773170426, 0.0307662984937208        )), th = list(NULL), group.w = list(1)), logl = list(        loglik = -249.193256087925, loglik.group = -249.193256087925)),     baseline = list(partable = list(id = 1:3, lhs = c(\"m\", \"y\",     \"x\"), op = c(\"~~\", \"~~\", \"~~\"), rhs = c(\"m\", \"y\", \"x\"), user = c(1L,     1L, 1L), block = c(1L, 1L, 1L), group = c(1L, 1L, 1L), free = c(1L,     2L, 0L), ustart = c(0.97256371847282, 0.79794343720026, 0.799955644613156    ), exo = c(0L, 0L, 1L), label = c(\"\", \"\", \"\"), lower = c(0,     0, 0.799955644613156), upper = c(Inf, Inf, 0.799955644613156    ), start = c(0.97256371847282, 0.79794343720026, 0.799955644613156    ), est = c(0.97256371847282, 0.79794343720026, 0.799955644613156    ), se = c(0.137541280093627, 0.112846243089521, 0)), test = structure(list(        standard = list(test = \"standard\", stat = 43.8351760958917,             stat.group = 43.8351760958917, df = 3L, refdistr = \"chisq\",             pvalue = 1.63588442791962e-09)), info = list(ngroups = 1L,         group.label = character(0), information = c(\"expected\",         \"expected\"), h1.information = c(\"structured\", \"structured\"        ), observed.information = c(\"hessian\", \"hessian\")))),     internal = list(), external = list())), class = c(\"fit_out\", \"list\"), args = list(model = NULL, fit_function = \"lavaan\", arg_data_name = \"data\",     arg_model_name = \"model\", arg_group_name = \"group\", parallel = FALSE,     progress = TRUE, ncores = 1)), R = 100, parallel = FALSE,     progress = TRUE, ncores = 1): manymome 0.2.7.1 or later is required. If not available from CRAN, can be installed from GitHub: remotes::install_github('sfcheung/manymome')  test_ind <- power4test(object = sim_only,                        test_fun = test_indirect_effect,                        test_args = list(x = \"x\",                                         m = \"m\",                                         y = \"y\",                                         mc_ci = TRUE)) #> Error: object 'sim_only' not found print(test_ind,       test_long = TRUE) #> Error: object 'test_ind' not found"},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":null,"dir":"Reference","previous_headings":"","what":"Test All Moderation Effects — test_moderation","title":"Test All Moderation Effects — test_moderation","text":"Test moderation effects testing product terms power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test All Moderation Effects — test_moderation","text":"","code":"test_moderation(   fit = fit,   standardized = FALSE,   ...,   fit_name = \"fit\",   get_map_names = FALSE,   get_test_name = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test All Moderation Effects — test_moderation","text":"fit fit object, passed lavaan::parameterEstimates(), lavaan::standardizedSolution(), lmhelprs::lm_list_to_partable(). standardized Logical. TRUE, lavaan::standardizedSolution() used. Can used models fitted lavaan. ... Additional arguments passed lavaan::parameterEstimates(), lavaan::standardizedSolution(), lmhelprs::lm_list_to_partable(). fit_name name model fit object extracted. Default \"fit\". Used one model fitted replication. name model test conducted. get_map_names Logical. Used power4test() determine extract stored information assign function. Users use argument. get_test_name Logical. Used power4test() get default name test. Users use argument.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test All Moderation Effects — test_moderation","text":"normal usage, returns output returned lavaan::parameterEstimates() lmhelprs::lm_list_to_partable(), following modifications: est: parameter estimates, even standardized estimates requested (est.std). cilo cihi: lower upper limits confidence interval (95% default), respectively (ci.lower ci.upper). sig: Whether test confidence interval significant (1) significant (0). test_label: column labels generated lavaan::lav_partable_labels(), usually labels used coef() label parameters.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test All Moderation Effects — test_moderation","text":"function used power4test() testing product terms, setting test_fun argument. just wrapper test_parameters(). first identifies product terms (terms : names), call test_parameters(), pars set select regression coefficients terms.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/test_moderation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test All Moderation Effects — test_moderation","text":"","code":"mod <- \" m ~ x + w1 + x:w1 y ~ m + w2 + m:w2 + x \"  mod_es <- c(\"m ~ x\" = \"n\",             \"y ~ x\" = \"m\",             \"m ~ w1\" = \"n\",             \"m ~ x:w1\" = \"l\",             \"y ~ m:w2\" = \"-s\")  sim_only <- power4test(nrep = 5,                        model = mod,                        pop_es = mod_es,                        n = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s):  test_out <- power4test(object = sim_only,                        test_fun = test_moderation) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_moderation: CIs    print(test_out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ x + w1 + x:w1 #> y ~ m + w2 + m:w2 + x #>  #> == Model on Variables/Indicators == #>  #> m ~ x + w1 + x:w1 #> y ~ m + w2 + m:w2 + x #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x                 0.000   #>     w1                0.000   #>     x:w1              0.150   #>   y ~                         #>     m                 0.000   #>     w2                0.000   #>     m:w2             -0.050   #>     x                 0.300   #>  #> Covariances: #>                    Population #>   x ~~                        #>     w1                0.000   #>     x:w1              0.000   #>     w2                0.000   #>   w1 ~~                       #>     x:w1              0.000   #>     w2                0.000   #>   x:w1 ~~                     #>     w2                0.000   #>  #> Variances: #>                    Population #>    .m                 0.977   #>    .y                 0.907   #>     m:w2              1.000   #>     x                 1.000   #>     w1                1.000   #>     x:w1              1.000   #>     w2                1.000   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  5  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 9 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        10 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                12.032 #>   Degrees of freedom                                 8 #>   P-value (Chi-square)                           0.150 #>  #> =============== <test_moderation: CIs > =============== #>  #> Mean(s) across replication: #>   test_label lhs op  rhs    est    se      z pvalue   cilo  cihi   sig #> 1     m~x:w1   m  ~ x:w1  0.178 0.106  1.624  0.204 -0.031 0.386 0.600 #> 2     y~m:w2   y  ~ m:w2 -0.123 0.099 -1.247  0.374 -0.318 0.071 0.200 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 5  #> - Proportion of valid replications for rejection rate(s): 1.000"},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Test All Free Parameters — test_parameters","title":"Test All Free Parameters — test_parameters","text":"Test free parameters, including user-defined parameters, power4test object.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test All Free Parameters — test_parameters","text":"","code":"test_parameters(   fit = fit,   standardized = FALSE,   pars = NULL,   op = NULL,   remove.nonfree = TRUE,   ...,   fit_name = \"fit\",   get_map_names = FALSE,   get_test_name = FALSE )"},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test All Free Parameters — test_parameters","text":"fit fit object, passed lavaan::parameterEstimates(), lavaan::standardizedSolution(), lmhelprs::lm_list_to_partable(). standardized Logical. TRUE, lavaan::standardizedSolution() used. Can used models fitted lavaan. pars Optional. set character vector, parameters test_label equal values pars returned. op Optional. set character vector, parameters operators (e.g., \"~\", \"=~\") returned. pars op specified, parameters meeting requirements returned. remove.nonfree Logical. TRUE, default, free parameters returned. Ignored standardized TRUE model fitted lavaan. ... Additional arguments passed lavaan::parameterEstimates(), lavaan::standardizedSolution(), lmhelprs::lm_list_to_partable(). fit_name name model fit object extracted. Default \"fit\". Used one model fitted replication. name model test conducted. get_map_names Logical. Used power4test() determine extract stored information assign function. Users use argument. get_test_name Logical. Used power4test() get default name test. Users use argument.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test All Free Parameters — test_parameters","text":"normal usage, returns output returned lavaan::parameterEstimates() lmhelprs::lm_list_to_partable(), following modifications: est: parameter estimates, even standardized estimates requested (est.std). cilo cihi: lower upper limits confidence interval (95% default), respectively (ci.lower ci.upper). sig: Whether test confidence interval significant (1) significant (0). test_label: column labels generated lavaan::lav_partable_labels(), usually labels used coef() label parameters.","code":""},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test All Free Parameters — test_parameters","text":"function used power4test() testing free user-defined model parameters, setting test_fun argument. models fitted lavaan, uses lavaan::parameterEstimates() test. bootstrapping requested (setting se = \"boot\"), supports bootstrap confidence intervals returned lavaan::parameterEstimates(). preliminary, though limited, supported models fitted stats::lm() (lmhelprs::many_lm()). Tests conducted ordinary least squares confidence intervals based t statistic, reported stats::confint() applied output stats::lm().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/power4mome/reference/test_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test All Free Parameters — test_parameters","text":"","code":"mod <- \" m ~ a*x y ~ b*m + x ab := a * b \"  mod_es <- c(\"y ~ m\" = \"l\",             \"m ~ x\" = \"m\",             \"y ~ x\" = \"n\")  sim_only <- power4test(nrep = 2,                        model = mod,                        pop_es = mod_es,                        n = 100,                        do_the_test = FALSE,                        iseed = 1234) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Simulate the data: #> Fit the model(s):  test_out <- power4test(object = sim_only,                        test_fun = test_parameters) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs    print(test_out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> =============== <test_parameters: CIs > =============== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label    est    se      z pvalue   cilo  cihi   sig #> 1          a   m  ~   x     a  0.382 0.103  3.698  0.000  0.179 0.585 1.000 #> 2          b   y  ~   m     b  0.443 0.094  4.715  0.000  0.259 0.627 1.000 #> 3        y~x   y  ~   x       -0.029 0.104 -0.226  0.236 -0.232 0.174 0.000 #> 4       m~~m   m ~~   m        0.945 0.134  7.071  0.000  0.683 1.207 1.000 #> 5       y~~y   y ~~   y        0.836 0.118  7.071  0.000  0.604 1.068 1.000 #> 6         ab  ab := a*b    ab  0.169 0.058  2.909  0.004  0.055 0.283 1.000 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 2  #> - Proportion of valid replications for rejection rate(s): 1.000   test_out <- power4test(object = sim_only,                        test_fun = test_parameters,                        test_args = list(standardized = TRUE)) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs (standardized)    print(test_out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> ======== <test_parameters: CIs (standardized) > ======== #>  #> Mean(s) across replication: #>   test_label lhs op rhs label    est    se      z pvalue   cilo  cihi   sig #> 1          a   m  ~   x     a  0.347 0.085  4.069  0.000  0.180 0.514 1.000 #> 2          b   y  ~   m     b  0.446 0.086  5.190  0.000  0.277 0.615 1.000 #> 3        y~x   y  ~   x       -0.024 0.094 -0.233  0.232 -0.209 0.160 0.000 #> 4       m~~m   m ~~   m        0.880 0.059 14.888  0.000  0.764 0.995 1.000 #> 5       y~~y   y ~~   y        0.791 0.071 11.181  0.000  0.652 0.931 1.000 #> 6       x~~x   x ~~   x        1.000 0.000    NaN    NaN  1.000 1.000 1.000 #> 7         ab  ab := a*b    ab  0.155 0.050  3.102  0.002  0.057 0.253 1.000 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 2  #> - Proportion of valid replications for rejection rate(s): 1.000   test_out <- power4test(object = sim_only,                        test_fun = test_parameters,                        test_args = list(op = \"~\")) #> Displaying progress enabled. Set 'progress = FALSE' to hide the progress. #> Do the test: test_parameters: CIs (op: ~)   print(test_out,       test_long = TRUE) #>  #> ====================== Model Information ====================== #>  #> == Model on Factors/Variables == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> == Model on Variables/Indicators == #>  #> m ~ a*x #> y ~ b*m + x #> ab := a * b #>  #> ====== Population Values ====== #>  #> Regressions: #>                    Population #>   m ~                         #>     x          (a)    0.300   #>   y ~                         #>     m          (b)    0.500   #>     x                 0.000   #>  #> Variances: #>                    Population #>    .m                 0.910   #>    .y                 0.750   #>     x                 1.000   #>  #> Defined Parameters: #>                    Population #>     ab                0.150   #>  #> ======================= Data Information ======================= #>  #> Number of Replications:  2  #> Sample Sizes:  100  #>  #> Call print with 'data_long = TRUE' for further information. #>  #> ==================== Extra Element(s) Found ==================== #>  #> - fit #>  #> === Element(s) of the First Dataset === #>  #> ============ <fit> ============ #>  #> lavaan 0.6-19 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 0.000 #>   Degrees of freedom                                 0 #>  #> ============ <test_parameters: CIs (op: ~)> ============ #>  #> Mean(s) across replication: #>   test_label lhs op rhs label    est    se      z pvalue   cilo  cihi   sig #> 1          a   m  ~   x     a  0.382 0.103  3.698  0.000  0.179 0.585 1.000 #> 2          b   y  ~   m     b  0.443 0.094  4.715  0.000  0.259 0.627 1.000 #> 3        y~x   y  ~   x       -0.029 0.104 -0.226  0.236 -0.232 0.174 0.000 #>  #> - The column 'sig' shows the rejection rates. #> - If the null hypothesis is false, the rate is the power. #> - Number of valid replications for rejection rate(s): 2  #> - Proportion of valid replications for rejection rate(s): 1.000"},{"path":"https://sfcheung.github.io/power4mome/news/index.html","id":"power4mome-0013","dir":"Changelog","previous_headings":"","what":"power4mome 0.0.1.3","title":"power4mome 0.0.1.3","text":"Initialized package. (0.0.0.9000) Major functions drafted main workflows finalized. Ready documenting changes. (0.0.0.9001) Documented set pop_es. (0.0.0.9002) Added preliminary support covariance-models (regression path) confirmatory factor analytic models (CFA). (0.0.0.9003) Added support multigroup models. (0.0.0.9004) sim_data(), number_of_indicators reliability can set one single values. (0.0.0.9005) Added check negative variances variances greater one model. (0.0.0.9006) warning raised ptable_pop() pop_es one variables model. (0.0.0.9007) Added error warning checking code fit_model(). (0.0.0.9008) Added error checking code gen_mc(). (0.0.0.9009) Added tests sim_out() do_test(). (0.0.0.9010) Updated help do_test() requirement results test functions. (0.0.0.9011) Updated fit_model() support user-supplied models. (0.0.0.9012) Updated do_test() sim_out() arbitrary number models arbitrary elements used test_fun(). (0.0.0.9013) Updated do_test() sim_out() support tests compare two models. (0.0.0.9014) Added tests power4test(). (0.0.0.9015) Removed redundant arguments tests power4test(). (0.0.0.9016) Updated power4test() store one test. (0.0.0.9017) Updated fit_model() support fitting model another function (0.0.0.9018) Added argument x_fun() sim_data() generating nonnormal exogenous variables. (0.0.0.9019) Updated power4test() related functions support updating power4test object different population effect sizes sample size(s). (0.0.0.9020) Added option generate nonparametric bootstrap estimates. Slow lavaan can used models fitted lm(). (0.0.0.9021) Added test_indirect_effect() testing indirect effect calling power4test(). (0.0.0.9022) Added test_index_mome() testing moderated mediation effect (testing index moderated mediation) calling power4test(). (0.0.0.9023) Added test_parameters() testing free parameters calling power4test(). (0.0.0.9024) Added test_moderation() testing product terms calling power4test(). (0.0.0.9024) test functions can support models fitted lmhelprs::many_lm(). (0.0.0.9024) Simplified argument fit_function fit_model(). can now strings, lavaan lm. (0.0.0.9025) Added summarize_tests(), along print method, summarize te test results power4test object. (0.0.0.9026) Added print method power4test objects. (0.0.0.9027) sim_out can now used update sim_out object adding elements extra. (0.0.0.9028) power4test() can updata power4test object using new nrep. (0.0.0.9029) Added get_rejection_rates() extract rejection rates stored tests. (0.0.0.9030) Added power4test_by_n() power4test_by_pop_es() finding power range sample sizes effect sizes. (0.0.0.9031) Update help pages examples. (0.0.0.9032) Minor fixes boot_ci mc_ci arguments test_indirect_effect() test_index_of_mome(). (0.0.0.9033) Revised fit_model() can used refit model new set data. (0.0.0.9034) Revised power4test() support fitting one model datasets. test_ functions also updated allow users specifying model uesd tests. (0.0.0.9035) Drafted pkgdown site. (0.0.0.9036) Added pop_es_yaml() revised ptable_pop() support method specify population values. (0.0.0.9037) Added option disable computation implied statistics. Default FALSE becasue required testing unstandardized effects. Require manymome 0.2.7.1 . (0.0.0.9038) Finalized internal testing. (0.0.1) Fixed bug using x_fun. (0.0.1.1) Added temporary check package versions. (0.0.1.2) Fixed issue printing boot_out mc_out objects print.sim_data(). (0.0.1.3)","code":""}]
