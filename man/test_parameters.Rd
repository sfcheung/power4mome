% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test_pars.R
\name{test_parameters}
\alias{test_parameters}
\title{Test All Free Parameters}
\usage{
test_parameters(
  fit = fit,
  standardized = FALSE,
  pars = NULL,
  op = NULL,
  remove.nonfree = TRUE,
  ...,
  get_map_names = FALSE,
  get_test_name = FALSE
)
}
\arguments{
\item{fit}{The fit object, to be
passed to \code{\link[lavaan:parameterEstimates]{lavaan::parameterEstimates()}},
\code{\link[lavaan:standardizedSolution]{lavaan::standardizedSolution()}},
or \code{\link[lmhelprs:lm_list_to_partable]{lmhelprs::lm_list_to_partable()}}.}

\item{standardized}{Logical. If \code{TRUE},
\code{\link[lavaan:standardizedSolution]{lavaan::standardizedSolution()}} will
be used. Can be used only with models
fitted by \code{lavaan}.}

\item{pars}{Optional. If set to
a character vector, only parameters
with \code{test_label} equal to values in
\code{pars} will be returned.}

\item{op}{Optional. If set to a
character vector, only parameters with
operators (e.g., \code{"~"}, \code{"=~"}) will
be returned. If both \code{pars} and \code{op}
are specified, only parameters meeting
\emph{both} requirements will be returned.}

\item{remove.nonfree}{Logical. If
\code{TRUE}, the default, only free
parameters will be returned. Ignored
if \code{standardized} is \code{TRUE} or
if the model is not fitted by
\code{lavaan}.}

\item{...}{Additional arguments to
be passed to \code{\link[lavaan:parameterEstimates]{lavaan::parameterEstimates()}},
\code{\link[lavaan:standardizedSolution]{lavaan::standardizedSolution()}},
or \code{\link[lmhelprs:lm_list_to_partable]{lmhelprs::lm_list_to_partable()}}.}

\item{get_map_names}{Logical. Used
by \code{\link[=power4test]{power4test()}} to determine how
to extract stored information and
assign them to this function. Users
should not use this argument.}

\item{get_test_name}{Logical. Used
by \code{\link[=power4test]{power4test()}} to get the default
name of this test. Users should not
use this argument.}
}
\value{
In its normal usage, it returns
the output returned by
\code{\link[lavaan:parameterEstimates]{lavaan::parameterEstimates()}}
or \code{\link[lmhelprs:lm_list_to_partable]{lmhelprs::lm_list_to_partable()}},
with the following modifications:
\itemize{
\item \code{est}: The parameter estimates,
even if standardized estimates
are requested (not \code{est.std}).
\item \code{cilo} and \code{cihi}: The
lower and upper limits of the
confidence interval (95\% by
default), respectively (not
\code{ci.lower} and \code{ci.upper}).
\item \code{sig}: Whether a test by confidence
interval is significant (\code{1}) or
not significant (\code{0}).
\item \code{test_label}: A column of labels
generated by
\code{\link[lavaan:lav_partable]{lavaan::lav_partable_labels()}},
which are usually the labels used by
\code{coef()} to label the parameters.
}
}
\description{
Test all free parameters,
including user-defined parameters,
for a \code{power4test} object.
}
\details{
This function is to be used in
\code{\link[=power4test]{power4test()}} for testing all
free and user-defined model
parameters, by
setting it to the \code{test_fun}
argument.

For models fitted by \code{lavaan},
it uses \code{\link[lavaan:parameterEstimates]{lavaan::parameterEstimates()}}
to do the test. If bootstrapping was
requested (by setting \code{se = "boot"}),
then it supports bootstrap
confidence intervals returned by
\code{\link[lavaan:parameterEstimates]{lavaan::parameterEstimates()}}.

It has preliminary, though limited,
supported for models fitted by
\code{\link[stats:lm]{stats::lm()}} (through
\code{\link[lmhelprs:many_lm]{lmhelprs::many_lm()}}). Tests are
conducted by ordinary least squares
confidence intervals based on
the \emph{t} statistic, reported by
\code{\link[stats:confint]{stats::confint()}} applied to
the output of \code{\link[stats:lm]{stats::lm()}}.
}
\examples{



mod <-
"
m ~ a*x
y ~ b*m + x
ab := a * b
"

mod_es <- c("y ~ m" = "l",
            "m ~ x" = "m",
            "y ~ x" = "n")

sim_only <- power4test(nrep = 2,
                       model = mod,
                       pop_es = mod_es,
                       n = 100,
                       do_the_test = FALSE,
                       iseed = 1234)

test_out <- power4test(object = sim_only,
                       test_fun = test_parameters)

print(test_out,
      test_long = TRUE)

test_out <- power4test(object = sim_only,
                       test_fun = test_parameters,
                       test_args = list(standardized = TRUE))

print(test_out,
      test_long = TRUE)

test_out <- power4test(object = sim_only,
                       test_fun = test_parameters,
                       test_args = list(op = "~"))

print(test_out,
      test_long = TRUE)

}
\seealso{
\code{\link[=power4test]{power4test()}}
}
