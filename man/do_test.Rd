% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do_test.R
\name{do_test}
\alias{do_test}
\title{Do a Test on Each Replication}
\usage{
do_test(
  sim_all,
  test_fun,
  test_args = list(),
  map_names = c(fit = "fit"),
  results_fun = NULL,
  results_args = list(),
  parallel = FALSE,
  progress = FALSE,
  ncores = max(1, parallel::detectCores(logical = FALSE) - 1)
)
}
\arguments{
\item{sim_all}{The output of
\code{\link[=sim_out]{sim_out()}}.}

\item{test_fun}{A function to do the
test. See 'Details' for the requirement
of this function.}

\item{test_args}{A list of arguments
to be passed to the \code{test_fun}
function. Default is \code{list()}.}

\item{map_names}{A named character
vector specifying how the content of
the element \code{extra} in
each replication of \code{sim_all} map
to the argument of \code{test_fun}.
Default is \code{c(fit = "fit")},
indicating that the element \code{fit}
in the element \code{extra} is set to
the argument \code{fit} of \code{test_fun}.
That is, for the first replication,
\code{fit = sim_out[[1]]$extra$fit} when
calling \code{test_fun}.}

\item{results_fun}{The function to be
used to extract the test results.
See \code{Details} for the requirements
of this function. Default is \code{NULL},
assuming that the output of
\code{test_fun} can be used directly.}

\item{results_args}{A list of
arguments to be passed to the
\code{results_fun} function. Default is
\code{list()}.}

\item{parallel}{If \code{TRUE}, parallel
processing will be used to do the
tests. Default is \code{FALSE}.}

\item{progress}{If \code{TRUE}, the progress
of tests will be displayed.
Default is `FALSE.}

\item{ncores}{The number of CPU
cores to use if parallel processing
is used.}
}
\value{
An object of the class \code{test_out},
which is a list of length equal to
\code{sim_all}. Each element of the list
has two elements:
\itemize{
\item \code{test}: The output of \code{test_fun}.
\item \code{test_results}: The output of
\code{results_fun}.
}
}
\description{
Do a test on each
replication in the output of
\code{\link[=sim_out]{sim_out()}}.
}
\details{
Do an arbitrary test in each
replication using the function set to
\code{test_fun}. This function usually
should work
on the output of \code{\link[lavaan:sem]{lavaan::sem()}},
\code{\link[lmhelprs:many_lm]{lmhelprs::many_lm()}}, or
\code{\link[stats:lm]{stats::lm()}}, but can also be a
function that works on the output
of the function set to \code{fit_function}
when calling \code{\link[=fit_model]{fit_model()}} or
\code{\link[=power4test]{power4test()}} (see \code{fit_model_args}).

The test results will be extracted
from the output of \code{test_fun} by the
function set to \code{results_fun}. If
the \code{test_fun} already returns an
output of the expected format
(see below), then set \code{results_fun}
to \code{NULL}, the default. The output
of \code{test_fun} will be used for
estimating power.

The function set to \code{results_fun}
must accept the output of \code{test_fun},
as the first argument, and return a
named list (which can be a data frame)
or a named vector with some
of the following
elements:
\itemize{
\item \code{est}: Optional. The estimate of a
parameter.
\item \code{se}: Optional. The standard error
of the estimate.
\item \code{cilo}: Optional. The lower limit of the
confidence interval.
\item \code{cihi}: Optional. The upper limit of the
confidence interval.
\item \code{sig}: Required. If \code{1}, the test is
significant. If \code{0}, the test is not
significant. If the test cannot be
done for any reason, it should be
\code{NA}.
}

The results can then be used to
estimate the power of the test.

The package came with some ready-to-use
test functions:
\itemize{
\item \code{\link[=test_indirect_effect]{test_indirect_effect()}}
\item \code{\link[=test_cond_indirect]{test_cond_indirect()}}
\item \code{\link[=test_cond_indirect_effects]{test_cond_indirect_effects()}}
\item \code{\link[=test_moderation]{test_moderation()}}
\item \code{\link[=test_index_of_mome]{test_index_of_mome()}}
\item \code{\link[=test_parameters]{test_parameters()}}
}

The function \code{\link[=do_test]{do_test()}} is used by the
all-in-one function \code{\link[=power4test]{power4test()}}.
Users usually do not call this
function directly, though developers
can use this function for develop
other functions for power analysis.
}
\examples{
mod <-
"
m ~ x
y ~ m + x
"
es <-
c("y ~ m" = "m",
  "m ~ x" = "m",
  "y ~ x" = "n")
data_all <- sim_data(nrep = 5,
                     model = mod,
                     pop_es = es,
                     n = 100,
                     iseed = 1234)
fit_all <- fit_model(data_all)
mc_all <- gen_mc(fit_all,
                 R = 50,
                 iseed = 4567)
sim_all <- sim_out(data_all = data_all,
                   fit = fit_all,
                   mc_out = mc_all)

test_all <- do_test(sim_all,
                    test_fun = test_indirect_effect,
                    test_args = list(x = "x",
                                     m = "m",
                                     y = "y",
                                     mc_ci = TRUE),
                    parallel = FALSE,
                    progress = FALSE)

lapply(test_all, function(x) x$test_results)


}
\seealso{
\code{\link[=power4test]{power4test()}}
}
